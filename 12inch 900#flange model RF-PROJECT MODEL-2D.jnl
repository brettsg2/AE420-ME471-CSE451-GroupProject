# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.openAcis('D:/MS PROGRAM/project/MODEL 12INCH 900#RF FLANGE/obj/hbolt.sat', 
    scaleFromFile=OFF)
mdb.models['Model-1'].ConstrainedSketchFromGeometryFile(geometryFile=mdb.acis, 
    name='hbolt')
mdb.models['Model-1'].ConstrainedSketch(name='__sweep__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__sweep__'].sketchOptions.setValues(gridOrigin=
    (13.5, 0.0))
mdb.models['Model-1'].sketches['__sweep__'].retrieveSketch(sketch=
    mdb.models['Model-1'].sketches['hbolt'])
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0, 
    transform=(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 27.0, 87.4, 0.0))
mdb.models['Model-1'].sketches['__profile__'].ConstructionLine(point1=(-100.0, 
    0.0), point2=(100.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].ConstructionLine(point1=(0.0, 
    -100.0), point2=(0.0, 100.0))
del mdb.models['Model-1'].sketches['__profile__']
del mdb.models['Model-1'].sketches['__sweep__']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].ConstructionLine(point1=(0.0, 
    -100.0), point2=(0.0, 100.0))
mdb.models['Model-1'].sketches['__profile__'].FixedConstraint(entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['Model-1'].sketches['hbolt'])
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='BOLT', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['BOLT'].BaseSolidRevolve(angle=180.0, 
    flipRevolveDirection=OFF, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['BOLT'].features['Solid revolve-1'].sketch)
mdb.models['Model-1'].parts['BOLT'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['BOLT'].features['Solid revolve-1'])
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(0.0, 0.0), point2=(
    46.25, 0.0))
mdb.models['Model-1'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__edit__'].geometry[13])
mdb.models['Model-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[7], point1=(
    0.172988891601563, -101.34156036377))
mdb.models['Model-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[11], point1=(
    18.2157287597656, -75.0297546386719))
mdb.models['Model-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[9], point1=(
    28.8773345947266, -97.230339050293))
mdb.models['Model-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[10], point1=(
    23.1364898681641, -89.0079040527344))
mdb.models['Model-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[8], point1=(
    21.4962005615234, -119.84204864502))
mdb.models['Model-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[13], point1=(
    41.5892791748047, 0.205558776855469))
mdb.models['Model-1'].parts['BOLT'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['BOLT'].regenerate()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.openAcis(
    'D:/MS PROGRAM/project/MODEL 12INCH 900#RF FLANGE/obj/RF12FLANGE900.sat', 
    scaleFromFile=OFF)
mdb.models['Model-1'].ConstrainedSketchFromGeometryFile(geometryFile=mdb.acis, 
    name='RF12FLANGE900')
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].ConstructionLine(point1=(0.0, 
    -100.0), point2=(0.0, 100.0))
mdb.models['Model-1'].sketches['__profile__'].FixedConstraint(entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['Model-1'].sketches['RF12FLANGE900'])
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='FLANGE', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['FLANGE'].BaseSolidRevolve(angle=9.0, 
    flipRevolveDirection=OFF, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['FLANGE'].features['Solid revolve-1'].sketch)
mdb.models['Model-1'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['FLANGE'].features['Solid revolve-1'])
mdb.models['Model-1'].sketches['__edit__'].DistanceDimension(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry[7], textPoint=(
    113.669471740723, -44.2024307250977), value=146.0)
mdb.models['Model-1'].sketches['__edit__'].DistanceDimension(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[4], textPoint=(
    180.355697631836, -81.387809753418), value=190.5)
mdb.models['Model-1'].sketches['__edit__'].DistanceDimension(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[6], textPoint=(
    132.77619934082, -121.953659057617), value=305.0)
mdb.models['Model-1'].sketches['__edit__'].VerticalDimension(textPoint=(
    342.575500488281, -82.890251159668), value=79.4, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[6], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[7])
mdb.models['Model-1'].sketches['__edit__'].ObliqueDimension(textPoint=(
    211.825592041016, -8.0), value=6.0, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[4], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[5])
mdb.models['Model-1'].sketches['__edit__'].HorizontalDimension(textPoint=(
    184.219741821289, 8.81254577636719), value=44.5, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[3], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[4])
mdb.models['Model-1'].sketches['__edit__'].HorizontalDimension(textPoint=(
    296.738586425781, -156.479156494141), value=95.5, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[7])
mdb.models['Model-1'].sketches['__edit__'].HorizontalDimension(textPoint=(
    299.619293212891, 34.7456665039063), value=114.5, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[4], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[6])
mdb.models['Model-1'].sketches['__edit__'].HorizontalDimension(textPoint=(
    158.654357910156, -246.754196166992), value=16.0, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[2], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[1])
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].dimensions[5], ))
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].dimensions[7], ))
mdb.models['Model-1'].parts['FLANGE'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['FLANGE'].regenerate()
mdb.openAcis(
    'D:/MS PROGRAM/project/MODEL 12INCH 900#RF FLANGE/obj/BOLT12HOLE900.sat', 
    scaleFromFile=OFF)
mdb.models['Model-1'].ConstrainedSketchFromGeometryFile(geometryFile=mdb.acis, 
    name='BOLT12HOLE900')
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.openAcis(
    'D:/MS PROGRAM/project/MODEL 12INCH 900#RF FLANGE/obj/SPIRAL12WOUND900GASK.sat'
    , scaleFromFile=OFF)
mdb.models['Model-1'].ConstrainedSketchFromGeometryFile(geometryFile=mdb.acis, 
    name='SPIRAL12WOUND900GASK')
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].ConstructionLine(point1=(0.0, 
    -100.0), point2=(0.0, 100.0))
mdb.models['Model-1'].sketches['__profile__'].FixedConstraint(entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['Model-1'].sketches['SPIRAL12WOUND900GASK'])
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='SPRIALWOUND GASKET', 
    type=DEFORMABLE_BODY)
mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].BaseSolidRevolve(angle=9.0, 
    flipRevolveDirection=OFF, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].features['Solid revolve-1'].sketch)
mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].features['Solid revolve-1'])
mdb.models['Model-1'].sketches['__edit__'].VerticalDimension(textPoint=(
    184.512283325195, -1.20052242279053), value=2.25, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[2], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[3])
mdb.models['Model-1'].sketches['__edit__'].ObliqueDimension(textPoint=(
    153.114288330078, -2.1346435546875), value=2.25, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[1], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[0])
mdb.models['Model-1'].sketches['__edit__'].undo()
mdb.models['Model-1'].sketches['__edit__'].undo()
mdb.models['Model-1'].sketches['__edit__'].offset(distance=2.25, objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[8], ), side=LEFT)
mdb.models['Model-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[6], point1=(
    167.6240234375, 1.50215911865234))
mdb.models['Model-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[5], point1=(
    163.2080078125, 1.81840133666992))
mdb.models['Model-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[7], point1=(
    184.657165527344, 1.02779006958008))
mdb.models['Model-1'].sketches['__edit__'].DistanceDimension(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[0], textPoint=(
    155.953155517578, -10.5151023864746), value=162.0)
mdb.models['Model-1'].sketches['__edit__'].move(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[8], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[9], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[10], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[11]), vector=(0.0, 
    -0.25))
mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['FLANGE'].features['Solid revolve-1'].sketch)
mdb.models['Model-1'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['FLANGE'].features['Solid revolve-1'])
mdb.models['Model-1'].sketches['__edit__'].move(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[5], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[6], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[7], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[8], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[9], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[10], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[11], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[12]), vector=(0.0, 
    4.25))
mdb.models['Model-1'].sketches['__edit__'].undo()
mdb.models['Model-1'].sketches['__edit__'].move(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[5], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[6], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[7], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[8], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[9], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[10], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[11], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[12]), vector=(0.0, 
    -0.25))
mdb.models['Model-1'].parts['FLANGE'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['FLANGE'].regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].features['Solid revolve-1'].sketch)
mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].features['Solid revolve-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=15.44, name='__profile__', 
    sheetSize=617.63, transform=
    mdb.models['Model-1'].parts['FLANGE'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['FLANGE'].faces[5], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['FLANGE'].edges[16], 
    sketchOrientation=RIGHT, origin=(251.124084, -8.25, 19.763894)))
mdb.models['Model-1'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=15.44, name='__profile__', 
    sheetSize=617.63, transform=
    mdb.models['Model-1'].parts['FLANGE'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['FLANGE'].faces[5], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['FLANGE'].edges[18], 
    sketchOrientation=RIGHT, origin=(251.124084, -8.25, 19.763894)))
mdb.models['Model-1'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['Model-1'].sketches['BOLT12HOLE900'])
mdb.models['Model-1'].sketches['__profile__'].undo()
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['FLANGE'].features['Solid revolve-1'].sketch)
mdb.models['Model-1'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['FLANGE'].features['Solid revolve-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=15.44, name='__profile__', 
    sheetSize=617.63, transform=
    mdb.models['Model-1'].parts['FLANGE'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['FLANGE'].faces[5], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['FLANGE'].edges[16], 
    sketchOrientation=RIGHT, origin=(251.124084, -8.25, 19.763894)))
mdb.models['Model-1'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].move(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[5]), vector=(
    -19.7638940706998, 251.124083994436))
mdb.models['Model-1'].sketches['__profile__'].move(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[5]), vector=(
    -19.7638940706998, 251.124083994436))
mdb.models['Model-1'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['Model-1'].sketches['BOLT12HOLE900'])
mdb.models['Model-1'].sketches['__profile__'].Arc3Points(point1=(-143.697372, 
    123.002628), point2=(-130.644144895917, 40.5877956002015), point3=(
    123.002628, -143.697372))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-162.697372, 
    123.002628), point2=(331.96, 123.002628000001))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[17])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[14], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[17])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(123.002628, 
    -124.697372), point2=(123.002628, 177.56))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[18])
mdb.models['Model-1'].sketches['__profile__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__profile__'].geometry[8], 
    entity2=mdb.models['Model-1'].sketches['__profile__'].geometry[18])
mdb.models['Model-1'].sketches['__profile__'].move(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[9], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[10], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[11], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[12], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[13], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[14], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[15], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[16], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[17], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[18]), vector=(
    -103.2387339293, -374.126711994436))
mdb.models['Model-1'].sketches['__profile__'].rotate(angle=90.0, centerPoint=(
    19.7638940706998, -251.124083994436), objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[9], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[10], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[11], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[12], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[13], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[14], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[15], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[16], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[17], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[18]))
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].rotate(angle=-90.0, centerPoint=(
    19.7638940706998, -251.124083994436), objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[9], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[10], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[11], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[12], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[13], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[14], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[15], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[16], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[17], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[18]))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[9], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[10], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[11], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[12], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[13], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[16], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[18], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[17], 
    mdb.models['Model-1'].sketches['__profile__'].constraints[49]))
mdb.models['Model-1'].parts['FLANGE'].CutExtrude(flipExtrudeDirection=OFF, 
    sketch=mdb.models['Model-1'].sketches['__profile__'], sketchOrientation=
    RIGHT, sketchPlane=mdb.models['Model-1'].parts['FLANGE'].faces[5], 
    sketchPlaneSide=SIDE1, sketchUpEdge=
    mdb.models['Model-1'].parts['FLANGE'].edges[16])
del mdb.models['Model-1'].sketches['__profile__']
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=6.16, name='__profile__', 
    sheetSize=246.78, transform=
    mdb.models['Model-1'].parts['BOLT'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['BOLT'].faces[5], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['BOLT'].edges[6], 
    sketchOrientation=RIGHT, origin=(-10.6271, 65.466983, 0.0)))
mdb.models['Model-1'].parts['BOLT'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-65.466983, 10.6271)
    , point2=(54.933017, 10.6271))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[14])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[14])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(54.933017, 10.6271), 
    point2=(-65.466983, 10.6271))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[15])
mdb.models['Model-1'].sketches['__profile__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__profile__'].geometry[14], 
    entity2=mdb.models['Model-1'].sketches['__profile__'].geometry[15])
mdb.models['Model-1'].parts['BOLT'].PartitionFaceBySketchThruAll(faces=
    mdb.models['Model-1'].parts['BOLT'].faces.getSequenceFromMask(('[#24 ]', ), 
    ), sketch=mdb.models['Model-1'].sketches['__profile__'], sketchPlane=
    mdb.models['Model-1'].parts['BOLT'].faces[5], sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['BOLT'].edges[6])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].parts['BOLT'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].parts['BOLT'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), point1=mdb.models['Model-1'].parts['BOLT'].vertices[0], point2=
    mdb.models['Model-1'].parts['BOLT'].vertices[1], point3=
    mdb.models['Model-1'].parts['BOLT'].vertices[7])
mdb.models['Model-1'].parts['BOLT'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['BOLT'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), edges=(mdb.models['Model-1'].parts['BOLT'].edges[17], ), line=
    mdb.models['Model-1'].parts['BOLT'].edges[3], sense=FORWARD)
mdb.models['Model-1'].parts['BOLT'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['BOLT'].cells.getSequenceFromMask(('[#4 ]', ), 
    ), edges=(mdb.models['Model-1'].parts['BOLT'].edges[18], ), line=
    mdb.models['Model-1'].parts['BOLT'].edges[14], sense=FORWARD)
mdb.models['Model-1'].parts['BOLT'].PartitionCellByExtendFace(cells=
    mdb.models['Model-1'].parts['BOLT'].cells.getSequenceFromMask(('[#4 ]', ), 
    ), extendFace=mdb.models['Model-1'].parts['BOLT'].faces[17])
mdb.models['Model-1'].parts['BOLT'].PartitionCellByExtendFace(cells=
    mdb.models['Model-1'].parts['BOLT'].cells.getSequenceFromMask(('[#10 ]', ), 
    ), extendFace=mdb.models['Model-1'].parts['BOLT'].faces[12])
mdb.models['Model-1'].parts['FLANGE'].PartitionCellByExtendFace(cells=
    mdb.models['Model-1'].parts['FLANGE'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), extendFace=mdb.models['Model-1'].parts['FLANGE'].faces[1])
mdb.models['Model-1'].parts['FLANGE'].PartitionCellByExtendFace(cells=
    mdb.models['Model-1'].parts['FLANGE'].cells.getSequenceFromMask(('[#2 ]', 
    ), ), extendFace=mdb.models['Model-1'].parts['FLANGE'].faces[13])
mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].PartitionEdgeByPoint(edge=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].edges[1], point=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].InterestingPoint(
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].edges[1], MIDDLE))
mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].PartitionFaceByShortestPath(
    faces=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), point1=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].vertices[2], point2=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].InterestingPoint(
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].edges[4], MIDDLE))
mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].PartitionCellByExtendFace(
    cells=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), extendFace=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].faces[0])
#* Feature creation failed.
mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].PartitionCellByExtendFace(
    cells=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), extendFace=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].faces[1])
#* Feature creation failed.
mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].PartitionFaceByShortestPath(
    faces=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].faces.getSequenceFromMask(
    ('[#2 ]', ), ), point1=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].vertices[0], point2=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].InterestingPoint(
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].edges[4], MIDDLE))
mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].deleteFeatures((
    'Partition edge-1', 'Partition face-1', 'Partition face-2'))
mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), point1=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].InterestingPoint(
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].edges[5], MIDDLE), 
    point2=mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].InterestingPoint(
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].edges[1], MIDDLE), 
    point3=mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].InterestingPoint(
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].edges[3], MIDDLE))
mdb.models['Model-1'].parts['FLANGE'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].parts['FLANGE'].cells.getSequenceFromMask(('[#4 ]', 
    ), ), point1=mdb.models['Model-1'].parts['FLANGE'].InterestingPoint(
    mdb.models['Model-1'].parts['FLANGE'].edges[37], MIDDLE), point2=
    mdb.models['Model-1'].parts['FLANGE'].InterestingPoint(
    mdb.models['Model-1'].parts['FLANGE'].edges[27], MIDDLE), point3=
    mdb.models['Model-1'].parts['FLANGE'].InterestingPoint(
    mdb.models['Model-1'].parts['FLANGE'].edges[16], MIDDLE))
mdb.models['Model-1'].parts['FLANGE'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].parts['FLANGE'].cells.getSequenceFromMask(('[#4 ]', 
    ), ), point1=mdb.models['Model-1'].parts['FLANGE'].vertices[5], point2=
    mdb.models['Model-1'].parts['FLANGE'].InterestingPoint(
    mdb.models['Model-1'].parts['FLANGE'].edges[47], MIDDLE), point3=
    mdb.models['Model-1'].parts['FLANGE'].InterestingPoint(
    mdb.models['Model-1'].parts['FLANGE'].edges[45], MIDDLE))
mdb.models['Model-1'].parts['FLANGE'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].parts['FLANGE'].cells.getSequenceFromMask(('[#4 ]', 
    ), ), point1=mdb.models['Model-1'].parts['FLANGE'].InterestingPoint(
    mdb.models['Model-1'].parts['FLANGE'].edges[37], MIDDLE), point2=
    mdb.models['Model-1'].parts['FLANGE'].InterestingPoint(
    mdb.models['Model-1'].parts['FLANGE'].edges[50], MIDDLE), point3=
    mdb.models['Model-1'].parts['FLANGE'].vertices[10])
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='FLANGE-1', 
    part=mdb.models['Model-1'].parts['FLANGE'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name=
    'SPRIALWOUND GASKET-1', part=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='BOLT-1', part=
    mdb.models['Model-1'].parts['BOLT'])
mdb.models['Model-1'].rootAssembly.rotate(angle=180.0, axisDirection=(0.0, 0.0, 
    18.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('BOLT-1', ))
mdb.models['Model-1'].rootAssembly.rotate(angle=180.0, axisDirection=(0.0, 
    -120.4, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('BOLT-1', ))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('BOLT-1', ), vector=
    (263.41648, -0.25, 41.721072))
mdb.models['Model-1'].rootAssembly.rotate(angle=9.0, axisDirection=(0.0, 
    -120.4, 0.0), axisPoint=(263.41648, -0.25, 41.721072), instanceList=(
    'BOLT-1', ))
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['BOLT'].features['Solid revolve-1'].sketch)
mdb.models['Model-1'].parts['BOLT'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['BOLT'].features['Solid revolve-1'])
mdb.models['Model-1'].sketches['__edit__'].VerticalDimension(textPoint=(
    53.820686340332, 67.2918548583984), value=87.65, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[8], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[7])
mdb.models['Model-1'].sketches['__edit__'].VerticalDimension(textPoint=(
    82.2753219604492, 17.4850425720215), value=87.65, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[10])
mdb.models['Model-1'].sketches['__edit__'].undo()
mdb.models['Model-1'].sketches['__edit__'].HorizontalDimension(textPoint=(
    26.3018112182617, 78.9477767944336), value=9.0, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[7], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[0])
mdb.models['Model-1'].sketches['__edit__'].VerticalDimension(textPoint=(
    90.8866348266602, 29.8187026977539), value=87.65, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[8])
mdb.models['Model-1'].sketches['__edit__'].offset(distance=0.25, objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[6], ), side=RIGHT)
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(27.0, 120.15), point2=(
    27.0, 120.4))
mdb.models['Model-1'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__edit__'].geometry[18])
mdb.models['Model-1'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[17], entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry[18])
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[6], ))
mdb.models['Model-1'].sketches['__edit__'].move(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[17], ), vector=(0.0, 
    0.25))
mdb.models['Model-1'].parts['BOLT'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['BOLT'].regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-1'].parts['BOLT'].backup()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['BOLT'].features['Partition face-1'].sketch)
mdb.models['Model-1'].parts['BOLT'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['BOLT'].features['Partition face-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['BOLT'].features['Partition face-1'].sketch)
mdb.models['Model-1'].parts['BOLT'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['BOLT'].features['Partition face-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['BOLT'].regenerate()
mdb.models['Model-1'].parts['BOLT'].deleteFeatures(('Partition face-1', 
    'Partition cell-1', 'Partition cell-3', 'Partition cell-2'))
mdb.models['Model-1'].parts['BOLT'].deleteFeatures(('Partition cell-4', 
    'Partition cell-5'))
mdb.models['Model-1'].parts['BOLT'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].parts['BOLT'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), point1=mdb.models['Model-1'].parts['BOLT'].InterestingPoint(
    mdb.models['Model-1'].parts['BOLT'].edges[1], CENTER), point2=
    mdb.models['Model-1'].parts['BOLT'].vertices[5], point3=
    mdb.models['Model-1'].parts['BOLT'].InterestingPoint(
    mdb.models['Model-1'].parts['BOLT'].edges[7], MIDDLE))
mdb.models['Model-1'].parts['BOLT'].PartitionCellBySweepEdge(cells=
    mdb.models['Model-1'].parts['BOLT'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), edges=(mdb.models['Model-1'].parts['BOLT'].edges[8], ), sweepPath=
    mdb.models['Model-1'].parts['BOLT'].edges[14])
mdb.models['Model-1'].parts['BOLT'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['BOLT'].cells.getSequenceFromMask(('[#4 ]', ), 
    ), edges=(mdb.models['Model-1'].parts['BOLT'].edges[18], ), line=
    mdb.models['Model-1'].parts['BOLT'].edges[1], sense=REVERSE)
mdb.models['Model-1'].parts['BOLT'].PartitionCellByExtendFace(cells=
    mdb.models['Model-1'].parts['BOLT'].cells.getSequenceFromMask(('[#2 ]', ), 
    ), extendFace=mdb.models['Model-1'].parts['BOLT'].faces[8])
mdb.models['Model-1'].parts['BOLT'].PartitionCellByExtendFace(cells=
    mdb.models['Model-1'].parts['BOLT'].cells.getSequenceFromMask(('[#2 ]', ), 
    ), extendFace=mdb.models['Model-1'].parts['BOLT'].faces[20])
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['BOLT'].features['Solid revolve-1'].sketch)
mdb.models['Model-1'].parts['BOLT'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['BOLT'].features['Solid revolve-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].rootAssembly.translate(instanceList=('BOLT-1', ), vector=
    (0.0, 0.0, 200.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('BOLT-1', ), vector=
    (0.0, 0.166667, -200.0))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].Material(description=
    'source Marks mech handbook - Materials', name='SPRIAL WOUND GASKET')
mdb.models['Model-1'].materials['SPRIAL WOUND GASKET'].Elastic(table=((18000.0, 
    0.3), ))
mdb.models['Model-1'].materials['SPRIAL WOUND GASKET'].Expansion(table=((
    1.8e-05, ), ))
mdb.models['Model-1'].materials['SPRIAL WOUND GASKET'].GasketMembraneElastic(
    table=((18000.0, 0.3), ))
mdb.models['Model-1'].materials['SPRIAL WOUND GASKET'].GasketTransverseShearElastic(
    table=((68.966, ), ))
mdb.models['Model-1'].Material(name='FLANGE')
mdb.models['Model-1'].materials['FLANGE'].Elastic(table=((203395.0, 0.3), ))
mdb.models['Model-1'].materials['FLANGE'].Expansion(table=((1.265e-05, ), ))
mdb.models['Model-1'].Material(name='BOLT AND NUT')
mdb.models['Model-1'].materials['BOLT AND NUT'].Elastic(table=((204000.0, 0.3), 
    ))
mdb.models['Model-1'].materials['BOLT AND NUT'].Expansion(table=((1.265e-05, ), 
    ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.makeIndependent(instances=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.makeIndependent(instances=(
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ))
mdb.models['Model-1'].rootAssembly.makeIndependent(instances=(
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'], ))
mdb.models['Model-1'].HomogeneousSolidSection(material='BOLT AND NUT', name=
    'BOLT', thickness=1.0)
mdb.models['Model-1'].parts['BOLT'].Set(cells=
    mdb.models['Model-1'].parts['BOLT'].cells.getSequenceFromMask(('[#3f ]', ), 
    ), name='Set-1')
mdb.models['Model-1'].parts['BOLT'].SectionAssignment(offset=0.0, offsetField=
    '', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['BOLT'].sets['Set-1'], sectionName='BOLT', 
    thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].HomogeneousSolidSection(material='FLANGE', name=
    'Section-2', thickness=1.0)
mdb.models['Model-1'].sections.changeKey(fromName='Section-2', toName='FLANGE')
mdb.models['Model-1'].parts['FLANGE'].Set(cells=
    mdb.models['Model-1'].parts['FLANGE'].cells.getSequenceFromMask(('[#3f ]', 
    ), ), name='Set-1')
mdb.models['Model-1'].parts['FLANGE'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['FLANGE'].sets['Set-1'], sectionName='FLANGE', 
    thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].GasketSection(material='SPRIAL WOUND GASKET', name=
    'GASKET')
mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].Set(cells=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), name='Set-1')
mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].sets['Set-1'], 
    sectionName='GASKET', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], 
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], 
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1']), size=2.0)
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], 
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], 
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1']), size=10.0)
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], 
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], 
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1']), size=30.0)
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], 
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], 
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1']), size=20.0)
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], 
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], 
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1']), size=5.0)
mdb.models['Model-1'].rootAssembly.setMeshControls(algorithm=ADVANCING_FRONT, 
    regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    mask=('[#1f ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    mask=('[#3 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].cells.getSequenceFromMask(
    mask=('[#3f ]', ), ), technique=SWEEP)
mdb.models['Model-1'].rootAssembly.setMeshControls(regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    mask=('[#1f ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    mask=('[#3 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].cells.getSequenceFromMask(
    mask=('[#3f ]', ), ), technique=STRUCTURED)
mdb.models['Model-1'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=C3D8, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    mask=('[#3f ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    mask=('[#3 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].cells.getSequenceFromMask(
    mask=('[#3f ]', ), ), ))
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#1f ]', ), ))
mdb.models['Model-1'].rootAssembly.setMeshControls(elemShape=TET, regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    mask=('[#3f ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    mask=('[#3 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].cells.getSequenceFromMask(
    mask=('[#3f ]', ), ), technique=FREE)
mdb.models['Model-1'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    mask=('[#3f ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    mask=('[#3 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].cells.getSequenceFromMask(
    mask=('[#3f ]', ), ), ))
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], 
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], 
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1']))
mdb.models['Model-1'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)), regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    mask=('[#3f ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    mask=('[#3 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].cells.getSequenceFromMask(
    mask=('[#3f ]', ), ), ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-1'].rootAssembly.setMeshControls(elemShape=HEX, regions=
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), technique=STRUCTURED)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].edges.getSequenceFromMask(
    ('[#800 ]', ), ), minSizeFactor=0.1, size=0.5)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].cells.getSequenceFromMask(
    ('[#3f ]', ), ))
mdb.models['Model-1'].rootAssembly.setMeshControls(elemShape=HEX, regions=
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), technique=STRUCTURED)
mdb.models['Model-1'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=C3D8, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT)), regions=(
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'], ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].StaticStep(matrixSolver=DIRECT, matrixStorage=SYMMETRIC, 
    name='Step-1', nlgeom=ON, previous='Initial')
mdb.models['Model-1'].steps['Step-1'].setValues(matrixSolver=DIRECT, 
    matrixStorage=SOLVER_DEFAULT)
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].edges.getSequenceFromMask(
    ('[#100 ]', ), ), faces=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    mask=('[#2120000 #2 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].faces.getSequenceFromMask(
    mask=('[#180024a ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces.getSequenceFromMask(
    mask=('[#200 ]', ), ), name='Set-11')
mdb.models['Model-1'].XsymmBC(createStepName='Step-1', localCsys=None, name=
    'BC-1', region=mdb.models['Model-1'].rootAssembly.sets['Set-11'])
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    mask=('[#21002020 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces.getSequenceFromMask(
    mask=('[#30 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].faces.getSequenceFromMask(
    mask=('[#88000 ]', ), ), name='Set-12')
mdb.models['Model-1'].YsymmBC(createStepName='Step-1', localCsys=None, name=
    'BC-2', region=mdb.models['Model-1'].rootAssembly.sets['Set-12'])
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    ('[#240000 #4 ]', ), ), name='Set-13')
mdb.models['Model-1'].XsymmBC(createStepName='Step-1', localCsys=None, name=
    'BC-3', region=mdb.models['Model-1'].rootAssembly.sets['Set-13'])
mdb.models['Model-1'].boundaryConditions['BC-1'].setValues(typeName=ZSYMM)
mdb.models['Model-1'].boundaryConditions['BC-3'].setValues(typeName=ZSYMM)
mdb.models['Model-1'].boundaryConditions['BC-1'].setValues(typeName=XSYMM)
mdb.models['Model-1'].boundaryConditions['BC-3'].setValues(typeName=XSYMM)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].boundaryConditions['BC-1'].setValues(typeName=ZSYMM)
mdb.models['Model-1'].boundaryConditions['BC-1'].setValues(localCsys=
    mdb.models['Model-1'].rootAssembly.datums[1])
mdb.models['Model-1'].rootAssembly.DatumPlaneByPrincipalPlane(offset=0.0, 
    principalPlane=XYPLANE)
mdb.models['Model-1'].rootAssembly.DatumAxisByPrincipalAxis(principalAxis=
    ZAXIS)
mdb.models['Model-1'].rootAssembly.DatumAxisByPrincipalAxis(principalAxis=
    ZAXIS)
mdb.models['Model-1'].rootAssembly.DatumAxisByPrincipalAxis(principalAxis=
    XAXIS)
mdb.models['Model-1'].rootAssembly.DatumAxisByPrincipalAxis(principalAxis=
    XAXIS)
mdb.models['Model-1'].rootAssembly.DatumAxisByPrincipalAxis(principalAxis=
    XAXIS)
mdb.models['Model-1'].rootAssembly.deleteFeatures(('Datum csys-1', 
    'Datum plane-1', 'Datum axis-1', 'Datum axis-2', 'Datum axis-3', 
    'Datum axis-4', 'Datum axis-5'))
mdb.models['Model-1'].boundaryConditions['BC-3'].setValues(typeName=ZSYMM)
mdb.models['Model-1'].rootAssembly.DatumCsysByThreePoints(coordSysType=
    CARTESIAN, name='Datum csys-1', origin=(0.0, 0.0, 0.0), point1=
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].vertices[17], 
    point2=
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].edges[12], MIDDLE))
del mdb.models['Model-1'].rootAssembly.features['Datum csys-1']
mdb.models['Model-1'].rootAssembly.DatumCsysByThreePoints(coordSysType=
    CARTESIAN, line1=(1.0, 0.0, 0.0), line2=(0.0, 1.0, 0.0), name=
    'Datum csys-1', origin=(0.0, 0.0, 0.0))
mdb.models['Model-1'].boundaryConditions['BC-1'].setValues(localCsys=
    mdb.models['Model-1'].rootAssembly.datums[43])
mdb.models['Model-1'].boundaryConditions['BC-1'].setValues(localCsys=None)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['BOLT'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].parts['BOLT'].cells.getSequenceFromMask(('[#3 ]', ), 
    ), point1=mdb.models['Model-1'].parts['BOLT'].InterestingPoint(
    mdb.models['Model-1'].parts['BOLT'].edges[32], MIDDLE), point2=
    mdb.models['Model-1'].parts['BOLT'].InterestingPoint(
    mdb.models['Model-1'].parts['BOLT'].edges[12], MIDDLE), point3=
    mdb.models['Model-1'].parts['BOLT'].InterestingPoint(
    mdb.models['Model-1'].parts['BOLT'].edges[29], MIDDLE))
#* Feature creation failed.
mdb.models['Model-1'].parts['BOLT'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].parts['BOLT'].cells.getSequenceFromMask(('[#3 ]', ), 
    ), point1=mdb.models['Model-1'].parts['BOLT'].InterestingPoint(
    mdb.models['Model-1'].parts['BOLT'].edges[10], MIDDLE), point2=
    mdb.models['Model-1'].parts['BOLT'].InterestingPoint(
    mdb.models['Model-1'].parts['BOLT'].edges[29], MIDDLE), point3=
    mdb.models['Model-1'].parts['BOLT'].InterestingPoint(
    mdb.models['Model-1'].parts['BOLT'].edges[32], MIDDLE))
mdb.models['Model-1'].parts['FLANGE'].DatumAxisByPrincipalAxis(principalAxis=
    YAXIS)
mdb.models['Model-1'].parts['FLANGE'].DatumPointByCoordinate(coords=(0.0, 0.0, 
    0.0))
mdb.models['Model-1'].parts['FLANGE'].DatumAxisByTwoPoint(point1=
    mdb.models['Model-1'].parts['FLANGE'].vertices[24], point2=
    mdb.models['Model-1'].parts['FLANGE'].vertices[15])
del mdb.models['Model-1'].parts['FLANGE'].features['Datum axis-2']
mdb.models['Model-1'].parts['FLANGE'].DatumAxisByTwoPoint(point1=
    mdb.models['Model-1'].parts['FLANGE'].vertices[32], point2=
    mdb.models['Model-1'].parts['FLANGE'].vertices[16])
del mdb.models['Model-1'].parts['FLANGE'].features['Datum axis-2']
mdb.models['Model-1'].parts['FLANGE'].DatumAxisByTwoPoint(point1=
    mdb.models['Model-1'].parts['FLANGE'].vertices[32], point2=
    mdb.models['Model-1'].parts['FLANGE'].datums[10])
mdb.models['Model-1'].parts['FLANGE'].DatumPlaneByLinePoint(line=
    mdb.models['Model-1'].parts['FLANGE'].datums[13], point=
    mdb.models['Model-1'].parts['FLANGE'].vertices[29])
del mdb.models['Model-1'].parts['FLANGE'].features['Datum plane-1']
mdb.models['Model-1'].parts['FLANGE'].DatumCsysByTwoLines(CARTESIAN, line1=
    mdb.models['Model-1'].parts['FLANGE'].datums[13], line2=
    mdb.models['Model-1'].parts['FLANGE'].datums[9], name='Datum csys-1')
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].boundaryConditions['BC-1'].setValues(localCsys=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].datums[15])
del mdb.models['Model-1'].boundaryConditions['BC-1']
del mdb.models['Model-1'].boundaryConditions['BC-2']
del mdb.models['Model-1'].boundaryConditions['BC-3']
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ), size=10.0)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ), size=7.1)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ), size=7.0)
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.05, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ), size=7.0)
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.05, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ), size=7.1)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.05, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ), size=6.5)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    mask=('[#2120000 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].faces.getSequenceFromMask(
    mask=('[#c0012514 ]', ), ), name='Set-4')
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    mask=('[#2120000 #2 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].faces.getSequenceFromMask(
    mask=('[#c0012514 ]', ), ), name='Set-4')
mdb.models['Model-1'].rootAssembly.Set(name='Set-5', nodes=
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#e000c #f0f #0 #3ffc000 ]', ), ))
mdb.models['Model-1'].rootAssembly.sets.changeKey(fromName='Set-5', toName=
    'gaskets1')
mdb.models['Model-1'].rootAssembly.sets.changeKey(fromName='Set-4', toName=
    'flgbolts')
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].edges.getSequenceFromMask(
    ('[#8000 ]', ), ), name='gaskets2')
mdb.models['Model-1'].rootAssembly.Set(name='gaskettop', nodes=
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#c7c00090 #31800000 #3f000 #0 #3f ]', ), ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ), 
    size=1.0)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ), 
    size=5.0)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ))
mdb.models['Model-1'].rootAssembly.Set(name='gaskets1', nodes=
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#0 #f0f #0 #3ffc000 ]', ), ))
mdb.models['Model-1'].rootAssembly.Set(name='gaskettop', nodes=
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#c7c00090 #31800000 #3f000 #0 #3f ]', ), ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].YsymmBC(createStepName='Step-1', localCsys=None, name=
    'BC-1', region=mdb.models['Model-1'].rootAssembly.sets['gaskettop'])
mdb.models['Model-1'].ZsymmBC(createStepName='Step-1', localCsys=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].datums[15], name=
    'BC-2', region=mdb.models['Model-1'].rootAssembly.sets['gaskets2'])
mdb.models['Model-1'].ZsymmBC(createStepName='Step-1', localCsys=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].datums[15], name=
    'BC-3', region=mdb.models['Model-1'].rootAssembly.sets['gaskets1'])
mdb.models['Model-1'].ZsymmBC(createStepName='Step-1', localCsys=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].datums[15], name=
    'BC-4', region=mdb.models['Model-1'].rootAssembly.sets['flgbolts'])
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].faces.getSequenceFromMask(
    ('[#4400000 ]', ), ), name='bolttop')
del mdb.models['Model-1'].rootAssembly.sets['bolttop']
mdb.models['Model-1'].rootAssembly.Set(name='bolttop', nodes=
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].nodes.getSequenceFromMask(
    mask=('[#400 #0:2 #778000 #7c #0:10 #fc000000 #fbf ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].nodes.getSequenceFromMask(
    mask=('[#0:36 #100001 ]', ), ))
mdb.models['Model-1'].YsymmBC(createStepName='Step-1', localCsys=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].datums[15], name=
    'BC-5', region=mdb.models['Model-1'].rootAssembly.sets['bolttop'])
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    mask=('[#240000 #4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces.getSequenceFromMask(
    mask=('[#400 ]', ), ), name='flangeglobal')
mdb.models['Model-1'].ZsymmBC(createStepName='Step-1', localCsys=None, name=
    'BC-6', region=mdb.models['Model-1'].rootAssembly.sets['flangeglobal'])
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#3f ]', ), ))
mdb.models['Model-1'].rootAssembly.PartitionCellByExtendFace(cells=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#24 ]', ), ), extendFace=
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].faces[28])
mdb.models['Model-1'].rootAssembly.PartitionCellByExtendFace(cells=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#21 ]', ), ), extendFace=
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].faces[23])
#* Feature creation failed.
mdb.models['Model-1'].rootAssembly.PartitionCellByExtendFace(cells=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#21 ]', ), ), extendFace=
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].faces[23])
#* Feature creation failed.
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)), regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#1fb ]', ), ), ))
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.05, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ), size=5.0)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#1fb ]', ), ))
mdb.models['Model-1'].rootAssembly.setMeshControls(regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#1fb ]', ), ), sizeGrowthRate=1.28)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.05, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ), size=4.0)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#127 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.05, edges=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].edges.getSequenceFromMask(
    ('[#c8 #80000000 ]', ), ), minSizeFactor=0.1, size=2.0)
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], 
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1']))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.05, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], 
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1']), size=5.5)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#127 ]', ), ))
mdb.models['Model-1'].rootAssembly.deleteSeeds(regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].edges.getSequenceFromMask(
    ('[#c8 #c2000000 #1 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.05, edges=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].edges.getSequenceFromMask(
    ('[#40003ee #c0000000 #221 ]', ), ), minSizeFactor=0.1, size=2.0)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#127 ]', ), ))
mdb.models['Model-1'].rootAssembly.deleteSeeds(regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].edges.getSequenceFromMask(
    ('[#222 ]', ), ))
mdb.models['Model-1'].rootAssembly.deleteSeeds(regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].edges.getSequenceFromMask(
    ('[#c8 ]', ), ))
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-1'].rootAssembly.deleteSeeds(regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].edges.getSequenceFromMask(
    ('[#4000000 #80000000 #220 ]', ), ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-1'].rootAssembly.deleteSeeds(regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].edges.getSequenceFromMask(
    ('[#104 #40000000 #1 ]', ), ))
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.05, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ), size=5.0)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.05, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ), size=4.5)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.generateMesh(boundaryPreview=ON, regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.05, 
    minSizeFactor=0.01, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ), size=4.5)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.generateMesh(boundaryPreview=ON, regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ), size=7.1)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ), 
    size=1.0)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.Set(name='bolttop', nodes=
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].nodes.getSequenceFromMask(
    mask=('[#400 #0:2 #f007f #0:8 #7df8 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].nodes.getSequenceFromMask(
    mask=('[#0:76 #4 ]', ), ))
mdb.models['Model-1'].rootAssembly.Set(name='gaskets1', nodes=
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#c #ffffc000 #3 #0 #f0f0000 #0:24 #fffc0000', ' #ffffffff:2 #3f ]', 
    ), )+\
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].nodes.getSequenceFromMask(
    mask=('[#0:12 #800000 ]', ), ))
mdb.models['Model-1'].rootAssembly.Set(name='gaskettop', nodes=
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#90 #0 #ffffc000 #7fff #fff0 #0 #fff8000', 
    ' #3ffe0000 #0:8 #fffffffc #ffffffff:6 #3fffffff #0:16 #ff800000', 
    ' #ffffffff:8 #ff ]', ), ))
mdb.models['Model-1'].rootAssembly.Set(name='bolttop', nodes=
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].nodes.getSequenceFromMask(
    mask=('[#400 #0:2 #f007f #0:8 #7ff8 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].nodes.getSequenceFromMask(
    mask=('[#0:76 #4 ]', ), ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].materials['BOLT AND NUT'].setValues(description=
    'units in mpa')
mdb.models['Model-1'].boundaryConditions['BC-3'].setValues(typeName=ENCASTRE)
mdb.models['Model-1'].boundaryConditions['BC-3'].setValues(typeName=ZSYMM)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ContactProperty('IntProp-1')
mdb.models['Model-1'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['Model-1'].interactionProperties['IntProp-1'].TangentialBehavior(
    formulation=ROUGH)
mdb.models['Model-1'].rootAssembly.Surface(name='CP-1-FLANGE-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    ('[#40000 #400 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-1-SPRIALWOUND GASKET-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces.getSequenceFromMask(
    ('[#84 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-2-BOLT-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].faces.getSequenceFromMask(
    ('[#20100000 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-2-FLANGE-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    ('[#400380 #2000 ]', ), ))
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    createStepName='Initial', enforcement=SURFACE_TO_SURFACE, 
    interactionProperty='IntProp-1', master=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-1-FLANGE-1'], name=
    'CP-1-FLANGE-1-SPRIALWOUND GASKET-1', slave=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-1-SPRIALWOUND GASKET-1'], 
    sliding=FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    createStepName='Initial', enforcement=SURFACE_TO_SURFACE, 
    interactionProperty='IntProp-1', master=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-2-BOLT-1'], name=
    'CP-2-BOLT-1-FLANGE-1', slave=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-2-FLANGE-1'], sliding=
    FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].interactions['CP-1-FLANGE-1-SPRIALWOUND GASKET-1'].setValues(
    adjustMethod=NONE, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    thickness=ON)
mdb.models['Model-1'].interactions['CP-2-BOLT-1-FLANGE-1'].setValues(
    adjustMethod=NONE, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    thickness=ON)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(name='Model-RTJ', objectToCopy=mdb.models['Model-1'])
mdb.models.changeKey(fromName='Model-1', toName='Model-RF')
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Solid revolve-1'].sketch)
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Solid revolve-1'])
mdb.models['Model-RTJ'].sketches['__edit__'].offset(distance=19.0, objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[9], ), side=LEFT)
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].dimensions[1], ))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[9], ))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[8], ))
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[10], point1=(
    200.201965332031, -9.64558792114258))
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(146.0, -2.25), 
    point2=(209.5, -2.25))
mdb.models['Model-RTJ'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[15])
mdb.models['Model-RTJ'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[7], entity2=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[15])
mdb.models['Model-RTJ'].sketches['__edit__'].undo()
mdb.models['Model-RTJ'].sketches['__edit__'].undo()
mdb.models['Model-RTJ'].sketches['__edit__'].undo()
mdb.models['Model-RTJ'].sketches['__edit__'].undo()
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[10], point1=(
    200.824584960938, -8.60522842407227))
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[8], point1=(
    163.675811767578, -2.36308670043945))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].dimensions[4], ))
mdb.models['Model-RTJ'].sketches['__edit__'].offset(distance=5.95, objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[9], ), side=LEFT)
mdb.models['Model-RTJ'].sketches['__edit__'].offset(distance=5.95, objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[9], ), side=RIGHT)
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(146.0, -2.25), 
    point2=(209.5, -2.25))
mdb.models['Model-RTJ'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[17])
mdb.models['Model-RTJ'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[7], entity2=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[17])
mdb.models['Model-RTJ'].sketches['__edit__'].offset(distance=7.92, objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[17], ), side=RIGHT)
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(184.55, -8.25), 
    point2=(184.55, -15.0))
mdb.models['Model-RTJ'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[19])
mdb.models['Model-RTJ'].sketches['__edit__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[16], 
    entity2=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[19])
mdb.models['Model-RTJ'].sketches['__edit__'].offset(distance=7.92, objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[19], ), side=LEFT)
mdb.models['Model-RTJ'].sketches['__edit__'].undo()
mdb.models['Model-RTJ'].sketches['__edit__'].offset(distance=5.95, objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[19], ), side=LEFT)
mdb.models['Model-RTJ'].sketches['__edit__'].offset(distance=5.95, objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[20], ), side=LEFT)
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(184.55, -2.25), 
    point2=(184.55, -27.5))
mdb.models['Model-RTJ'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[22])
mdb.models['Model-RTJ'].sketches['__edit__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[16], 
    entity2=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[22])
mdb.models['Model-RTJ'].sketches['__edit__'].copyRotate(angle=23.0, 
    centerPoint=(184.55, -2.25), objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[22], ))
mdb.models['Model-RTJ'].sketches['__edit__'].copyMirror(mirrorLine=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[9], objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[23], ))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[22], ))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].constraints[36], ))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[19], ))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[21], ))
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[24], point1=(
    188.995086669922, -20.4652900695801))
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[23], point1=(
    193.560852050781, -21.7137184143066))
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[26], point1=(
    187.957397460938, -12.3505058288574))
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[20], point1=(
    190.447814941406, -12.3505058288574))
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[25], point1=(
    191.277969360352, -12.7666511535645))
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[18], point1=(
    200.201965332031, -9.8536491394043))
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[30], point1=(
    177.373123168945, -10.2697944641113))
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[16], point1=(
    184.429321289063, -8.81329727172852))
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[15], point1=(
    196.673858642578, -6.31644058227539))
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[9], point1=(
    191.693023681641, -5.06801223754883))
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[28], point1=(
    190.240295410156, -8.18908309936523))
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[32], point1=(
    190.655364990234, -7.98100662231445))
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[17], point1=(
    191.277969360352, -2.36308670043945))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[33], ))
mdb.models['Model-RTJ'].sketches['__edit__'].FilletByRadius(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[27], curve2=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[31], nearPoint1=(
    186.621063232422, -7.56326675415039), nearPoint2=(189.627670288086, 
    -10.0034828186035), radius=0.8)
mdb.models['Model-RTJ'].sketches['__edit__'].FilletByRadius(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[29], curve2=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[31], nearPoint1=(
    194.638702392578, -7.9938850402832), nearPoint2=(191.632080078125, 
    -9.85993576049805), radius=0.8)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].ConstrainedSketch(name='RTJFLG', objectToCopy=
    mdb.models['Model-RTJ'].sketches['__edit__'])
mdb.models['Model-RTJ'].parts['FLANGE'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Model-RTJ'].sketches['__edit__'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].parts['FLANGE'].regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-RTJ'].parts['FLANGE'].backup()
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Cut extrude-1'].sketch)
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Cut extrude-1'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].parts['FLANGE'].regenerate()
mdb.models['Model-RTJ'].parts['FLANGE'].regenerate()
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Cut extrude-1'].sketch)
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Cut extrude-1'])
mdb.models['Model-RTJ'].ConstrainedSketch(name='HOLERTJ', objectToCopy=
    mdb.models['Model-RTJ'].sketches['__edit__'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Cut extrude-1'].sketch)
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Cut extrude-1'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].parts['FLANGE'].regenerate()
mdb.models['Model-RTJ'].parts['FLANGE'].regenerate()
mdb.models['Model-RTJ'].parts['FLANGE'].features['Cut extrude-1'].setValues(
    flipExtrudeDirection=True)
mdb.models['Model-RTJ'].parts['FLANGE'].regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-RTJ'].parts['FLANGE'].regenerate()
mdb.models['Model-RTJ'].parts['FLANGE'].features['Cut extrude-1'].setValues(
    flipExtrudeDirection=False)
mdb.models['Model-RTJ'].parts['FLANGE'].regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-RTJ'].parts['FLANGE'].regenerate()
mdb.models['Model-RTJ'].parts['FLANGE'].deleteFeatures(('Partition cell-3', 
    'Partition cell-4', 'Partition cell-5'))
mdb.models['Model-RTJ'].parts['FLANGE'].deleteFeatures(('Datum axis-2', 
    'Datum csys-1'))
del mdb.models['Model-RTJ'].parts['FLANGE'].features['Partition cell-1']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Cut extrude-1'].sketch)
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Cut extrude-1'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].parts['FLANGE'].regenerate()
del mdb.models['Model-RTJ'].parts['FLANGE'].features['Cut extrude-1']
mdb.models['Model-RTJ'].rootAssembly.regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-RTJ'].ConstrainedSketch(gridSpacing=16.04, name='__profile__'
    , sheetSize=641.82, transform=
    mdb.models['Model-RTJ'].parts['FLANGE'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-RTJ'].parts['FLANGE'].faces[17], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-RTJ'].parts['FLANGE'].edges[46], 
    sketchOrientation=RIGHT, origin=(259.135677, -87.65, 20.39442)))
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__profile__'])
mdb.models['Model-RTJ'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['Model-RTJ'].sketches['HOLERTJ'])
mdb.models['Model-RTJ'].parts['FLANGE'].CutExtrude(flipExtrudeDirection=OFF, 
    sketch=mdb.models['Model-RTJ'].sketches['__profile__'], sketchOrientation=
    RIGHT, sketchPlane=mdb.models['Model-RTJ'].parts['FLANGE'].faces[17], 
    sketchPlaneSide=SIDE1, sketchUpEdge=
    mdb.models['Model-RTJ'].parts['FLANGE'].edges[46])
del mdb.models['Model-RTJ'].sketches['__profile__']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Solid revolve-1'].sketch)
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Solid revolve-1'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Cut extrude-1'].sketch)
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Cut extrude-1'])
del mdb.models['Model-RTJ'].sketches['__edit__']
del mdb.models['Model-RTJ'].parts['FLANGE'].features['Cut extrude-1']
mdb.models['Model-RTJ'].ConstrainedSketch(gridSpacing=16.04, name='__profile__'
    , sheetSize=641.82, transform=
    mdb.models['Model-RTJ'].parts['FLANGE'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-RTJ'].parts['FLANGE'].faces[17], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-RTJ'].parts['FLANGE'].edges[15], 
    sketchOrientation=RIGHT, origin=(259.135677, -87.65, 20.39442)))
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__profile__'])
mdb.models['Model-RTJ'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['Model-RTJ'].sketches['HOLERTJ'])
mdb.models['Model-RTJ'].sketches['__profile__'].CircleByCenterPerimeter(center=
    (20.39442, -259.135677), point1=(19.7638940706998, 15.5759160055638))
mdb.models['Model-RTJ'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].vertices[11], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[2])
del mdb.models['Model-RTJ'].sketches['__profile__']
mdb.models['Model-RTJ'].ConstrainedSketch(gridSpacing=15.44, name='__profile__'
    , sheetSize=617.63, transform=
    mdb.models['Model-RTJ'].parts['FLANGE'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-RTJ'].parts['FLANGE'].faces[15], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-RTJ'].parts['FLANGE'].edges[42], 
    sketchOrientation=RIGHT, origin=(259.135677, -8.25, 20.39442)))
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__profile__'])
mdb.models['Model-RTJ'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['Model-RTJ'].sketches['HOLERTJ'])
del mdb.models['Model-RTJ'].sketches['__profile__']
mdb.models['Model-RTJ'].parts['FLANGE'].DatumAxisByTwoPoint(point1=
    mdb.models['Model-RTJ'].parts['FLANGE'].datums[10], point2=
    mdb.models['Model-RTJ'].parts['FLANGE'].vertices[17])
mdb.models['Model-RTJ'].ConstrainedSketch(gridSpacing=16.04, name='__profile__'
    , sheetSize=641.82, transform=
    mdb.models['Model-RTJ'].parts['FLANGE'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-RTJ'].parts['FLANGE'].faces[17], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-RTJ'].parts['FLANGE'].edges[46], 
    sketchOrientation=RIGHT, origin=(259.135677, -87.65, 20.39442)))
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__profile__'])
mdb.models['Model-RTJ'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['Model-RTJ'].sketches['HOLERTJ'])
del mdb.models['Model-RTJ'].sketches['__profile__']
mdb.models['Model-RTJ'].ConstrainedSketch(gridSpacing=16.04, name='__profile__'
    , sheetSize=641.82, transform=
    mdb.models['Model-RTJ'].parts['FLANGE'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-RTJ'].parts['FLANGE'].faces[17], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-RTJ'].parts['FLANGE'].edges[15], 
    sketchOrientation=RIGHT, origin=(259.135677, -87.65, 20.39442)))
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__profile__'])
mdb.models['Model-RTJ'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['Model-RTJ'].sketches['HOLERTJ'])
del mdb.models['Model-RTJ'].sketches['__profile__']
mdb.models['Model-RTJ'].ConstrainedSketch(gridSpacing=16.04, name='__profile__'
    , sheetSize=641.82, transform=
    mdb.models['Model-RTJ'].parts['FLANGE'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-RTJ'].parts['FLANGE'].faces[17], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-RTJ'].parts['FLANGE'].edges[15], 
    sketchOrientation=RIGHT, origin=(259.135677, -87.65, 20.39442)))
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__profile__'])
del mdb.models['Model-RTJ'].sketches['__profile__']
mdb.models['Model-RTJ'].ConstrainedSketch(gridSpacing=16.04, name='__profile__'
    , sheetSize=641.82, transform=
    mdb.models['Model-RTJ'].parts['FLANGE'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-RTJ'].parts['FLANGE'].faces[17], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-RTJ'].parts['FLANGE'].edges[46], 
    sketchOrientation=RIGHT, origin=(259.135677, -87.65, 20.39442)))
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__profile__'])
mdb.models['Model-RTJ'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['Model-RTJ'].sketches['HOLERTJ'])
mdb.models['Model-RTJ'].sketches['__profile__'].CircleByCenterPerimeter(center=
    (20.3944201571328, 259.135676987633), point1=(19.7638940706998, 
    15.5759160055638))
mdb.models['Model-RTJ'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].vertices[11], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[2])
del mdb.models['Model-RTJ'].sketches['__profile__']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].sketches['hbolt'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].sketches['BOLT12HOLE900'])
mdb.models['Model-RTJ'].sketches['__edit__'].Arc3Points(point1=(-143.697372, 
    123.002628), point2=(-33.7596987864026, -92.7622043997985), point3=(
    123.002628, -143.697372))
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(-124.697372, 
    123.002628), point2=(283.152627999947, 123.002627999999))
mdb.models['Model-RTJ'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[11])
mdb.models['Model-RTJ'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[8], entity2=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[11])
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(126.602628, 
    -85.497372), point2=(126.602628, 172.052628000017))
mdb.models['Model-RTJ'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[12])
mdb.models['Model-RTJ'].sketches['__edit__'].undo()
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(123.002628, 
    -124.697372), point2=(123.002628, 156.902627999947))
mdb.models['Model-RTJ'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[12])
mdb.models['Model-RTJ'].sketches['__edit__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[2], 
    entity2=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[12])
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[12], point1=(
    122.914733886719, 146.088745117188))
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[11], point1=(
    146.493713378906, 128.122406005859))
mdb.models['Model-RTJ'].sketches['__edit__'].move(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[2], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[3], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[4], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[5], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[6], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[7], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[8], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[9], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[10], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[13], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[14]), vector=(
    -142.85, -142.85))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[13], ))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[14], ))
mdb.models['Model-RTJ'].sketches.changeKey(fromName='__edit__', toName=
    'BOLT12HOLE900')
mdb.models['Model-RTJ'].ConstrainedSketch(gridSpacing=16.04, name='__profile__'
    , sheetSize=641.82, transform=
    mdb.models['Model-RTJ'].parts['FLANGE'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-RTJ'].parts['FLANGE'].faces[17], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-RTJ'].parts['FLANGE'].edges[15], 
    sketchOrientation=RIGHT, origin=(259.135677, -87.65, 20.39442)))
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__profile__'])
del mdb.models['Model-RTJ'].sketches['__profile__']
mdb.models['Model-RTJ'].ConstrainedSketch(gridSpacing=16.04, name='__profile__'
    , sheetSize=641.82, transform=
    mdb.models['Model-RTJ'].parts['FLANGE'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-RTJ'].parts['FLANGE'].faces[17], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-RTJ'].parts['FLANGE'].edges[46], 
    sketchOrientation=RIGHT, origin=(259.135677, -87.65, 20.39442)))
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__profile__'])
mdb.models['Model-RTJ'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['Model-RTJ'].sketches['BOLT12HOLE900'])
mdb.models['Model-RTJ'].sketches['__profile__'].Line(point1=(-267.547372, 
    -19.8473720000004), point2=(116.29, -19.8473720000003))
mdb.models['Model-RTJ'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[25])
mdb.models['Model-RTJ'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[22], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[25])
mdb.models['Model-RTJ'].sketches['__profile__'].Line(point1=(-19.847372, 
    -267.547372), point2=(-19.847372, 168.42))
mdb.models['Model-RTJ'].sketches['__profile__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[26])
mdb.models['Model-RTJ'].sketches['__profile__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[16], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[26])
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[26], point1=(
    -26.0784454929644, 136.075341867796))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[27], point1=(
    -20.8481012980112, -4.19696085984236))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[25], point1=(
    92.9111654642592, -21.2393947041506))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[29], point1=(
    13.1488462690592, -15.9955680893942))
mdb.models['Model-RTJ'].sketches['__profile__'].move(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[13], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[16], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[17], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[18], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[19], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[20], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[21], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[24], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[28], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[22], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[23], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[24], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[30]), vector=(
    40.2417921571328, 278.983048987634))
mdb.models['Model-RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[18], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[19], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[20], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[21], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[22], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[23], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[24], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[30]))
mdb.models['Model-RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[28], ))
mdb.models['Model-RTJ'].parts['FLANGE'].CutExtrude(flipExtrudeDirection=OFF, 
    sketch=mdb.models['Model-RTJ'].sketches['__profile__'], sketchOrientation=
    RIGHT, sketchPlane=mdb.models['Model-RTJ'].parts['FLANGE'].faces[17], 
    sketchPlaneSide=SIDE1, sketchUpEdge=
    mdb.models['Model-RTJ'].parts['FLANGE'].edges[46])
del mdb.models['Model-RTJ'].sketches['__profile__']
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].parts['FLANGE'].regenerate()
mdb.models['Model-RTJ'].parts['FLANGE'].regenerate()
mdb.models['Model-RTJ'].rootAssembly.regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-RTJ'].rootAssembly.regenerate()
mdb.models['Model-RTJ'].rootAssembly.features['SPRIALWOUND GASKET-1'].suppress(
    )
#* FeatureError: Regeneration failed
del mdb.models['Model-RTJ'].rootAssembly.features['SPRIALWOUND GASKET-1']
mdb.models['Model-RTJ'].rootAssembly.regenerate()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Model-RTJ'].steps['Step-1']
del mdb.models['Model-RTJ'].interactions['CP-1-FLANGE-1-SPRIALWOUND GASKET-1']
del mdb.models['Model-RTJ'].interactions['CP-2-BOLT-1-FLANGE-1']
del mdb.models['Model-RTJ'].rootAssembly.surfaces['CP-1-SPRIALWOUND GASKET-1']
mdb.models['Model-RTJ'].rootAssembly.deleteSurfaces(surfaceNames=(
    'CP-1-FLANGE-1', 'CP-2-BOLT-1', 'CP-2-FLANGE-1'))
del mdb.models['Model-RTJ'].rootAssembly.features['Partition cell-1']
del mdb.models['Model-RTJ'].rootAssembly.features['Datum csys-1']
del mdb.models['Model-RTJ'].rootAssembly.sets['gaskettop']
del mdb.models['Model-RTJ'].rootAssembly.sets['gaskets1']
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Cut extrude-1'].sketch)
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Cut extrude-1'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Solid revolve-1'].sketch)
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Solid revolve-1'])
mdb.models['Model-RTJ'].ConstrainedSketch(name='FLGRTJ', objectToCopy=
    mdb.models['Model-RTJ'].sketches['__edit__'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-RTJ'].sketches['__profile__'].ConstructionLine(point1=(0.0, 
    -100.0), point2=(0.0, 100.0))
mdb.models['Model-RTJ'].sketches['__profile__'].FixedConstraint(entity=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[2])
mdb.models['Model-RTJ'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['Model-RTJ'].sketches['FLGRTJ'])
mdb.models['Model-RTJ'].sketches['__profile__'].Line(point1=(191.25, 0.0), 
    point2=(185.0, 0.0))
mdb.models['Model-RTJ'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[20])
mdb.models['Model-RTJ'].sketches['__profile__'].Line(point1=(184.55, -2.25), 
    point2=(196.45, -2.25))
mdb.models['Model-RTJ'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[21])
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[21], point1=(
    187.647171020508, -2.31772804260254))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[20], point1=(
    187.738464355469, -0.581670761108398))
mdb.models['Model-RTJ'].sketches['__profile__'].Line(point1=(184.55, -2.25), 
    point2=(196.45, -2.25))
mdb.models['Model-RTJ'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[22])
mdb.models['Model-RTJ'].sketches['__profile__'].Line(point1=(184.55, -2.25), 
    point2=(184.55, 1.98391819000244))
mdb.models['Model-RTJ'].sketches['__profile__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[23])
mdb.models['Model-RTJ'].sketches['__profile__'].offset(distance=11.9, 
    objectList=(mdb.models['Model-RTJ'].sketches['__profile__'].geometry[23], )
    , side=RIGHT)
mdb.models['Model-RTJ'].sketches['__profile__'].Line(point1=(184.55, 
    1.98391819000244), point2=(196.45, -2.25))
mdb.models['Model-RTJ'].sketches['__profile__'].Line(point1=(196.45, 
    1.98391819000244), point2=(184.55, -2.25))
mdb.models['Model-RTJ'].sketches['__profile__'].Line(point1=(190.5, 
    -0.13304090499878), point2=(190.5, -12.5))
mdb.models['Model-RTJ'].sketches['__profile__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[27])
mdb.models['Model-RTJ'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].vertices[24], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[26])
mdb.models['Model-RTJ'].sketches['__profile__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].vertices[23], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].vertices[9], midpoint=
    mdb.models['Model-RTJ'].sketches['__profile__'].vertices[24])
mdb.models['Model-RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[26], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[25]))
mdb.models['Model-RTJ'].sketches['__profile__'].Line(point1=(184.55, 
    1.98391819000244), point2=(190.5, -12.5))
mdb.models['Model-RTJ'].sketches['__profile__'].undo()
mdb.models['Model-RTJ'].sketches['__profile__'].Line(point1=(190.5, 
    -0.13304090499878), point2=(190.5, 3.75))
mdb.models['Model-RTJ'].sketches['__profile__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[28])
mdb.models['Model-RTJ'].sketches['__profile__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[27], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[28])
mdb.models['Model-RTJ'].sketches['__profile__'].Line(point1=(190.5, 3.75), 
    point2=(193.75, 0.0))
mdb.models['Model-RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[29], ))
mdb.models['Model-RTJ'].sketches['__profile__'].offset(distance=5.565, 
    objectList=(mdb.models['Model-RTJ'].sketches['__profile__'].geometry[27], )
    , side=RIGHT)
mdb.models['Model-RTJ'].sketches['__profile__'].offset(distance=5.565, 
    objectList=(mdb.models['Model-RTJ'].sketches['__profile__'].geometry[27], )
    , side=LEFT)
mdb.models['Model-RTJ'].sketches['__profile__'].offset(distance=8.765, 
    objectList=(mdb.models['Model-RTJ'].sketches['__profile__'].geometry[15], )
    , side=LEFT)
mdb.models['Model-RTJ'].sketches['__profile__'].Line(point1=(188.441348754046, 
    -1.405), point2=(180.689422607422, -1.405))
mdb.models['Model-RTJ'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[33])
mdb.models['Model-RTJ'].sketches['__profile__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[32], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[33])
mdb.models['Model-RTJ'].sketches['__profile__'].Line(point1=(192.558651245954, 
    -1.405), point2=(201.054641723633, -1.405))
mdb.models['Model-RTJ'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[34])
mdb.models['Model-RTJ'].sketches['__profile__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[32], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[34])
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[33], point1=(
    185.780715942383, -1.32077980041504))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[32], point1=(
    189.747207641602, -1.32077980041504))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[36], point1=(
    191.641647338867, -1.14302253723145))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[34], point1=(
    194.009689331055, -1.43928527832031))
mdb.models['Model-RTJ'].sketches['__profile__'].Line(point1=(184.935, -1.405), 
    point2=(196.065, -1.405))
mdb.models['Model-RTJ'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[38])
mdb.models['Model-RTJ'].sketches['__profile__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[35], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[38])
mdb.models['Model-RTJ'].sketches['__profile__'].CircleByCenterPerimeter(center=
    (190.5, -1.405), point1=(196.065, -1.405))
mdb.models['Model-RTJ'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].vertices[41], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[27])
mdb.models['Model-RTJ'].sketches['__profile__'].move(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[39], ), vector=(
    0.0, -3.2))
mdb.models['Model-RTJ'].sketches['__profile__'].undo()
mdb.models['Model-RTJ'].sketches['__profile__'].move(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[39], ), vector=(
    0.0, -3.2))
mdb.models['Model-RTJ'].sketches['__profile__'].undo()
mdb.models['Model-RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].constraints[94], ))
mdb.models['Model-RTJ'].sketches['__profile__'].copyMove(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[39], ), vector=(
    0.0, -3.2))
mdb.models['Model-RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[39], ))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[30], point1=(
    184.805633544922, -8.65498638153076))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[31], point1=(
    196.135604858398, -8.35499286651611))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[40], point1=(
    196.015716552734, -4.18507862091064))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[43], point1=(
    195.686004638672, -2.98510265350342))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[44], point1=(
    195.236404418945, -1.90512466430664))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[45], point1=(
    194.217300415039, -0.225159645080566))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[46], point1=(
    188.672210693359, 0.614822387695313))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[47], point1=(
    185.674865722656, -1.78512763977051))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[48], point1=(
    185.40510559082, -2.86510562896729))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[49], point1=(
    184.989471435547, -3.80223989486694))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[35], point1=(
    182.088394165039, -1.41743803024292))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[41], point1=(
    184.907516479492, -0.943224430084229))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[37], point1=(
    197.794952392578, -1.37001657485962))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[42], point1=(
    196.018203735352, -0.658697605133057))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[53], point1=(
    196.190567016602, -1.46625709533691))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[51], point1=(
    184.781692504883, -1.39438879489899))
mdb.models['Model-RTJ'].sketches['__profile__'].copyMove(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[52], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[50], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[54], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[38]), vector=(0.0, 
    5.565))
mdb.models['Model-RTJ'].sketches['__profile__'].undo()
mdb.models['Model-RTJ'].sketches['__profile__'].copyMove(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[50], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[52], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[54], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[38]), vector=(0.0, 
    1.44799683915788))
mdb.models['Model-RTJ'].sketches['__profile__'].undo()
mdb.models['Model-RTJ'].sketches['__profile__'].TangentConstraint(entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[50], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[13])
mdb.models['Model-RTJ'].sketches['__profile__'].undo()
mdb.models['Model-RTJ'].sketches['__profile__'].TangentConstraint(entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[13], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[50])
mdb.models['Model-RTJ'].sketches['__profile__'].undo()
mdb.models['Model-RTJ'].sketches['__profile__'].copyMove(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[50], ), vector=(
    0.0, 7.92))
mdb.models['Model-RTJ'].sketches['__profile__'].TangentConstraint(entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[55], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[13])
mdb.models['Model-RTJ'].sketches['__profile__'].undo()
mdb.models['Model-RTJ'].sketches['__profile__'].TangentConstraint(entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[13], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[55])
mdb.models['Model-RTJ'].sketches['__profile__'].undo()
mdb.models['Model-RTJ'].sketches['__profile__'].move(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[55], ), vector=(
    0.0, -2.355))
mdb.models['Model-RTJ'].sketches['__profile__'].move(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[55], ), vector=(
    0.0, -2.355))
mdb.models['Model-RTJ'].sketches['__profile__'].TangentConstraint(entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[14], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[55])
mdb.models['Model-RTJ'].sketches['__profile__'].undo()
mdb.models['Model-RTJ'].sketches['__profile__'].copyMove(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[55], ), vector=(
    0.0, -0.855))
mdb.models['Model-RTJ'].sketches['__profile__'].TangentConstraint(entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[56], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[13])
mdb.models['Model-RTJ'].sketches['__profile__'].move(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[52], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[54], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[38]), vector=(0.0, 
    2.355))
mdb.models['Model-RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[50], ))
mdb.models['Model-RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[55], ))
mdb.models['Model-RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[22], ))
mdb.models['Model-RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[24], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[23]))
mdb.models['Model-RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[27], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[28]))
mdb.models['Model-RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[9], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[10], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[12], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[6], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[7], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[8], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[8], 
    mdb.models['Model-RTJ'].sketches['__profile__'].dimensions[1], 
    mdb.models['Model-RTJ'].sketches['__profile__'].dimensions[2], 
    mdb.models['Model-RTJ'].sketches['__profile__'].dimensions[0], 
    mdb.models['Model-RTJ'].sketches['__profile__'].dimensions[1], 
    mdb.models['Model-RTJ'].sketches['__profile__'].dimensions[0]))
mdb.models['Model-RTJ'].ConstrainedSketch(name='adjment', objectToCopy=
    mdb.models['Model-RTJ'].sketches['__profile__'])
mdb.models['Model-RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[13], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[14], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[15], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[18], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[19], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[11], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[17], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[16], 
    mdb.models['Model-RTJ'].sketches['__profile__'].dimensions[5], 
    mdb.models['Model-RTJ'].sketches['__profile__'].dimensions[6], 
    mdb.models['Model-RTJ'].sketches['__profile__'].constraints[27], 
    mdb.models['Model-RTJ'].sketches['__profile__'].constraints[28], 
    mdb.models['Model-RTJ'].sketches['__profile__'].constraints[36], 
    mdb.models['Model-RTJ'].sketches['__profile__'].constraints[37]))
mdb.models['Model-RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[52], ))
mdb.models['Model-RTJ'].sketches['__profile__'].Line(point1=(184.935, 0.95), 
    point2=(184.939169668683, -2.03461423838149))
mdb.models['Model-RTJ'].Part(dimensionality=THREE_D, name='Part-4', type=
    DEFORMABLE_BODY)
mdb.models['Model-RTJ'].parts['Part-4'].BaseSolidRevolve(angle=9.0, 
    flipRevolveDirection=OFF, sketch=
    mdb.models['Model-RTJ'].sketches['__profile__'])
del mdb.models['Model-RTJ'].sketches['__profile__']
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].parts.changeKey(fromName='Part-4', toName='RTJ')
mdb.models['Model-RTJ'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-RTJ'].rootAssembly.Instance(dependent=ON, name='RTJ-1', part=
    mdb.models['Model-RTJ'].parts['RTJ'])
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['RTJ'].features['Solid revolve-1'].sketch)
mdb.models['Model-RTJ'].parts['RTJ'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['RTJ'].features['Solid revolve-1'])
mdb.models['Model-RTJ'].sketches['__edit__'].retrieveSketch(sketch=
    mdb.models['Model-RTJ'].sketches['adjment'])
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(176.25, 0.0), point2=
    (200.0, 0.0))
mdb.models['Model-RTJ'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[74])
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[74], point1=(
    181.560745239258, -0.0566539764404297))
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Solid revolve-1'].sketch)
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Solid revolve-1'])
mdb.models['Model-RTJ'].sketches['__edit__'].move(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[5], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[6], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[7], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[11], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[12], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[13], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[14], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[27], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[29], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[31], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[34], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[35], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[36], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[37]), vector=(0.0, 
    -0.95))
mdb.models['Model-RTJ'].parts['FLANGE'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Model-RTJ'].sketches['__edit__'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].parts['FLANGE'].regenerate()
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['RTJ'].features['Solid revolve-1'].sketch)
mdb.models['Model-RTJ'].parts['RTJ'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['RTJ'].features['Solid revolve-1'])
mdb.models['Model-RTJ'].sketches['__edit__'].move(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[38], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[54], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[56], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[57]), vector=(0.0, 
    -0.95))
mdb.models['Model-RTJ'].parts['RTJ'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Model-RTJ'].sketches['__edit__'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].parts['RTJ'].regenerate()
mdb.models['Model-RTJ'].rootAssembly.regenerate()
mdb.models['Model-RTJ'].rootAssembly.translate(instanceList=('BOLT-1', ), 
    vector=(0.0, -0.95, 0.0))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].rootAssembly.PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), edges=(
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].edges[40], 
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].edges[44]), line=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].edges[17], 
    sense=REVERSE)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].rootAssembly.regenerate()
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['BOLT'].features['Solid revolve-1'].sketch)
mdb.models['Model-RTJ'].parts['BOLT'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['BOLT'].features['Solid revolve-1'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Solid revolve-1'].sketch)
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Solid revolve-1'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['BOLT'].features['Solid revolve-1'].sketch)
mdb.models['Model-RTJ'].parts['BOLT'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['BOLT'].features['Solid revolve-1'])
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(0.0, 
    -0.0833333333333333), point2=(141.25, -0.0833333333331817))
mdb.models['Model-RTJ'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[19])
mdb.models['Model-RTJ'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[14], entity2=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[19])
mdb.models['Model-RTJ'].sketches['__edit__'].offset(distance=88.6, objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[19], ), side=LEFT)
mdb.models['Model-RTJ'].sketches['__edit__'].move(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[2], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[14], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[17], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[5], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[12]), vector=(0.0, 
    0.95))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[20], ))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[15], ))
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(18.0, 
    88.5166666666667), point2=(18.0, 0.0))
mdb.models['Model-RTJ'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[21])
mdb.models['Model-RTJ'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[12], entity2=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[21])
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].dimensions[0], 
    mdb.models['Model-RTJ'].sketches['__edit__'].dimensions[2]))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[19], ))
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(18.0, 0.0), point2=(
    0.0, 0.0))
mdb.models['Model-RTJ'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[22])
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[16], ))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].constraints[33], ))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[14], ))
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(0.0, 121.35), point2=
    (0.0, 0.0))
mdb.models['Model-RTJ'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[23])
mdb.models['Model-RTJ'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[17], entity2=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[23])
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(18.0, 0.0), point2=(
    56.25, 0.0))
mdb.models['Model-RTJ'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[24])
mdb.models['Model-RTJ'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[21], entity2=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[24])
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[21], ))
mdb.models['Model-RTJ'].sketches['__edit__'].undo()
mdb.models['Model-RTJ'].sketches['__edit__'].undo()
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(18.0, 0.0), point2=(
    90.0, 0.0))
mdb.models['Model-RTJ'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[24])
mdb.models['Model-RTJ'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[21], entity2=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[24])
mdb.models['Model-RTJ'].sketches['__edit__'].offset(distance=88.6, objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[24], ), side=LEFT)
mdb.models['Model-RTJ'].sketches['__edit__'].move(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[17], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[5], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[12]), vector=(0.0, 
    0.0833333333333144))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[25], ))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[24], ))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[21], ))
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(18.0, 88.6), point2=(
    18.0, 0.0))
mdb.models['Model-RTJ'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[26])
mdb.models['Model-RTJ'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[12], entity2=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[26])
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[23], ))
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(0.0, 
    121.433333333333), point2=(0.0, 0.0))
mdb.models['Model-RTJ'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[27])
mdb.models['Model-RTJ'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[17], entity2=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[27])
mdb.models['Model-RTJ'].sketches['__edit__'].VerticalDimension(textPoint=(
    41.6007995605469, 10.5535087585449), value=88.6, vertex1=
    mdb.models['Model-RTJ'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['Model-RTJ'].sketches['__edit__'].vertices[10])
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[27], ))
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(0.0, 
    121.433333333333), point2=(0.0, 0.0))
mdb.models['Model-RTJ'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[28])
mdb.models['Model-RTJ'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[17], entity2=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[28])
mdb.models['Model-RTJ'].parts['BOLT'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Model-RTJ'].sketches['__edit__'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].parts['BOLT'].regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-RTJ'].parts['BOLT'].backup()
mdb.models['Model-RTJ'].parts['BOLT'].deleteFeatures(('Partition cell-1', 
    'Partition cell-2', 'Partition cell-3', 'Partition cell-4', 
    'Partition cell-5', 'Partition cell-6'))
mdb.models['Model-RTJ'].rootAssembly.regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-RTJ'].rootAssembly.regenerate()
mdb.models['Model-RTJ'].rootAssembly.translate(instanceList=('BOLT-1', ), 
    vector=(0.0, 1.033333, 0.0))
mdb.models['Model-RTJ'].parts['BOLT'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-RTJ'].parts['BOLT'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), edges=(mdb.models['Model-RTJ'].parts['BOLT'].edges[3], ), line=
    mdb.models['Model-RTJ'].parts['BOLT'].edges[11], sense=FORWARD)
mdb.models['Model-RTJ'].parts['BOLT'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-RTJ'].parts['BOLT'].cells.getSequenceFromMask(('[#2 ]', 
    ), ), point1=mdb.models['Model-RTJ'].parts['BOLT'].vertices[7], point2=
    mdb.models['Model-RTJ'].parts['BOLT'].vertices[6], point3=
    mdb.models['Model-RTJ'].parts['BOLT'].InterestingPoint(
    mdb.models['Model-RTJ'].parts['BOLT'].edges[12], MIDDLE))
mdb.models['Model-RTJ'].parts['BOLT'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-RTJ'].parts['BOLT'].cells.getSequenceFromMask(('[#2 ]', 
    ), ), point1=mdb.models['Model-RTJ'].parts['BOLT'].vertices[4], point2=
    mdb.models['Model-RTJ'].parts['BOLT'].vertices[3], point3=
    mdb.models['Model-RTJ'].parts['BOLT'].InterestingPoint(
    mdb.models['Model-RTJ'].parts['BOLT'].edges[21], MIDDLE))
mdb.models['Model-RTJ'].parts['BOLT'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-RTJ'].parts['BOLT'].cells.getSequenceFromMask(('[#a ]', 
    ), ), point1=mdb.models['Model-RTJ'].parts['BOLT'].vertices[8], point2=
    mdb.models['Model-RTJ'].parts['BOLT'].InterestingPoint(
    mdb.models['Model-RTJ'].parts['BOLT'].edges[4], CENTER), point3=
    mdb.models['Model-RTJ'].parts['BOLT'].InterestingPoint(
    mdb.models['Model-RTJ'].parts['BOLT'].edges[0], MIDDLE))
mdb.models['Model-RTJ'].parts['BOLT'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-RTJ'].parts['BOLT'].cells.getSequenceFromMask(('[#3 ]', 
    ), ), point1=mdb.models['Model-RTJ'].parts['BOLT'].InterestingPoint(
    mdb.models['Model-RTJ'].parts['BOLT'].edges[8], MIDDLE), point2=
    mdb.models['Model-RTJ'].parts['BOLT'].InterestingPoint(
    mdb.models['Model-RTJ'].parts['BOLT'].edges[30], MIDDLE), point3=
    mdb.models['Model-RTJ'].parts['BOLT'].InterestingPoint(
    mdb.models['Model-RTJ'].parts['BOLT'].edges[11], MIDDLE))
mdb.models['Model-RTJ'].rootAssembly.regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-RTJ'].rootAssembly.regenerate()
mdb.models['Model-RTJ'].rootAssembly.regenerate()
mdb.models['Model-RTJ'].parts['RTJ'].PartitionCellBySweepEdge(cells=
    mdb.models['Model-RTJ'].parts['RTJ'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), edges=(mdb.models['Model-RTJ'].parts['RTJ'].edges[7], ), sweepPath=
    mdb.models['Model-RTJ'].parts['RTJ'].edges[5])
#* Feature creation failed.
mdb.models['Model-RTJ'].parts['RTJ'].PartitionCellByPatchNEdges(cell=
    mdb.models['Model-RTJ'].parts['RTJ'].cells[0], edges=(
    mdb.models['Model-RTJ'].parts['RTJ'].edges[7], 
    mdb.models['Model-RTJ'].parts['RTJ'].edges[10], 
    mdb.models['Model-RTJ'].parts['RTJ'].edges[3], 
    mdb.models['Model-RTJ'].parts['RTJ'].edges[11], 
    mdb.models['Model-RTJ'].parts['RTJ'].edges[9], 
    mdb.models['Model-RTJ'].parts['RTJ'].edges[6], 
    mdb.models['Model-RTJ'].parts['RTJ'].edges[1], 
    mdb.models['Model-RTJ'].parts['RTJ'].edges[4]))
#* Feature creation failed.
mdb.models['Model-RTJ'].parts['RTJ'].PartitionCellByExtendFace(cells=
    mdb.models['Model-RTJ'].parts['RTJ'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), extendFace=mdb.models['Model-RTJ'].parts['RTJ'].faces[1])
#* Feature creation failed.
mdb.models['Model-RTJ'].parts['RTJ'].PartitionCellByExtendFace(cells=
    mdb.models['Model-RTJ'].parts['RTJ'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), extendFace=mdb.models['Model-RTJ'].parts['RTJ'].faces[1])
#* Feature creation failed.
mdb.models['Model-RTJ'].parts['RTJ'].PartitionFaceByCurvedPathEdgePoints(edge1=
    mdb.models['Model-RTJ'].parts['RTJ'].edges[6], edge2=
    mdb.models['Model-RTJ'].parts['RTJ'].edges[11], face=
    mdb.models['Model-RTJ'].parts['RTJ'].faces[5], point1=
    mdb.models['Model-RTJ'].parts['RTJ'].vertices[5], point2=
    mdb.models['Model-RTJ'].parts['RTJ'].vertices[7])
mdb.models['Model-RTJ'].parts['RTJ'].PartitionCellByPlaneNormalToEdge(cells=
    mdb.models['Model-RTJ'].parts['RTJ'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), edge=mdb.models['Model-RTJ'].parts['RTJ'].edges[7], point=
    mdb.models['Model-RTJ'].parts['RTJ'].vertices[1])
#* Feature creation failed.
mdb.models['Model-RTJ'].parts['RTJ'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-RTJ'].parts['RTJ'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), normal=mdb.models['Model-RTJ'].parts['RTJ'].edges[0], point=
    mdb.models['Model-RTJ'].parts['RTJ'].vertices[1])
#* Feature creation failed.
mdb.models['Model-RTJ'].parts['RTJ'].PartitionCellBySweepEdge(cells=
    mdb.models['Model-RTJ'].parts['RTJ'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), edges=(mdb.models['Model-RTJ'].parts['RTJ'].edges[0], ), sweepPath=
    mdb.models['Model-RTJ'].parts['RTJ'].edges[7])
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].rootAssembly.regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-RTJ'].rootAssembly.regenerate()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RF'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=GK3D8, elemLibrary=STANDARD), ElemType(elemCode=GK3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=UNKNOWN_TET, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['Model-RF'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=GK3D8, elemLibrary=STANDARD), ElemType(elemCode=GK3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=UNKNOWN_TET, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), ))
mdb.models['Model-RF'].materials['SPRIAL WOUND GASKET'].GasketThicknessBehavior(
    table=((0.0, 0.0), (3.703703704, 0.075675676), (8.888888889, 0.135135135), 
    (13.33333333, 0.183783784), (17.77777778, 0.286486486), (22.22222222, 
    0.335135135), (28.14814815, 0.389189189), (31.85185185, 0.443243243), (
    36.2962963, 0.497297297), (40.74074074, 0.551351351), (45.18518519, 
    0.610810811)), unloadingTable=((0.0, 0.0, 0.378378378), (3.703703704, 
    0.075675676, 0.481081081), (8.888888889, 0.135135135, 0.52972973), (
    13.33333333, 0.183783784, 0.551351351), (17.77777778, 0.286486486, 
    0.567567568), (22.22222222, 0.335135135, 0.578378378), (28.14814815, 
    0.389189189, 0.586486486), (31.85185185, 0.443243243, 0.594594595), (
    36.2962963, 0.497297297, 0.6), (40.74074074, 0.551351351, 0.605405405), (
    45.18518519, 0.610810811, 0.610810811)))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RF'].materials['SPRIAL WOUND GASKET'].gasketThicknessBehavior.setValues(
    table=((0.0, 0.0), (3.703703704, 0.075675676), (8.888888889, 0.135135135), 
    (13.33333333, 0.183783784), (17.77777778, 0.286486486), (22.22222222, 
    0.335135135), (28.14814815, 0.389189189), (31.85185185, 0.443243243), (
    36.2962963, 0.497297297), (40.74074074, 0.551351351), (45.18518519, 
    0.610810811), (49.62962963, 0.648648649), (55.55555556, 0.681081081), (
    59.25925926, 0.735135135), (65.18518519, 0.767567568), (68.14814815, 
    0.810810811), (72.59259259, 0.848648649), (77.03703704, 0.875675676), (
    80.0, 0.908108108), (85.92592593, 0.92972973), (88.88888889, 0.967567568)), 
    unloadingDependencies=1, unloadingTable=((0.0, 0.0, 0.378378378, 
    0.643243243), (3.703703704, 0.075675676, 0.481081081, 0.745945946), (
    8.888888889, 0.135135135, 0.52972973, 0.794594595), (13.33333333, 
    0.183783784, 0.551351351, 0.810810811), (17.77777778, 0.286486486, 
    0.567567568, 0.827027027), (22.22222222, 0.335135135, 0.578378378, 
    0.843243243), (28.14814815, 0.389189189, 0.586486486, 0.854054054), (
    31.85185185, 0.443243243, 0.594594595, 0.864864865), (36.2962963, 
    0.497297297, 0.6, 0.875675676), (40.74074074, 0.551351351, 0.605405405, 
    0.883783784), (45.18518519, 0.610810811, 0.610810811, 0.891891892), (
    49.62962963, 0.648648649, 0.0, 0.897297297), (55.55555556, 0.681081081, 
    0.0, 0.902702703), (59.25925926, 0.735135135, 0.0, 0.913513514), (
    65.18518519, 0.767567568, 0.0, 0.927027027), (68.14814815, 0.810810811, 
    0.0, 0.935135135), (72.59259259, 0.848648649, 0.0, 0.940540541), (
    77.03703704, 0.875675676, 0.0, 0.945945946), (80.0, 0.908108108, 0.0, 
    0.956756757), (85.92592593, 0.92972973, 0.0, 0.962162162), (88.88888889, 
    0.967567568, 0.0, 0.967567568)), yieldOnsetMethod=CLOSURE_VALUE)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RF'].rootAssembly.Set(cells=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    mask=('[#1ff ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    mask=('[#3 ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['BOLT-1'].cells.getSequenceFromMask(
    mask=('[#ff ]', ), ), edges=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:2 #ffff ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].edges.getSequenceFromMask(
    mask=('[#fffff ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['BOLT-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff #1fff ]', ), ), faces=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces.getSequenceFromMask(
    mask=('[#7ff ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['BOLT-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff ]', ), ), name='Set-31', vertices=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff #3ff ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].vertices.getSequenceFromMask(
    mask=('[#fff ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['BOLT-1'].vertices.getSequenceFromMask(
    mask=('[#3fffff ]', ), ))
mdb.models['Model-RF'].Temperature(createStepName='Initial', 
    crossSectionDistribution=CONSTANT_THROUGH_THICKNESS, distributionType=
    UNIFORM, magnitudes=(21.0, ), name='initial temp', region=
    mdb.models['Model-RF'].rootAssembly.sets['Set-31'])
mdb.models['Model-RF'].rootAssembly.Set(cells=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    mask=('[#1ff ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    mask=('[#3 ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['BOLT-1'].cells.getSequenceFromMask(
    mask=('[#ff ]', ), ), edges=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:2 #ffff ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].edges.getSequenceFromMask(
    mask=('[#fffff ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['BOLT-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff #1fff ]', ), ), faces=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces.getSequenceFromMask(
    mask=('[#7ff ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['BOLT-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff ]', ), ), name='Set-32', vertices=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff #3ff ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].vertices.getSequenceFromMask(
    mask=('[#fff ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['BOLT-1'].vertices.getSequenceFromMask(
    mask=('[#3fffff ]', ), ))
mdb.models['Model-RF'].Temperature(createStepName='Step-1', 
    crossSectionDistribution=CONSTANT_THROUGH_THICKNESS, distributionType=
    UNIFORM, magnitudes=(55.0, ), name='Predefined Field-2', region=
    mdb.models['Model-RF'].rootAssembly.sets['Set-32'])
mdb.models['Model-RF'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#b1 ]', ), ))
mdb.models['Model-RF'].rootAssembly.PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#90 ]', ), ), edges=(
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].edges[6], 
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].edges[9])
    , line=mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].edges[54], 
    sense=REVERSE)
mdb.models['Model-RF'].rootAssembly.PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#202 ]', ), ), edges=(
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].edges[7], 
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].edges[16])
    , line=mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].edges[89], 
    sense=FORWARD)
mdb.models['Model-RF'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-RF'].rootAssembly.Surface(name='Surf-5', side1Faces=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    mask=('[#10000 #8208834 ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces.getSequenceFromMask(
    mask=('[#102 ]', ), ))
mdb.models['Model-RF'].Pressure(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, field='', magnitude=10.0, name='pressure10mpa', 
    region=mdb.models['Model-RF'].rootAssembly.surfaces['Surf-5'])
mdb.models['Model-RF'].rootAssembly.Surface(name='Surf-6', side2Faces=
    mdb.models['Model-RF'].rootAssembly.instances['BOLT-1'].faces.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-RF'].BoltLoad(boltMethod=APPLY_FORCE, createStepName='Step-1'
    , datumAxis=
    mdb.models['Model-RF'].rootAssembly.instances['BOLT-1'].datums[1], 
    magnitude=115598.0, name='Load-2', region=
    mdb.models['Model-RF'].rootAssembly.surfaces['Surf-6'])
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-RF', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='FlangeRF', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF, datacheckJob=True)
#* An error was detected when trying to generate surfaces 
#* on gasket regions. Verify that the sweep direction on the 
#* gasket is along the thickness direction, and that the 
#* surfaces are defined at the top or bottom face.
#* An error was detected when trying to generate surfaces 
#* on gasket regions. Verify that the sweep direction on the 
#* gasket is along the thickness direction, and that the 
#* surfaces are defined at the top or bottom face.
#* An error was detected when trying to generate surfaces 
#* on gasket regions. Verify that the sweep direction on the 
#* gasket is along the thickness direction, and that the 
#* surfaces are defined at the top or bottom face.
mdb.models['Model-RF'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-RF'].rootAssembly.setMeshControls(algorithm=ADVANCING_FRONT, 
    regions=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), technique=SWEEP)
mdb.models['Model-RF'].rootAssembly.setSweepPath(edge=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].edges[19]
    , region=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells[0]
    , sense=REVERSE)
mdb.models['Model-RF'].rootAssembly.setSweepPath(edge=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].edges[5]
    , region=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells[1]
    , sense=REVERSE)
mdb.models['Model-RF'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=GK3D8, elemLibrary=STANDARD), ElemType(elemCode=GK3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=UNKNOWN_TET, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), ))
mdb.models['Model-RF'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RF'].rootAssembly.regenerate()
mdb.models['Model-RF'].rootAssembly.Set(name='gaskets1', nodes=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#300 #0:4 #fffe0000 #3f ]', ), ))
mdb.models['Model-RF'].rootAssembly.Set(name='gaskettop', nodes=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#fffff003 #3fff #fff8 #0:2 #1fff0 #7ffc0 #0', 
    ' #fffffc00 #ffffffff:7 #7ffffff #0:16 #f0000000 #ffffffff:8 #1fff ]', ), 
    ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RF'].rootAssembly.regenerate()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RF'].boundaryConditions['BC-3'].setValues(localCsys=None)
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF, datacheckJob=True)
#* An error was detected when trying to generate surfaces 
#* on gasket regions. Verify that the sweep direction on the 
#* gasket is along the thickness direction, and that the 
#* surfaces are defined at the top or bottom face.
#* An error was detected when trying to generate surfaces 
#* on gasket regions. Verify that the sweep direction on the 
#* gasket is along the thickness direction, and that the 
#* surfaces are defined at the top or bottom face.
#* An error was detected when trying to generate surfaces 
#* on gasket regions. Verify that the sweep direction on the 
#* gasket is along the thickness direction, and that the 
#* surfaces are defined at the top or bottom face.
mdb.models['Model-RF'].rootAssembly.assignStackDirection(cells=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), referenceRegion=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces[7])
mdb.models['Model-RF'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ))
mdb.models['Model-RF'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ))
mdb.models['Model-RF'].rootAssembly.Set(name='gaskets1', nodes=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#c #ffffc000 #7 ]', ), ))
mdb.models['Model-RF'].rootAssembly.Set(name='gaskettop', nodes=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#fffff003 #3fff #fff8 #0:2 #1fff0 #7ffc0 #0', 
    ' #fffffc00 #ffffffff:7 #7ffffff #0:16 #f0000000 #ffffffff:8 #1fff ]', ), 
    ))
mdb.models['Model-RF'].boundaryConditions['BC-3'].setValues(localCsys=
    mdb.models['Model-RF'].rootAssembly.datums[43])
mdb.models['Model-RF'].boundaryConditions['BC-2'].setValues(localCsys=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].datums[15])
mdb.models['Model-RF'].boundaryConditions['BC-3'].setValues(localCsys=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].datums[15])
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF, datacheckJob=True)
#* An error was detected when trying to generate surfaces 
#* on gasket regions. Verify that the sweep direction on the 
#* gasket is along the thickness direction, and that the 
#* surfaces are defined at the top or bottom face.
#* An error was detected when trying to generate surfaces 
#* on gasket regions. Verify that the sweep direction on the 
#* gasket is along the thickness direction, and that the 
#* surfaces are defined at the top or bottom face.
#* An error was detected when trying to generate surfaces 
#* on gasket regions. Verify that the sweep direction on the 
#* gasket is along the thickness direction, and that the 
#* surfaces are defined at the top or bottom face.
mdb.models['Model-RF'].rootAssembly.features['FLANGE-1'].suppress()
mdb.models['Model-RF'].rootAssembly.assignStackDirection(cells=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ), referenceRegion=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces[4])
mdb.models['Model-RF'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-RF'].rootAssembly.setSweepPath(edge=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].edges[5]
    , region=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells[1]
    , sense=FORWARD)
mdb.models['Model-RF'].rootAssembly.assignStackDirection(cells=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), referenceRegion=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces[5])
mdb.models['Model-RF'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-RF'].rootAssembly.setSweepPath(edge=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].edges[11]
    , region=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells[0]
    , sense=REVERSE)
mdb.models['Model-RF'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ))
mdb.models['Model-RF'].rootAssembly.features['FLANGE-1'].resume()
mdb.models['Model-RF'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-RF'].rootAssembly.Set(name='gaskets1', nodes=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#c0 #0:3 #7ffffc ]', ), ))
mdb.models['Model-RF'].rootAssembly.Set(name='gaskettop', nodes=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#cf0 #0:2 #ffffffff:2 #f #f8000000 #ffffffff #3ff', 
    ' #0:7 #f8000000 #ffffffff:8 #fff #0:16 #ffffe000 #ffffffff:7', 
    ' #3fffffff ]', ), ))
mdb.models['Model-RF'].rootAssembly.Set(name='gaskettop', nodes=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#70 #0:2 #ffffffff #ff8003ff #f #f8000000 #e00000ff', 
    ' #3ff #0:7 #f8000000 #ffffffff:8 #fff #0:16 #ffffe000', 
    ' #ffffffff:7 #3fffffff ]', ), ))
mdb.models['Model-RF'].rootAssembly.Set(name='gaskettop', nodes=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#30 #0:2 #ffffffff #ff800003 #f #f8000000 #e00000ff', 
    ' #3ff #0:7 #f8000000 #ffffffff:8 #fff #0:16 #ffffe000', 
    ' #ffffffff:7 #3fffffff ]', ), ))
del mdb.models['Model-RF'].interactions['CP-1-FLANGE-1-SPRIALWOUND GASKET-1']
del mdb.models['Model-RF'].interactions['CP-2-BOLT-1-FLANGE-1']
mdb.models['Model-RF'].rootAssembly.Surface(name='CP-3-FLANGE-1', side1Faces=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    ('[#20000020 ]', ), ))
mdb.models['Model-RF'].rootAssembly.Surface(name='CP-2-SPRIALWOUND GASKET-1', 
    side1Faces=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces.getSequenceFromMask(
    ('[#84 ]', ), ))
mdb.models['Model-RF'].rootAssembly.Surface(name='CP-3-BOLT-1', side1Faces=
    mdb.models['Model-RF'].rootAssembly.instances['BOLT-1'].faces.getSequenceFromMask(
    ('[#20100000 ]', ), ))
mdb.models['Model-RF'].rootAssembly.Surface(name='CP-4-FLANGE-1', side1Faces=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    ('[#200 #1 ]', ), ))
mdb.models['Model-RF'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    createStepName='Initial', enforcement=SURFACE_TO_SURFACE, 
    interactionProperty='IntProp-1', master=
    mdb.models['Model-RF'].rootAssembly.surfaces['CP-3-FLANGE-1'], name=
    'CP-1-FLANGE-1-SPRIALWOUND GASKET-1', slave=
    mdb.models['Model-RF'].rootAssembly.surfaces['CP-2-SPRIALWOUND GASKET-1'], 
    sliding=FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-RF'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    createStepName='Initial', enforcement=SURFACE_TO_SURFACE, 
    interactionProperty='IntProp-1', master=
    mdb.models['Model-RF'].rootAssembly.surfaces['CP-3-BOLT-1'], name=
    'CP-2-BOLT-1-FLANGE-1', slave=
    mdb.models['Model-RF'].rootAssembly.surfaces['CP-4-FLANGE-1'], sliding=
    FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-RF'].interactions['CP-1-FLANGE-1-SPRIALWOUND GASKET-1'].setValues(
    adjustMethod=NONE, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    thickness=ON)
mdb.models['Model-RF'].interactions['CP-2-BOLT-1-FLANGE-1'].setValues(
    adjustMethod=NONE, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    thickness=ON)
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF, datacheckJob=True)
#* An error was detected when trying to generate surfaces 
#* on gasket regions. Verify that the sweep direction on the 
#* gasket is along the thickness direction, and that the 
#* surfaces are defined at the top or bottom face.
#* An error was detected when trying to generate surfaces 
#* on gasket regions. Verify that the sweep direction on the 
#* gasket is along the thickness direction, and that the 
#* surfaces are defined at the top or bottom face.
#* An error was detected when trying to generate surfaces 
#* on gasket regions. Verify that the sweep direction on the 
#* gasket is along the thickness direction, and that the 
#* surfaces are defined at the top or bottom face.
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RF'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=C3D8, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD)), regions=(
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), ))
mdb.models['Model-RF'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=C3D8, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD)), regions=(
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), ))
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE DEPENDENCIES PARAMETER SPECIFIED FOR ALL *GASKET THICKNESS BEHAVIOR OPTIONS MUST BE THE SAME.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE DEPENDENCIES PARAMETER SPECIFIED FOR *GASKET THICKNESS BEHAVIOR AND *GASKET ELASTICITY MUST NOT BE DIFFERENT.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE DEPENDENCIES PARAMETER SPECIFIED FOR *GASKET ELASTICITY AND *GASKET THICKNESS BEHAVIOR MUST NOT BE DIFFERENT.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE NUMBER OF INDEPENDENT VARIABLES FOR THE UNLOADING CURVES MAY ONLY DIFFER FROM THOSE OF THE LOADING CURVES BY ONE VARIABLE, THE PLASTIC CLOSURE', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '3080 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3080 elements have incorrect property definitions. The elements have been identified in element set WarnElemIncorrectProperty.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FlangeRF'})
mdb.models['Model-RF'].materials['SPRIAL WOUND GASKET'].gasketThicknessBehavior.setValues(
    unloadingDependencies=0, unloadingTable=((0.0, 0.0, 0.378378378), (
    3.703703704, 0.075675676, 0.481081081), (8.888888889, 0.135135135, 
    0.52972973), (13.33333333, 0.183783784, 0.551351351), (17.77777778, 
    0.286486486, 0.567567568), (22.22222222, 0.335135135, 0.578378378), (
    28.14814815, 0.389189189, 0.586486486), (31.85185185, 0.443243243, 
    0.594594595), (36.2962963, 0.497297297, 0.6), (40.74074074, 0.551351351, 
    0.605405405), (45.18518519, 0.610810811, 0.610810811), (49.62962963, 
    0.648648649, 0.0), (55.55555556, 0.681081081, 0.0), (59.25925926, 
    0.735135135, 0.0), (65.18518519, 0.767567568, 0.0), (68.14814815, 
    0.810810811, 0.0), (72.59259259, 0.848648649, 0.0), (77.03703704, 
    0.875675676, 0.0), (80.0, 0.908108108, 0.0), (85.92592593, 0.92972973, 
    0.0), (88.88888889, 0.967567568, 0.0)))
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE INDEPENDENT VARIABLES MUST BE ARRANGED IN ASCENDING ORDER', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Abaqus FOUND THAT THE USER SPECIFIED POINT OF PLASTICITY ONSET DOES NOT CORRESPOND TO A POINT GIVEN ON THE LOADING CURVE. THE TOTAL CLOSURE SPECIFIED FOR THIS POINT IS  0.10000', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '3080 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3080 elements have incorrect property definitions. The elements have been identified in element set WarnElemIncorrectProperty.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FlangeRF'})
mdb.models['Model-RF'].materials['SPRIAL WOUND GASKET'].gasketThicknessBehavior.setValues(
    unloadingTable=((0.0, 0.0, 0.643243243), (3.703703704, 0.075675676, 
    0.745945946), (8.888888889, 0.135135135, 0.794594595), (13.33333333, 
    0.183783784, 0.810810811), (17.77777778, 0.286486486, 0.827027027), (
    22.22222222, 0.335135135, 0.843243243), (28.14814815, 0.389189189, 
    0.854054054), (31.85185185, 0.443243243, 0.864864865), (36.2962963, 
    0.497297297, 0.875675676), (40.74074074, 0.551351351, 0.883783784), (
    45.18518519, 0.610810811, 0.891891892), (49.62962963, 0.648648649, 
    0.897297297), (55.55555556, 0.681081081, 0.902702703), (59.25925926, 
    0.735135135, 0.913513514), (65.18518519, 0.767567568, 0.927027027), (
    68.14814815, 0.810810811, 0.935135135), (72.59259259, 0.848648649, 
    0.940540541), (77.03703704, 0.875675676, 0.945945946), (80.0, 0.908108108, 
    0.956756757), (85.92592593, 0.92972973, 0.962162162), (88.88888889, 
    0.967567568, 0.967567568)))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Abaqus FOUND THAT THE USER SPECIFIED POINT OF PLASTICITY ONSET DOES NOT CORRESPOND TO A POINT GIVEN ON THE LOADING CURVE. THE TOTAL CLOSURE SPECIFIED FOR THIS POINT IS  0.10000', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '3080 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3080 elements have incorrect property definitions. The elements have been identified in element set WarnElemIncorrectProperty.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FlangeRF'})
mdb.models['Model-RF'].materials['SPRIAL WOUND GASKET'].gasketThicknessBehavior.setValues(
    yieldOnsetMethod=RELATIVE_SLOPE_DROP)
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'YOU MUST PROVIDE AT LEAST TWO POINTS FOR EACH UNLOADING CURVE', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '3080 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3080 elements have incorrect property definitions. The elements have been identified in element set WarnElemIncorrectProperty.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FlangeRF'})
mdb.models['Model-RF'].materials['SPRIAL WOUND GASKET'].gasketThicknessBehavior.setValues(
    unloadingTable=((0.0, 0.378378378, 0.643243243), (3.703703704, 0.481081081, 
    0.745945946), (8.888888889, 0.52972973, 0.794594595), (13.33333333, 
    0.551351351, 0.810810811), (17.77777778, 0.567567568, 0.827027027), (
    22.22222222, 0.578378378, 0.843243243), (28.14814815, 0.586486486, 
    0.854054054), (31.85185185, 0.594594595, 0.864864865), (36.2962963, 0.6, 
    0.875675676), (40.74074074, 0.605405405, 0.883783784), (45.18518519, 
    0.610810811, 0.891891892), (49.62962963, 0.0, 0.897297297), (55.55555556, 
    0.0, 0.902702703), (59.25925926, 0.0, 0.913513514), (65.18518519, 0.0, 
    0.927027027), (68.14814815, 0.0, 0.935135135), (72.59259259, 0.0, 
    0.940540541), (77.03703704, 0.0, 0.945945946), (80.0, 0.0, 0.956756757), (
    85.92592593, 0.0, 0.962162162), (88.88888889, 0.0, 0.967567568)))
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INCORRECT UNLOADING CURVE DATA MAY HAVE BEEN SPECIFIED -- PLASTIC CLOSURE 0.96757 HAS EXCEEDED THE CLOSURE VALUE 0.0000', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'YOU MUST PROVIDE AT LEAST TWO POINTS FOR EACH UNLOADING CURVE', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '3080 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3080 elements have incorrect property definitions. The elements have been identified in element set WarnElemIncorrectProperty.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FlangeRF'})
mdb.models['Model-RF'].materials['SPRIAL WOUND GASKET'].gasketThicknessBehavior.setValues(
    yieldOnsetMethod=CLOSURE_VALUE)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].Set(cells=
    mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), name='Set-2')
mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].SectionAssignment(offset=0.0
    , offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].sets['Set-2'], 
    sectionName='GASKET', thicknessAssignment=FROM_SECTION)
del mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].sectionAssignments[0]
mdb.models['Model-RF'].rootAssembly.regenerate()
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INCORRECT UNLOADING CURVE DATA MAY HAVE BEEN SPECIFIED -- PLASTIC CLOSURE 0.96757 HAS EXCEEDED THE CLOSURE VALUE 0.0000', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Abaqus FOUND THAT THE USER SPECIFIED POINT OF PLASTICITY ONSET DOES NOT CORRESPOND TO A POINT GIVEN ON THE LOADING CURVE. THE TOTAL CLOSURE SPECIFIED FOR THIS POINT IS  0.10000', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '3080 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3080 elements have incorrect property definitions. The elements have been identified in element set WarnElemIncorrectProperty.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FlangeRF'})
mdb.models['Model-RF'].rootAssembly.regenerate()
mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].sectionAssignments[0].setValues(
    region=mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].sets['Set-2'])
del mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].sets['Set-1']
mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].Set(cells=
    mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), name='Set-2')
mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].regenerate()
mdb.models['Model-RF'].materials['SPRIAL WOUND GASKET'].gasketThicknessBehavior.setValues(
    yieldOnset=0.968)
mdb.models['Model-RF'].rootAssembly.regenerate()
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INCORRECT UNLOADING CURVE DATA MAY HAVE BEEN SPECIFIED -- PLASTIC CLOSURE 0.96757 HAS EXCEEDED THE CLOSURE VALUE 0.0000', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Abaqus FOUND THAT THE USER SPECIFIED POINT OF PLASTICITY ONSET DOES NOT CORRESPOND TO A POINT GIVEN ON THE LOADING CURVE. THE TOTAL CLOSURE SPECIFIED FOR THIS POINT IS  0.96800', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '3080 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3080 elements have incorrect property definitions. The elements have been identified in element set WarnElemIncorrectProperty.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FlangeRF'})
del mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].sectionAssignments[0]
mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].Set(cells=
    mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), name='Set-3')
mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].SectionAssignment(offset=0.0
    , offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].sets['Set-3'], 
    sectionName='GASKET', thicknessAssignment=FROM_SECTION)
mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].regenerate()
mdb.models['Model-RF'].rootAssembly.regenerate()
mdb.models['Model-RF'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=GK3D8, elemLibrary=STANDARD), ElemType(elemCode=GK3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=UNKNOWN_TET, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), ))
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.models['Model-RF'].rootAssembly.features['FLANGE-1'].suppress()
mdb.models['Model-RF'].rootAssembly.features['FLANGE-1'].resume()
mdb.models['Model-RF'].rootAssembly.features['FLANGE-1'].suppress()
mdb.models['Model-RF'].rootAssembly.assignStackDirection(cells=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), referenceRegion=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces[5])
mdb.models['Model-RF'].rootAssembly.setMeshControls(regions=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), technique=BOTTOM_UP)
mdb.models['Model-RF'].rootAssembly.assignStackDirection(cells=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ), referenceRegion=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces[4])
mdb.models['Model-RF'].rootAssembly.features['FLANGE-1'].resume()
mdb.models['Model-RF'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=GK3D8, elemLibrary=STANDARD), ElemType(elemCode=GK3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=UNKNOWN_TET, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ), ))
mdb.models['Model-RF'].rootAssembly.assignStackDirection(cells=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), referenceRegion=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces[5])
mdb.models['Model-RF'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-RF'].rootAssembly.setMeshControls(regions=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), technique=STRUCTURED)
#* Error: Mapped meshing with Quad/Hex elements is not supported
#* in Abaqus/CAE for the Gasket elements.
mdb.models['Model-RF'].rootAssembly.features['FLANGE-1'].suppress()
mdb.models['Model-RF'].rootAssembly.assignStackDirection(cells=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ), referenceRegion=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces[4])
mdb.models['Model-RF'].rootAssembly.assignStackDirection(cells=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), referenceRegion=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces[5])
mdb.models['Model-RF'].rootAssembly.assignStackDirection(cells=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ), referenceRegion=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces[4])
mdb.models['Model-RF'].rootAssembly.assignStackDirection(cells=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), referenceRegion=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces[4])
mdb.models['Model-RF'].rootAssembly.assignStackDirection(cells=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), referenceRegion=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces[5])
mdb.models['Model-RF'].rootAssembly.setMeshControls(algorithm=MEDIAL_AXIS, 
    regions=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), technique=SWEEP)
mdb.models['Model-RF'].rootAssembly.setSweepPath(edge=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].edges[11]
    , region=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells[0]
    , sense=REVERSE)
mdb.models['Model-RF'].rootAssembly.setSweepPath(edge=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].edges[17]
    , region=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells[1]
    , sense=REVERSE)
mdb.models['Model-RF'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ))
mdb.models['Model-RF'].rootAssembly.features['FLANGE-1'].resume()
mdb.models['Model-RF'].boundaryConditions['BC-1'].setValues(region=
    mdb.models['Model-RF'].rootAssembly.sets['gaskettop'])
mdb.models['Model-RF'].rootAssembly.Set(name='gaskettop', nodes=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#30 #0:2 #ffffffff #ff800003 #f #f8000000 #e00000ff', 
    ' #3ff #0:7 #f8000000 #ffffffff:8 #fff #0:16 #ffffe000', 
    ' #ffffffff:7 #3fffffff ]', ), ))
mdb.models['Model-RF'].rootAssembly.Set(name='gaskets1', nodes=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#c0 #0:3 #7ffffc ]', ), ))
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF, datacheckJob=True)
#* An error was detected when trying to generate surfaces 
#* on gasket regions. Verify that the sweep direction on the 
#* gasket is along the thickness direction, and that the 
#* surfaces are defined at the top or bottom face.
#* An error was detected when trying to generate surfaces 
#* on gasket regions. Verify that the sweep direction on the 
#* gasket is along the thickness direction, and that the 
#* surfaces are defined at the top or bottom face.
#* An error was detected when trying to generate surfaces 
#* on gasket regions. Verify that the sweep direction on the 
#* gasket is along the thickness direction, and that the 
#* surfaces are defined at the top or bottom face.
del mdb.models['Model-RF'].materials['SPRIAL WOUND GASKET'].gasketThicknessBehavior
mdb.models['Model-RF'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=C3D8R, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    kinematicSplit=AVERAGE_STRAIN, hourglassControl=DEFAULT, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD)), regions=(
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), ))
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'YOU MUST DEFINE THE LOADING CURVE FOR THE THICKNESS BEHAVIOR OF THE GASKET', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '3080 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3080 elements have incorrect property definitions. The elements have been identified in element set WarnElemIncorrectProperty.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FlangeRF'})
mdb.models['Model-RF'].sections['GASKET'].setValues(material='FLANGE')
mdb.models['Model-RF'].sections['GASKET'].setValues(material=
    'SPRIAL WOUND GASKET')
mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].sectionAssignments[0].setValues(
    sectionName='BOLT')
mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].sectionAssignments[0].setValues(
    sectionName='GASKET')
mdb.models['Model-RF'].sections['GASKET'].setValues(material='FLANGE')
del mdb.models['Model-RF'].sections['GASKET']
del mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].sectionAssignments[0]
mdb.models['Model-RF'].HomogeneousSolidSection(material='SPRIAL WOUND GASKET', 
    name='plaingasket', thickness=None)
mdb.models['Model-RF'].sections['plaingasket'].setValues(material=
    'SPRIAL WOUND GASKET', thickness=1.0)
mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].Set(cells=
    mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), name='Set-4')
mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].SectionAssignment(offset=0.0
    , offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].sets['Set-4'], 
    sectionName='plaingasket', thicknessAssignment=FROM_SECTION)
mdb.models['Model-RF'].rootAssembly.regenerate()
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 3972, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 155.0})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov 18 03:58:57 2018', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 24508, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 195.0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 14 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.875, 'attempts': 1, 
    'timeIncrement': 0.375, 'increment': 3, 'stepTime': 0.875, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.125, 'increment': 4, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov 18 03:59:39 2018', 'jobName': 'FlangeRF'})
mdb.models['Model-RF'].materials['SPRIAL WOUND GASKET'].GasketThicknessBehavior(
    table=((0.0, 0.0), (3.703703704, 0.075675676), (8.888888889, 0.135135135), 
    (13.33333333, 0.183783784), (17.77777778, 0.286486486), (22.22222222, 
    0.335135135), (28.14814815, 0.389189189), (31.85185185, 0.443243243), (
    36.2962963, 0.497297297), (40.74074074, 0.551351351), (45.18518519, 
    0.610810811), (49.62962963, 0.648648649), (55.55555556, 0.681081081), (
    59.25925926, 0.735135135), (65.18518519, 0.767567568), (68.14814815, 
    0.810810811), (72.59259259, 0.848648649), (77.03703704, 0.875675676), (
    80.0, 0.908108108), (85.92592593, 0.92972973), (88.88888889, 0.967567568)), 
    yieldOnset=0.967567568, yieldOnsetMethod=CLOSURE_VALUE)
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 22540, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 195.0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 14 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.875, 'attempts': 1, 
    'timeIncrement': 0.375, 'increment': 3, 'stepTime': 0.875, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.125, 'increment': 4, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov 18 04:06:06 2018', 'jobName': 'FlangeRF'})
mdb.models['Model-RF'].materials['SPRIAL WOUND GASKET'].gasketThicknessBehavior.setValues(
    unloadingTable=((0.0, 0.378378378, 0.643243243), (3.703703704, 0.481081081, 
    0.745945946), (8.888888889, 0.52972973, 0.794594595), (13.33333333, 
    0.551351351, 0.810810811), (17.77777778, 0.567567568, 0.827027027), (
    22.22222222, 0.578378378, 0.843243243), (28.14814815, 0.586486486, 
    0.854054054), (31.85185185, 0.594594595, 0.864864865), (36.2962963, 0.6, 
    0.875675676), (40.74074074, 0.605405405, 0.883783784), (45.18518519, 
    0.610810811, 0.891891892), (49.62962963, 0.0, 0.897297297), (55.55555556, 
    0.0, 0.902702703), (59.25925926, 0.0, 0.913513514), (65.18518519, 0.0, 
    0.927027027), (68.14814815, 0.0, 0.935135135), (72.59259259, 0.0, 
    0.940540541), (77.03703704, 0.0, 0.945945946), (80.0, 0.0, 0.956756757), (
    85.92592593, 0.0, 0.962162162), (88.88888889, 0.0, 0.967567568)))
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 25724, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 195.0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 14 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.875, 'attempts': 1, 
    'timeIncrement': 0.375, 'increment': 3, 'stepTime': 0.875, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.125, 'increment': 4, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov 18 04:09:13 2018', 'jobName': 'FlangeRF'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].materials.changeKey(fromName='SPRIAL WOUND GASKET', 
    toName='RTJ Gasket')
del mdb.models['Model-RTJ'].sections['GASKET']
mdb.models['Model-RTJ'].HomogeneousSolidSection(material='RTJ Gasket', name=
    'RTJ', thickness=None)
mdb.models['Model-RTJ'].parts['RTJ'].Set(cells=
    mdb.models['Model-RTJ'].parts['RTJ'].cells.getSequenceFromMask(('[#3 ]', ), 
    ), name='Set-1')
mdb.models['Model-RTJ'].parts['RTJ'].SectionAssignment(offset=0.0, offsetField=
    '', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-RTJ'].parts['RTJ'].sets['Set-1'], sectionName='RTJ', 
    thicknessAssignment=FROM_SECTION)
mdb.models['Model-RTJ'].rootAssembly.regenerate()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Model-RTJ'].parts['SPRIALWOUND GASKET']
mdb.models['Model-RTJ'].parts['RTJ'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=1.0)
mdb.models['Model-RTJ'].parts['RTJ'].assignStackDirection(cells=
    mdb.models['Model-RTJ'].parts['RTJ'].cells.getSequenceFromMask(('[#3 ]', ), 
    ), referenceRegion=mdb.models['Model-RTJ'].parts['RTJ'].faces[3])
mdb.models['Model-RTJ'].parts['RTJ'].setMeshControls(regions=
    mdb.models['Model-RTJ'].parts['RTJ'].cells.getSequenceFromMask(('[#3 ]', ), 
    ), technique=BOTTOM_UP)
mdb.models['Model-RTJ'].parts['RTJ'].setMeshControls(regions=
    mdb.models['Model-RTJ'].parts['RTJ'].cells.getSequenceFromMask(('[#3 ]', ), 
    ), technique=SWEEP)
mdb.models['Model-RTJ'].parts['RTJ'].setSweepPath(edge=
    mdb.models['Model-RTJ'].parts['RTJ'].edges[3], region=
    mdb.models['Model-RTJ'].parts['RTJ'].cells[0], sense=FORWARD)
mdb.models['Model-RTJ'].parts['RTJ'].setSweepPath(edge=
    mdb.models['Model-RTJ'].parts['RTJ'].edges[6], region=
    mdb.models['Model-RTJ'].parts['RTJ'].cells[1], sense=REVERSE)
mdb.models['Model-RTJ'].parts['RTJ'].generateMesh()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].rootAssembly.regenerate()
mdb.models['Model-RTJ'].StaticStep(name='RTJ STEP-1', previous='Initial')
mdb.models['Model-RTJ'].rootAssembly.DatumAxisByThruEdge(edge=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].edges[6])
mdb.models['Model-RTJ'].rootAssembly.PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), edges=(
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].edges[28], 
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].edges[43]), line=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].edges[34], 
    sense=REVERSE)
mdb.models['Model-RTJ'].rootAssembly.PartitionCellBySweepEdge(cells=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ), edges=(
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].edges[22], ), 
    sweepPath=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].edges[3])
mdb.models['Model-RTJ'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=C3D8, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD)), regions=(
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].cells.getSequenceFromMask(
    ('[#ff ]', ), ), ))
mdb.models['Model-RTJ'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=C3D8, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD)), regions=(
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].cells.getSequenceFromMask(
    ('[#ff ]', ), ), ))
mdb.models['Model-RTJ'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'], ))
mdb.models['Model-RTJ'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-RTJ'].rootAssembly.Set(name='bolttop', nodes=
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].nodes.getSequenceFromMask(
    mask=('[#200 #0 #3f80000 #f0000 #0:6 #1f80000 #0', ' #7e00 ]', ), ))
mdb.models['Model-RTJ'].rootAssembly.Set(faces=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    mask=('[#20002004 ]', ), )+\
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].faces.getSequenceFromMask(
    mask=('[#104 ]', ), ), name='flangeglobal')
mdb.models['Model-RTJ'].rootAssembly.Set(name='Set-8', nodes=
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].nodes.getSequenceFromMask(
    mask=('[#0:4 #ffffffc0 #ffffffe7 #3 #0:30 #fff00000 #ffffffff:8', 
    ' #3fffff ]', ), ))
mdb.models['Model-RTJ'].rootAssembly.sets.changeKey(fromName='Set-8', toName=
    'RTJGASKETTOP')
del mdb.models['Model-RTJ'].rootAssembly.sets['RTJGASKETTOP']
del mdb.models['Model-RTJ'].rootAssembly.sets['Set-11']
del mdb.models['Model-RTJ'].rootAssembly.sets['Set-12']
del mdb.models['Model-RTJ'].rootAssembly.sets['Set-13']
del mdb.models['Model-RTJ'].rootAssembly.sets['flgbolts']
del mdb.models['Model-RTJ'].rootAssembly.sets['gaskets2']
del mdb.models['Model-RTJ'].rootAssembly.features['Partition cell-1']
mdb.models['Model-RTJ'].rootAssembly.DatumPlaneByLinePoint(line=
    mdb.models['Model-RTJ'].rootAssembly.datums[93], point=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].datums[10])
del mdb.models['Model-RTJ'].rootAssembly.features['Datum plane-1']
mdb.models['Model-RTJ'].rootAssembly.features['Datum csys-1'].suppress()
mdb.models['Model-RTJ'].rootAssembly.features['Datum csys-1'].resume()
mdb.models['Model-RTJ'].rootAssembly.DatumCsysByTwoLines(CARTESIAN, line1=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].datums[17], 
    line2=mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].datums[1], 
    name='Datum csys-2')
del mdb.models['Model-RTJ'].rootAssembly.features['Datum csys-2']
mdb.models['Model-RTJ'].rootAssembly.DatumCsysByTwoLines(CARTESIAN, line1=
    mdb.models['Model-RTJ'].rootAssembly.datums[93], line2=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].edges[12], name=
    'Datum csys-2')
del mdb.models['Model-RTJ'].rootAssembly.features['Datum csys-2']
del mdb.models['Model-RTJ'].rootAssembly.features['Datum csys-1']
mdb.models['Model-RTJ'].rootAssembly.features['Datum axis-1'].suppress()
del mdb.models['Model-RTJ'].rootAssembly.features['Datum axis-1']
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].rootAssembly.DatumCsysByTwoLines(CARTESIAN, line1=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].datums[17], 
    line2=mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].edges[5], 
    name='Datum csys-1')
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].rootAssembly.Set(name='flanges1', nodes=
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].nodes.getSequenceFromMask(
    mask=('[#3dc476 #ffc31ff0 #1fff #7f03f86 #3e0f841 #ffc021fc #7', 
    ' #fc000000 #fffc0ff #0:2 #ffe00000 #1fff8007 #0:2 #7c000', 
    ' #3ff00 #0 #7fe07c ]', ), )+\
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].nodes.getSequenceFromMask(
    mask=('[#fe0066ff #ffffffdb #3fff #1e00000 #78 #fffc0000 #3fffff', 
    ' #0 #fffff000 #f00003ff #2007f #70 #0:7 #f8000000', 
    ' #ffffffff:2 #7 #0:6 #ffff0000 #ffffffff:3 #1ffff #0:4', 
    ' #ffc000 #0:5 #fffff000 #3ff ]', ), ))
mdb.models['Model-RTJ'].rootAssembly.Set(name='Set-4', nodes=
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].nodes.getSequenceFromMask(
    mask=('[#c #0 #f0000000 #3fffff #30 #18 #0', 
    ' #fe000000 #ffffffff #3f #0:27 #fffff ]', ), ))
mdb.models['Model-RTJ'].rootAssembly.sets.changeKey(fromName='Set-4', toName=
    'RTJS1')
mdb.models['Model-RTJ'].rootAssembly.Set(name='Set-5', nodes=
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].nodes.getSequenceFromMask(
    mask=('[#c0 #0:5 #ffc ]', ), )+\
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].nodes.getSequenceFromMask(
    mask=('[#980 #0 #60000 #c000 ]', ), ))
mdb.models['Model-RTJ'].rootAssembly.sets.changeKey(fromName='Set-5', toName=
    'RTJBOLTEDGES')
mdb.models['Model-RTJ'].rootAssembly.Set(name='RTJTOP', nodes=
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].nodes.getSequenceFromMask(
    mask=('[#0:4 #ffffffc0 #ffffffe7 #3 #0:30 #fff00000 #ffffffff:8', 
    ' #3fffff ]', ), ))
mdb.models['Model-RTJ'].ZsymmBC(createStepName='RTJ STEP-1', localCsys=
    mdb.models['Model-RTJ'].rootAssembly.datums[104], name='FLGS1', region=
    mdb.models['Model-RTJ'].rootAssembly.sets['flanges1'])
mdb.models['Model-RTJ'].ZsymmBC(createStepName='RTJ STEP-1', localCsys=
    mdb.models['Model-RTJ'].rootAssembly.datums[104], name='GASKBOLTS1', 
    region=mdb.models['Model-RTJ'].rootAssembly.sets['RTJS1'])
mdb.models['Model-RTJ'].YsymmBC(createStepName='RTJ STEP-1', localCsys=None, 
    name='BOLTRTJEDGE', region=
    mdb.models['Model-RTJ'].rootAssembly.sets['RTJBOLTEDGES'])
mdb.models['Model-RTJ'].YsymmBC(createStepName='RTJ STEP-1', localCsys=None, 
    name='RTJBOLTTOP', region=
    mdb.models['Model-RTJ'].rootAssembly.sets['RTJTOP'])
mdb.models['Model-RTJ'].boundaryConditions.changeKey(fromName='RTJBOLTTOP', 
    toName='RTJTOP')
mdb.models['Model-RTJ'].YsymmBC(createStepName='RTJ STEP-1', localCsys=None, 
    name='BOLTTOP', region=
    mdb.models['Model-RTJ'].rootAssembly.sets['bolttop'])
mdb.models['Model-RTJ'].ZsymmBC(createStepName='RTJ STEP-1', localCsys=None, 
    name='FLGGLOBAL', region=
    mdb.models['Model-RTJ'].rootAssembly.sets['flangeglobal'])
mdb.models['Model-RTJ'].rootAssembly.Surface(name='Surf-1', side1Faces=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    mask=('[#c8000 ]', ), )+\
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].faces.getSequenceFromMask(
    mask=('[#40 ]', ), ))
mdb.models['Model-RTJ'].Pressure(amplitude=UNSET, createStepName='RTJ STEP-1', 
    distributionType=UNIFORM, field='', magnitude=10.0, name='PRESSURE', 
    region=mdb.models['Model-RTJ'].rootAssembly.surfaces['Surf-1'])
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].rootAssembly.Surface(name='Surf-2', side2Faces=
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].faces.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-RTJ'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'RTJ STEP-1', datumAxis=
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].datums[1], 
    magnitude=115598.0, name='Load-2', region=
    mdb.models['Model-RTJ'].rootAssembly.surfaces['Surf-2'])
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-RTJ', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='FLANGERTJ', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '2317 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].sections['RTJ'].setValues(material='RTJ Gasket', 
    thickness=1.0)
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '2317 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].parts['FLANGE'].Set(cells=
    mdb.models['Model-RTJ'].parts['FLANGE'].cells.getSequenceFromMask(('[#3 ]', 
    ), ), name='Set-2')
mdb.models['Model-RTJ'].parts['FLANGE'].sectionAssignments[0].setValues(region=
    mdb.models['Model-RTJ'].parts['FLANGE'].sets['Set-2'])
mdb.models['Model-RTJ'].rootAssembly.regenerate()
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '604 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].parts['BOLT'].Set(cells=
    mdb.models['Model-RTJ'].parts['BOLT'].cells.getSequenceFromMask(('[#ff ]', 
    ), ), name='Set-2')
mdb.models['Model-RTJ'].parts['BOLT'].sectionAssignments[0].setValues(region=
    mdb.models['Model-RTJ'].parts['BOLT'].sets['Set-2'])
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].parts['BOLT'].regenerate()
mdb.models['Model-RTJ'].rootAssembly.regenerate()
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 11368, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 3 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 63.0})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov 18 13:40:03 2018', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 17932, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 3 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 94.0})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
del mdb.models['Model-RTJ'].materials['RTJ Gasket'].gasketMembraneElastic
del mdb.models['Model-RTJ'].materials['RTJ Gasket'].gasketTransverseShearElastic
mdb.models['Model-RTJ'].materials['RTJ Gasket'].elastic.setValues(table=((
    211400.0, 0.293), ))
mdb.models['Model-RTJ'].materials['RTJ Gasket'].Plastic(table=((235.0, 0.0), ))
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 5844, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 3 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 94.0})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].boundaryConditions['BOLTTOP'].setValues(typeName=
    PINNED)
mdb.models['Model-RTJ'].boundaryConditions['RTJTOP'].setValues(typeName=PINNED)
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 20920, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 3 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 94.0})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].boundaryConditions['BOLTTOP'].setValues(localCsys=
    mdb.models['Model-RTJ'].rootAssembly.datums[104], typeName=ZSYMM)
mdb.models['Model-RTJ'].boundaryConditions['BOLTRTJEDGE'].setValues(localCsys=
    mdb.models['Model-RTJ'].rootAssembly.datums[104])
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 22128, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 3 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 94.0})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].boundaryConditions['BOLTRTJEDGE'].setValues(typeName=
    ZSYMM)
mdb.models['Model-RTJ'].boundaryConditions['RTJTOP'].setValues(typeName=YSYMM)
mdb.models['Model-RTJ'].boundaryConditions['BOLTTOP'].setValues(typeName=YSYMM)
mdb.models['Model-RTJ'].boundaryConditions['BOLTRTJEDGE'].setValues(typeName=
    YSYMM)
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 14720, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 3 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 94.0})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].boundaryConditions['BOLTTOP'].setValues(typeName=
    PINNED)
mdb.models['Model-RTJ'].boundaryConditions['BOLTRTJEDGE'].setValues(typeName=
    PINNED)
mdb.models['Model-RTJ'].boundaryConditions['RTJTOP'].setValues(typeName=PINNED)
mdb.models['Model-RTJ'].boundaryConditions.changeKey(fromName='GASKBOLTS1', 
    toName='GASKS1')
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 24924, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 3 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 63.0})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov 18 14:35:48 2018', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 22524, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 3 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 94.0})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].rootAssembly.Surface(name='CP-1-FLANGE-1', side1Faces=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    ('[#810 ]', ), ))
mdb.models['Model-RTJ'].rootAssembly.Surface(name='CP-1-BOLT-1', side1Faces=
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].faces.getSequenceFromMask(
    ('[#20008000 ]', ), ))
mdb.models['Model-RTJ'].rootAssembly.Surface(name='CP-2-FLANGE-1', side1Faces=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-RTJ'].rootAssembly.Surface(name='CP-2-BOLT-1', side1Faces=
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].faces.getSequenceFromMask(
    ('[#2020014 ]', ), ))
mdb.models['Model-RTJ'].rootAssembly.Surface(name='CP-3-FLANGE-1', side1Faces=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    ('[#1f00000 ]', ), ))
mdb.models['Model-RTJ'].rootAssembly.Surface(name='CP-3-RTJ-1', side1Faces=
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].faces.getSequenceFromMask(
    ('[#70 ]', ), ))
mdb.models['Model-RTJ'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    createStepName='Initial', enforcement=SURFACE_TO_SURFACE, 
    interactionProperty='IntProp-1', master=
    mdb.models['Model-RTJ'].rootAssembly.surfaces['CP-1-FLANGE-1'], name=
    'CP-1-FLANGE-1-BOLT-1', slave=
    mdb.models['Model-RTJ'].rootAssembly.surfaces['CP-1-BOLT-1'], sliding=
    FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-RTJ'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    createStepName='Initial', enforcement=SURFACE_TO_SURFACE, 
    interactionProperty='IntProp-1', master=
    mdb.models['Model-RTJ'].rootAssembly.surfaces['CP-2-FLANGE-1'], name=
    'CP-2-FLANGE-1-BOLT-1', slave=
    mdb.models['Model-RTJ'].rootAssembly.surfaces['CP-2-BOLT-1'], sliding=
    FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-RTJ'].SurfaceToSurfaceContactStd(adjustMethod=OVERCLOSED, 
    createStepName='Initial', enforcement=SURFACE_TO_SURFACE, 
    interactionProperty='IntProp-1', master=
    mdb.models['Model-RTJ'].rootAssembly.surfaces['CP-3-FLANGE-1'], name=
    'CP-3-FLANGE-1-RTJ-1', slave=
    mdb.models['Model-RTJ'].rootAssembly.surfaces['CP-3-RTJ-1'], sliding=FINITE
    , surfaceSmoothing=AUTOMATIC)
mdb.models['Model-RTJ'].interactions['CP-1-FLANGE-1-BOLT-1'].setValues(
    adjustMethod=NONE, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    thickness=ON)
mdb.models['Model-RTJ'].interactions['CP-2-FLANGE-1-BOLT-1'].setValues(
    adjustMethod=NONE, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    thickness=ON)
mdb.models['Model-RTJ'].interactions['CP-3-FLANGE-1-RTJ-1'].setValues(
    adjustMethod=NONE, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    thickness=ON, tied=OFF)
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SLAVE SURFACES ASSEMBLY_CP-1-BOLT-1 AND ASSEMBLY_CP-2-BOLT-1 INTERSECT EACH OTHER. THEY ARE PAIRED WITH MASTER SURFACES ASSEMBLY_CP-1-FLANGE-1 AND ASSEMBLY_CP-2-FLANGE-1 THAT ALSO INTERSECT EACH OTHER. IF BOTH PAIRS ARE *CONTACT PAIRs, THESE TWO PAIRS SHOULD NOT BE SIMULTANEOUSLY PRESENT IN A STEP BECAUSE OF POSSIBLE CONVERGENCE PROBLEMS; USE *MODEL CHANGE,TYPE=CONTACT PAIR TO REMOVE ONE OF THEM. IF BOTH ARE *TIE PAIRS, THE REDUNDANT TIES WILL BE REMOVED AUTOMATICALLY. IF ONE PAIR IS *TIE AND ANOTHER IS *CONTACT PAIR, REMOVE ONE OF THEM.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 23940, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 98.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.104 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.104 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.103 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.118 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.119 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.120 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.133 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.134 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.163 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.1 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.2 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.3 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.4 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.5 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.7 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.19 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2690 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 675 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.118 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1132 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 125 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0625, 'attempts': 3, 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0625, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.125, 'attempts': 1, 
    'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.125, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.104 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.105 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.118 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.19 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.32 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 60 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.104 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 30 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.103 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.104 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.1 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.4 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.34 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1996 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 316 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.125, 'attempts': ' 1U', 
    'timeIncrement': 0.09375, 'increment': 3, 'stepTime': 0.125, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.125, 'attempts': ' 2U', 
    'timeIncrement': 0.0234375, 'increment': 3, 'stepTime': 0.125, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 5, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.130859375, 
    'attempts': 3, 'timeIncrement': 0.005859375, 'increment': 3, 
    'stepTime': 0.130859375, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.13671875, 'attempts': 1, 
    'timeIncrement': 0.005859375, 'increment': 4, 'stepTime': 0.13671875, 
    'step': 1, 'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.13671875, 
    'attempts': ' 1U', 'timeIncrement': 0.005859375, 'increment': 5, 
    'stepTime': 0.13671875, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 6, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.13671875, 
    'attempts': ' 2U', 'timeIncrement': 0.00146484375, 'increment': 5, 
    'stepTime': 0.13671875, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 12, 
    'iterations': 12, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.1370849609375, 
    'attempts': 3, 'timeIncrement': 0.0003662109375, 'increment': 5, 
    'stepTime': 0.1370849609375, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.1370849609375, 
    'attempts': ' 1U', 'timeIncrement': 0.00054931640625, 'increment': 6, 
    'stepTime': 0.1370849609375, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 11, 'iterations': 16, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.137222290039063, 
    'attempts': 2, 'timeIncrement': 0.0001373291015625, 'increment': 6, 
    'stepTime': 0.137222290039063, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.137428283691406, 
    'attempts': 1, 'timeIncrement': 0.00020599365234375, 'increment': 7, 
    'stepTime': 0.137428283691406, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.137428283691406, 
    'attempts': ' 1U', 'timeIncrement': 0.000308990478515625, 'increment': 8, 
    'stepTime': 0.137428283691406, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.137505531311035, 
    'attempts': 2, 'timeIncrement': 7.72476196289063e-05, 'increment': 8, 
    'stepTime': 0.137505531311035, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.137505531311035, 
    'attempts': ' 1U', 'timeIncrement': 0.000115871429443359, 'increment': 9, 
    'stepTime': 0.137505531311035, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 11, 'iterations': 16, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.137534499168396, 
    'attempts': 2, 'timeIncrement': 2.89678573608398e-05, 'increment': 9, 
    'stepTime': 0.137534499168396, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.137577950954437, 
    'attempts': 1, 'timeIncrement': 4.34517860412598e-05, 'increment': 10, 
    'stepTime': 0.137577950954437, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.137643128633499, 
    'attempts': 1, 'timeIncrement': 6.51776790618896e-05, 'increment': 11, 
    'stepTime': 0.137643128633499, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.137643128633499, 
    'attempts': ' 1U', 'timeIncrement': 9.77665185928345e-05, 'increment': 12, 
    'stepTime': 0.137643128633499, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 5, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.137667570263147, 
    'attempts': 2, 'timeIncrement': 2.44416296482086e-05, 'increment': 12, 
    'stepTime': 0.137667570263147, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.13770423270762, 
    'attempts': 1, 'timeIncrement': 3.66624444723129e-05, 'increment': 13, 
    'stepTime': 0.13770423270762, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.137759226374328, 
    'attempts': 1, 'timeIncrement': 5.49936667084694e-05, 'increment': 14, 
    'stepTime': 0.137759226374328, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.137841716874391, 
    'attempts': 1, 'timeIncrement': 8.24905000627041e-05, 'increment': 15, 
    'stepTime': 0.137841716874391, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.137965452624485, 
    'attempts': 1, 'timeIncrement': 0.000123735750094056, 'increment': 16, 
    'stepTime': 0.137965452624485, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.138151056249626, 
    'attempts': 1, 'timeIncrement': 0.000185603625141084, 'increment': 17, 
    'stepTime': 0.138151056249626, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.138429461687338, 
    'attempts': 1, 'timeIncrement': 0.000278405437711626, 'increment': 18, 
    'stepTime': 0.138429461687338, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.138847069843905, 
    'attempts': 1, 'timeIncrement': 0.000417608156567439, 'increment': 19, 
    'stepTime': 0.138847069843905, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.139473482078756, 
    'attempts': 1, 'timeIncrement': 0.000626412234851159, 'increment': 20, 
    'stepTime': 0.139473482078756, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.140413100431033, 
    'attempts': 1, 'timeIncrement': 0.000939618352276739, 'increment': 21, 
    'stepTime': 0.140413100431033, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 22, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.141822527959448, 
    'attempts': 1, 'timeIncrement': 0.00140942752841511, 'increment': 22, 
    'stepTime': 0.141822527959448, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 23, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.143936669252071, 
    'attempts': 1, 'timeIncrement': 0.00211414129262266, 'increment': 23, 
    'stepTime': 0.143936669252071, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 24, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.147107881191005, 
    'attempts': 1, 'timeIncrement': 0.00317121193893399, 'increment': 24, 
    'stepTime': 0.147107881191005, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 25, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.151864699099406, 
    'attempts': 1, 'timeIncrement': 0.00475681790840099, 'increment': 25, 
    'stepTime': 0.151864699099406, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 26, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.158999925962007, 
    'attempts': 1, 'timeIncrement': 0.00713522686260148, 'increment': 26, 
    'stepTime': 0.158999925962007, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 27, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.169702766255909, 
    'attempts': 1, 'timeIncrement': 0.0107028402939022, 'increment': 27, 
    'stepTime': 0.169702766255909, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 28, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.185757026696763, 
    'attempts': 1, 'timeIncrement': 0.0160542604408533, 'increment': 28, 
    'stepTime': 0.185757026696763, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 29, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.209838417358043, 
    'attempts': 1, 'timeIncrement': 0.02408139066128, 'increment': 29, 
    'stepTime': 0.209838417358043, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 30, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.245960503349963, 
    'attempts': 1, 'timeIncrement': 0.03612208599192, 'increment': 30, 
    'stepTime': 0.245960503349963, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 31, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.282082589341883, 
    'attempts': 1, 'timeIncrement': 0.03612208599192, 'increment': 31, 
    'stepTime': 0.282082589341883, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 32, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.318204675333803, 
    'attempts': 1, 'timeIncrement': 0.03612208599192, 'increment': 32, 
    'stepTime': 0.318204675333803, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 33, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.354326761325723, 
    'attempts': 1, 'timeIncrement': 0.03612208599192, 'increment': 33, 
    'stepTime': 0.354326761325723, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.354326761325723, 
    'attempts': ' 1U', 'timeIncrement': 0.03612208599192, 'increment': 34, 
    'stepTime': 0.354326761325723, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.354326761325723, 
    'attempts': ' 2U', 'timeIncrement': 0.00903052149798, 'increment': 34, 
    'stepTime': 0.354326761325723, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 34, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.356584391700218, 
    'attempts': 3, 'timeIncrement': 0.002257630374495, 'increment': 34, 
    'stepTime': 0.356584391700218, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 35, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.358842022074713, 
    'attempts': 1, 'timeIncrement': 0.002257630374495, 'increment': 35, 
    'stepTime': 0.358842022074713, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.358842022074713, 
    'attempts': ' 1U', 'timeIncrement': 0.0033864455617425, 'increment': 36, 
    'stepTime': 0.358842022074713, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 36, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.359688633465148, 
    'attempts': 2, 'timeIncrement': 0.000846611390435625, 'increment': 36, 
    'stepTime': 0.359688633465148, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 37, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.360958550550802, 
    'attempts': 1, 'timeIncrement': 0.00126991708565344, 'increment': 37, 
    'stepTime': 0.360958550550802, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.360958550550802, 
    'attempts': ' 1U', 'timeIncrement': 0.00190487562848016, 'increment': 38, 
    'stepTime': 0.360958550550802, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 38, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.361434769457922, 
    'attempts': 2, 'timeIncrement': 0.000476218907120039, 'increment': 38, 
    'stepTime': 0.361434769457922, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.361434769457922, 
    'attempts': ' 1U', 'timeIncrement': 0.000714328360680059, 'increment': 39, 
    'stepTime': 0.361434769457922, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 39, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.361613351548092, 
    'attempts': 2, 'timeIncrement': 0.000178582090170015, 'increment': 39, 
    'stepTime': 0.361613351548092, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 40, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.361881224683347, 
    'attempts': 1, 'timeIncrement': 0.000267873135255022, 'increment': 40, 
    'stepTime': 0.361881224683347, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.361881224683347, 
    'attempts': ' 1U', 'timeIncrement': 0.000401809702882533, 'increment': 41, 
    'stepTime': 0.361881224683347, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 41, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.361981677109068, 
    'attempts': 2, 'timeIncrement': 0.000100452425720633, 'increment': 41, 
    'stepTime': 0.361981677109068, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.361981677109068, 
    'attempts': ' 1U', 'timeIncrement': 0.00015067863858095, 'increment': 42, 
    'stepTime': 0.361981677109068, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 42, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.362019346768713, 
    'attempts': 2, 'timeIncrement': 3.76696596452375e-05, 'increment': 42, 
    'stepTime': 0.362019346768713, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 43, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.362075851258181, 
    'attempts': 1, 'timeIncrement': 5.65044894678562e-05, 'increment': 43, 
    'stepTime': 0.362075851258181, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 44, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.362160607992382, 
    'attempts': 1, 'timeIncrement': 8.47567342017843e-05, 'increment': 44, 
    'stepTime': 0.362160607992382, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.362160607992382, 
    'attempts': ' 1U', 'timeIncrement': 0.000127135101302676, 'increment': 45, 
    'stepTime': 0.362160607992382, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 45, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.362192391767708, 
    'attempts': 2, 'timeIncrement': 3.17837753256691e-05, 'increment': 45, 
    'stepTime': 0.362192391767708, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.362192391767708, 
    'attempts': ' 1U', 'timeIncrement': 4.76756629885037e-05, 'increment': 46, 
    'stepTime': 0.362192391767708, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.362192391767708, 
    'attempts': ' 2U', 'timeIncrement': 1.19189157471259e-05, 'increment': 46, 
    'stepTime': 0.362192391767708, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Time increment required is less than the minimum specified', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.362192391767708, 
    'attempts': ' 3U', 'timeIncrement': 1e-05, 'increment': 46, 
    'stepTime': 0.362192391767708, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 46, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.362192391767708, 
    'attempts': 4, 'timeIncrement': 1e-35, 'increment': 46, 
    'stepTime': 0.362192391767708, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].interactions['CP-2-FLANGE-1-BOLT-1'].suppress()
mdb.models['Model-RTJ'].interactions['CP-3-FLANGE-1-RTJ-1'].setValues(
    adjustMethod=OVERCLOSED, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    thickness=ON, tied=OFF)
mdb.models['Model-RTJ'].interactions['CP-1-FLANGE-1-BOLT-1'].setValues(
    adjustMethod=OVERCLOSED, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    thickness=ON, tied=OFF)
mdb.models['Model-RTJ'].boundaryConditions['BOLTRTJEDGE'].setValues(typeName=
    YSYMM)
mdb.models['Model-RTJ'].boundaryConditions['BOLTTOP'].setValues(typeName=YSYMM)
mdb.models['Model-RTJ'].boundaryConditions['RTJTOP'].setValues(typeName=YSYMM)
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 16840, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 98.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.104 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.105 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.32 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.104 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 24 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.103 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.104 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.118 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.1 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.2 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.3 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.4 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.19 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.34 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2729 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 1352 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.104 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.104 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.118 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.2 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.3 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.19 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 314 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 8 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0625, 'attempts': 3, 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0625, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.104 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.104 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.104 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0625, 'attempts': ' 1U', 
    'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.0625, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 6, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Warning message limit reached. No further warning messages will be reported.\nPlease see the dat file for more warnings.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.078125, 'attempts': 2, 
    'timeIncrement': 0.015625, 'increment': 2, 'stepTime': 0.078125, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.1015625, 'attempts': 1, 
    'timeIncrement': 0.0234375, 'increment': 3, 'stepTime': 0.1015625, 
    'step': 1, 'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.13671875, 'attempts': 1, 
    'timeIncrement': 0.03515625, 'increment': 4, 'stepTime': 0.13671875, 
    'step': 1, 'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.189453125, 
    'attempts': 1, 'timeIncrement': 0.052734375, 'increment': 5, 
    'stepTime': 0.189453125, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.2685546875, 
    'attempts': 1, 'timeIncrement': 0.0791015625, 'increment': 6, 
    'stepTime': 0.2685546875, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.2685546875, 
    'attempts': ' 1U', 'timeIncrement': 0.0791015625, 'increment': 7, 
    'stepTime': 0.2685546875, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 4, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.2685546875, 
    'attempts': ' 2U', 'timeIncrement': 0.019775390625, 'increment': 7, 
    'stepTime': 0.2685546875, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 6, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.27349853515625, 
    'attempts': 3, 'timeIncrement': 0.00494384765625, 'increment': 7, 
    'stepTime': 0.27349853515625, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.2784423828125, 
    'attempts': 1, 'timeIncrement': 0.00494384765625, 'increment': 8, 
    'stepTime': 0.2784423828125, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.285858154296875, 
    'attempts': 1, 'timeIncrement': 0.007415771484375, 'increment': 9, 
    'stepTime': 0.285858154296875, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.296981811523438, 
    'attempts': 1, 'timeIncrement': 0.0111236572265625, 'increment': 10, 
    'stepTime': 0.296981811523438, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.30810546875, 
    'attempts': 1, 'timeIncrement': 0.0111236572265625, 'increment': 11, 
    'stepTime': 0.30810546875, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.319229125976563, 
    'attempts': 1, 'timeIncrement': 0.0111236572265625, 'increment': 12, 
    'stepTime': 0.319229125976563, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.319229125976563, 
    'attempts': ' 1U', 'timeIncrement': 0.0166854858398438, 'increment': 13, 
    'stepTime': 0.319229125976563, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.323400497436523, 
    'attempts': 2, 'timeIncrement': 0.00417137145996094, 'increment': 13, 
    'stepTime': 0.323400497436523, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.323400497436523, 
    'attempts': ' 1U', 'timeIncrement': 0.00625705718994141, 'increment': 14, 
    'stepTime': 0.323400497436523, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.324964761734009, 
    'attempts': 2, 'timeIncrement': 0.00156426429748535, 'increment': 14, 
    'stepTime': 0.324964761734009, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.327311158180237, 
    'attempts': 1, 'timeIncrement': 0.00234639644622803, 'increment': 15, 
    'stepTime': 0.327311158180237, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.327311158180237, 
    'attempts': ' 1U', 'timeIncrement': 0.00351959466934204, 'increment': 16, 
    'stepTime': 0.327311158180237, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 9, 'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.327311158180237, 
    'attempts': ' 2U', 'timeIncrement': 0.00087989866733551, 'increment': 16, 
    'stepTime': 0.327311158180237, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.327531132847071, 
    'attempts': 3, 'timeIncrement': 0.000219974666833878, 'increment': 16, 
    'stepTime': 0.327531132847071, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.327861094847322, 
    'attempts': 1, 'timeIncrement': 0.000329962000250816, 'increment': 17, 
    'stepTime': 0.327861094847322, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.327861094847322, 
    'attempts': ' 1U', 'timeIncrement': 0.000494943000376225, 'increment': 18, 
    'stepTime': 0.327861094847322, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 8, 'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.327861094847322, 
    'attempts': ' 2U', 'timeIncrement': 0.000123735750094056, 'increment': 18, 
    'stepTime': 0.327861094847322, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.327892028784845, 
    'attempts': 3, 'timeIncrement': 3.0933937523514e-05, 'increment': 18, 
    'stepTime': 0.327892028784845, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.327922962722369, 
    'attempts': 1, 'timeIncrement': 3.0933937523514e-05, 'increment': 19, 
    'stepTime': 0.327922962722369, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.327953896659892, 
    'attempts': 1, 'timeIncrement': 3.0933937523514e-05, 'increment': 20, 
    'stepTime': 0.327953896659892, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.327953896659892, 
    'attempts': ' 1U', 'timeIncrement': 4.6400906285271e-05, 'increment': 21, 
    'stepTime': 0.327953896659892, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.327965496886463, 
    'attempts': 2, 'timeIncrement': 1.16002265713178e-05, 'increment': 21, 
    'stepTime': 0.327965496886463, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 22, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.32798289722632, 
    'attempts': 1, 'timeIncrement': 1.74003398569766e-05, 'increment': 22, 
    'stepTime': 0.32798289722632, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 23, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.328008997736106, 
    'attempts': 1, 'timeIncrement': 2.6100509785465e-05, 'increment': 23, 
    'stepTime': 0.328008997736106, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 24, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.328048148500784, 
    'attempts': 1, 'timeIncrement': 3.91507646781974e-05, 'increment': 24, 
    'stepTime': 0.328048148500784, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 25, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.328106874647801, 
    'attempts': 1, 'timeIncrement': 5.87261470172962e-05, 'increment': 25, 
    'stepTime': 0.328106874647801, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.328106874647801, 
    'attempts': ' 1U', 'timeIncrement': 8.80892205259443e-05, 'increment': 26, 
    'stepTime': 0.328106874647801, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 26, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.328128896952933, 
    'attempts': 2, 'timeIncrement': 2.20223051314861e-05, 'increment': 26, 
    'stepTime': 0.328128896952933, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 27, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.32816193041063, 
    'attempts': 1, 'timeIncrement': 3.30334576972291e-05, 'increment': 27, 
    'stepTime': 0.32816193041063, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.32816193041063, 
    'attempts': ' 1U', 'timeIncrement': 4.95501865458436e-05, 'increment': 28, 
    'stepTime': 0.32816193041063, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 28, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.328174317957266, 
    'attempts': 2, 'timeIncrement': 1.23875466364609e-05, 'increment': 28, 
    'stepTime': 0.328174317957266, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 29, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.328192899277221, 
    'attempts': 1, 'timeIncrement': 1.85813199546914e-05, 'increment': 29, 
    'stepTime': 0.328192899277221, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 30, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.328220771257153, 
    'attempts': 1, 'timeIncrement': 2.78719799320371e-05, 'increment': 30, 
    'stepTime': 0.328220771257153, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 31, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.328262579227051, 
    'attempts': 1, 'timeIncrement': 4.18079698980556e-05, 'increment': 31, 
    'stepTime': 0.328262579227051, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 32, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.328325291181898, 
    'attempts': 1, 'timeIncrement': 6.27119548470834e-05, 'increment': 32, 
    'stepTime': 0.328325291181898, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 33, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.328419359114169, 
    'attempts': 1, 'timeIncrement': 9.4067932270625e-05, 'increment': 33, 
    'stepTime': 0.328419359114169, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 34, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.328560461012575, 
    'attempts': 1, 'timeIncrement': 0.000141101898405938, 'increment': 34, 
    'stepTime': 0.328560461012575, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 35, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.328772113860184, 
    'attempts': 1, 'timeIncrement': 0.000211652847608906, 'increment': 35, 
    'stepTime': 0.328772113860184, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 36, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.329089593131597, 
    'attempts': 1, 'timeIncrement': 0.00031747927141336, 'increment': 36, 
    'stepTime': 0.329089593131597, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 37, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.329565812038717, 
    'attempts': 1, 'timeIncrement': 0.000476218907120039, 'increment': 37, 
    'stepTime': 0.329565812038717, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 38, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.330280140399397, 
    'attempts': 1, 'timeIncrement': 0.000714328360680059, 'increment': 38, 
    'stepTime': 0.330280140399397, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 39, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.331351632940417, 
    'attempts': 1, 'timeIncrement': 0.00107149254102009, 'increment': 39, 
    'stepTime': 0.331351632940417, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 40, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.332958871751947, 
    'attempts': 1, 'timeIncrement': 0.00160723881153013, 'increment': 40, 
    'stepTime': 0.332958871751947, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 41, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.335369729969243, 
    'attempts': 1, 'timeIncrement': 0.0024108582172952, 'increment': 41, 
    'stepTime': 0.335369729969243, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 42, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.338986017295185, 
    'attempts': 1, 'timeIncrement': 0.0036162873259428, 'increment': 42, 
    'stepTime': 0.338986017295185, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 43, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.3444104482841, 
    'attempts': 1, 'timeIncrement': 0.0054244309889142, 'increment': 43, 
    'stepTime': 0.3444104482841, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 44, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.352547094767471, 
    'attempts': 1, 'timeIncrement': 0.0081366464833713, 'increment': 44, 
    'stepTime': 0.352547094767471, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 45, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.364752064492528, 
    'attempts': 1, 'timeIncrement': 0.0122049697250569, 'increment': 45, 
    'stepTime': 0.364752064492528, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 46, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.383059519080113, 
    'attempts': 1, 'timeIncrement': 0.0183074545875854, 'increment': 46, 
    'stepTime': 0.383059519080113, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 47, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.410520700961492, 
    'attempts': 1, 'timeIncrement': 0.0274611818813781, 'increment': 47, 
    'stepTime': 0.410520700961492, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.410520700961492, 
    'attempts': ' 1U', 'timeIncrement': 0.0411917728220672, 'increment': 48, 
    'stepTime': 0.410520700961492, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 48, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.420818644167008, 
    'attempts': 2, 'timeIncrement': 0.0102979432055168, 'increment': 48, 
    'stepTime': 0.420818644167008, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 49, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.436265558975284, 
    'attempts': 1, 'timeIncrement': 0.0154469148082752, 'increment': 49, 
    'stepTime': 0.436265558975284, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 50, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.459435931187696, 
    'attempts': 1, 'timeIncrement': 0.0231703722124128, 'increment': 50, 
    'stepTime': 0.459435931187696, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 51, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.482606303400109, 
    'attempts': 1, 'timeIncrement': 0.0231703722124128, 'increment': 51, 
    'stepTime': 0.482606303400109, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.482606303400109, 
    'attempts': ' 1U', 'timeIncrement': 0.0231703722124128, 'increment': 52, 
    'stepTime': 0.482606303400109, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 52, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.488398896453212, 
    'attempts': 2, 'timeIncrement': 0.0057925930531032, 'increment': 52, 
    'stepTime': 0.488398896453212, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 53, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.497087786032867, 
    'attempts': 1, 'timeIncrement': 0.0086888895796548, 'increment': 53, 
    'stepTime': 0.497087786032867, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.497087786032867, 
    'attempts': ' 1U', 'timeIncrement': 0.0130333343694822, 'increment': 54, 
    'stepTime': 0.497087786032867, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 12, 'iterations': 13, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 54, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.500346119625238, 
    'attempts': 2, 'timeIncrement': 0.00325833359237055, 'increment': 54, 
    'stepTime': 0.500346119625238, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.500346119625238, 
    'attempts': ' 1U', 'timeIncrement': 0.00488750038855582, 'increment': 55, 
    'stepTime': 0.500346119625238, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 55, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.501567994722377, 
    'attempts': 2, 'timeIncrement': 0.00122187509713896, 'increment': 55, 
    'stepTime': 0.501567994722377, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.501567994722377, 
    'attempts': ' 1U', 'timeIncrement': 0.00183281264570843, 'increment': 56, 
    'stepTime': 0.501567994722377, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 56, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.502026197883804, 
    'attempts': 2, 'timeIncrement': 0.000458203161427109, 'increment': 56, 
    'stepTime': 0.502026197883804, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.502026197883804, 
    'attempts': ' 1U', 'timeIncrement': 0.000687304742140663, 'increment': 57, 
    'stepTime': 0.502026197883804, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 57, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.502198024069339, 
    'attempts': 2, 'timeIncrement': 0.000171826185535166, 'increment': 57, 
    'stepTime': 0.502198024069339, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 58, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.502455763347642, 
    'attempts': 1, 'timeIncrement': 0.000257739278302749, 'increment': 58, 
    'stepTime': 0.502455763347642, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 59, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.502842372265096, 
    'attempts': 1, 'timeIncrement': 0.000386608917454123, 'increment': 59, 
    'stepTime': 0.502842372265096, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 60, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.503422285641277, 
    'attempts': 1, 'timeIncrement': 0.000579913376181184, 'increment': 60, 
    'stepTime': 0.503422285641277, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 61, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.504292155705549, 
    'attempts': 1, 'timeIncrement': 0.000869870064271776, 'increment': 61, 
    'stepTime': 0.504292155705549, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 62, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.505596960801956, 
    'attempts': 1, 'timeIncrement': 0.00130480509640766, 'increment': 62, 
    'stepTime': 0.505596960801956, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 63, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.507554168446568, 
    'attempts': 1, 'timeIncrement': 0.0019572076446115, 'increment': 63, 
    'stepTime': 0.507554168446568, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 64, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.510489979913485, 
    'attempts': 1, 'timeIncrement': 0.00293581146691724, 'increment': 64, 
    'stepTime': 0.510489979913485, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 65, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.514893697113861, 
    'attempts': 1, 'timeIncrement': 0.00440371720037587, 'increment': 65, 
    'stepTime': 0.514893697113861, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 66, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.521499272914425, 
    'attempts': 1, 'timeIncrement': 0.0066055758005638, 'increment': 66, 
    'stepTime': 0.521499272914425, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 67, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.53140763661527, 
    'attempts': 1, 'timeIncrement': 0.0099083637008457, 'increment': 67, 
    'stepTime': 0.53140763661527, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 68, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.546270182166539, 
    'attempts': 1, 'timeIncrement': 0.0148625455512686, 'increment': 68, 
    'stepTime': 0.546270182166539, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.546270182166539, 
    'attempts': ' 1U', 'timeIncrement': 0.0222938183269028, 'increment': 69, 
    'stepTime': 0.546270182166539, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 69, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.551843636748265, 
    'attempts': 2, 'timeIncrement': 0.00557345458172571, 'increment': 69, 
    'stepTime': 0.551843636748265, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 70, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.560203818620853, 
    'attempts': 1, 'timeIncrement': 0.00836018187258856, 'increment': 70, 
    'stepTime': 0.560203818620853, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 71, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.572744091429736, 
    'attempts': 1, 'timeIncrement': 0.0125402728088828, 'increment': 71, 
    'stepTime': 0.572744091429736, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 72, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.59155450064306, 
    'attempts': 1, 'timeIncrement': 0.0188104092133243, 'increment': 72, 
    'stepTime': 0.59155450064306, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 73, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.619770114463047, 
    'attempts': 1, 'timeIncrement': 0.0282156138199864, 'increment': 73, 
    'stepTime': 0.619770114463047, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.619770114463047, 
    'attempts': ' 1U', 'timeIncrement': 0.0423234207299796, 'increment': 74, 
    'stepTime': 0.619770114463047, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 74, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.630350969645541, 
    'attempts': 2, 'timeIncrement': 0.0105808551824949, 'increment': 74, 
    'stepTime': 0.630350969645541, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.630350969645541, 
    'attempts': ' 1U', 'timeIncrement': 0.0158712827737423, 'increment': 75, 
    'stepTime': 0.630350969645541, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 7, 'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 75, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.634318790338977, 
    'attempts': 2, 'timeIncrement': 0.00396782069343559, 'increment': 75, 
    'stepTime': 0.634318790338977, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 76, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.64027052137913, 
    'attempts': 1, 'timeIncrement': 0.00595173104015338, 'increment': 76, 
    'stepTime': 0.64027052137913, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.64027052137913, 
    'attempts': ' 1U', 'timeIncrement': 0.00892759656023007, 'increment': 77, 
    'stepTime': 0.64027052137913, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 77, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.642502420519188, 
    'attempts': 2, 'timeIncrement': 0.00223189914005752, 'increment': 77, 
    'stepTime': 0.642502420519188, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.642502420519188, 
    'attempts': ' 1U', 'timeIncrement': 0.00334784871008628, 'increment': 78, 
    'stepTime': 0.642502420519188, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 78, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.64333938269671, 
    'attempts': 2, 'timeIncrement': 0.000836962177521569, 'increment': 78, 
    'stepTime': 0.64333938269671, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 79, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.644594825962992, 
    'attempts': 1, 'timeIncrement': 0.00125544326628235, 'increment': 79, 
    'stepTime': 0.644594825962992, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.644594825962992, 
    'attempts': ' 1U', 'timeIncrement': 0.00188316489942353, 'increment': 80, 
    'stepTime': 0.644594825962992, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 5, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 80, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.645065617187848, 
    'attempts': 2, 'timeIncrement': 0.000470791224855883, 'increment': 80, 
    'stepTime': 0.645065617187848, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.645065617187848, 
    'attempts': ' 1U', 'timeIncrement': 0.000706186837283824, 'increment': 81, 
    'stepTime': 0.645065617187848, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 11, 'iterations': 16, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 81, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.645242163897169, 
    'attempts': 2, 'timeIncrement': 0.000176546709320956, 'increment': 81, 
    'stepTime': 0.645242163897169, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 82, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.64550698396115, 
    'attempts': 1, 'timeIncrement': 0.000264820063981434, 'increment': 82, 
    'stepTime': 0.64550698396115, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 83, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.645904214057122, 
    'attempts': 1, 'timeIncrement': 0.000397230095972151, 'increment': 83, 
    'stepTime': 0.645904214057122, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 84, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.646500059201081, 
    'attempts': 1, 'timeIncrement': 0.000595845143958226, 'increment': 84, 
    'stepTime': 0.646500059201081, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 85, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.647393826917018, 
    'attempts': 1, 'timeIncrement': 0.00089376771593734, 'increment': 85, 
    'stepTime': 0.647393826917018, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 86, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.648734478490924, 
    'attempts': 1, 'timeIncrement': 0.00134065157390601, 'increment': 86, 
    'stepTime': 0.648734478490924, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 87, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.650745455851783, 
    'attempts': 1, 'timeIncrement': 0.00201097736085901, 'increment': 87, 
    'stepTime': 0.650745455851783, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 88, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.653761921893071, 
    'attempts': 1, 'timeIncrement': 0.00301646604128852, 'increment': 88, 
    'stepTime': 0.653761921893071, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 89, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.658286620955004, 
    'attempts': 1, 'timeIncrement': 0.00452469906193278, 'increment': 89, 
    'stepTime': 0.658286620955004, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 90, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.665073669547903, 
    'attempts': 1, 'timeIncrement': 0.00678704859289917, 'increment': 90, 
    'stepTime': 0.665073669547903, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.665073669547903, 
    'attempts': ' 1U', 'timeIncrement': 0.0101805728893488, 'increment': 91, 
    'stepTime': 0.665073669547903, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 91, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.667618812770241, 
    'attempts': 2, 'timeIncrement': 0.00254514322233719, 'increment': 91, 
    'stepTime': 0.667618812770241, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 92, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.671436527603746, 
    'attempts': 1, 'timeIncrement': 0.00381771483350579, 'increment': 92, 
    'stepTime': 0.671436527603746, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 93, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.677163099854005, 
    'attempts': 1, 'timeIncrement': 0.00572657225025868, 'increment': 93, 
    'stepTime': 0.677163099854005, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.677163099854005, 
    'attempts': ' 1U', 'timeIncrement': 0.00858985837538802, 'increment': 94, 
    'stepTime': 0.677163099854005, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 11, 'iterations': 16, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 94, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.679310564447852, 
    'attempts': 2, 'timeIncrement': 0.002147464593847, 'increment': 94, 
    'stepTime': 0.679310564447852, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 95, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.682531761338622, 
    'attempts': 1, 'timeIncrement': 0.00322119689077051, 'increment': 95, 
    'stepTime': 0.682531761338622, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 96, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.687363556674778, 
    'attempts': 1, 'timeIncrement': 0.00483179533615576, 'increment': 96, 
    'stepTime': 0.687363556674778, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 97, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.694611249679012, 
    'attempts': 1, 'timeIncrement': 0.00724769300423364, 'increment': 97, 
    'stepTime': 0.694611249679012, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 98, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.705482789185362, 
    'attempts': 1, 'timeIncrement': 0.0108715395063505, 'increment': 98, 
    'stepTime': 0.705482789185362, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 99, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.721790098444888, 
    'attempts': 1, 'timeIncrement': 0.0163073092595257, 'increment': 99, 
    'stepTime': 0.721790098444888, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 100, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.746251062334177, 
    'attempts': 1, 'timeIncrement': 0.0244609638892885, 'increment': 100, 
    'stepTime': 0.746251062334177, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many increments needed to complete the step', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    formulation=ROUGH)
mdb.models['Model-RTJ'].interactionProperties['IntProp-1'].normalBehavior.setValues(
    allowSeparation=ON, clearanceAtZeroContactPressure=0.0, 
    constraintEnforcementMethod=PENALTY, contactStiffness=DEFAULT, 
    contactStiffnessScaleFactor=1.0, pressureOverclosure=HARD, 
    stiffnessBehavior=LINEAR)
mdb.models['Model-RTJ'].interactions['CP-1-FLANGE-1-BOLT-1'].setValues(
    adjustMethod=NONE, bondingSet=None, contactTracking=TWO_CONFIG, 
    enforcement=SURFACE_TO_SURFACE, initialClearance=OMIT, sliding=FINITE, 
    surfaceSmoothing=NONE, thickness=ON, tied=OFF)
mdb.models['Model-RTJ'].interactions['CP-3-FLANGE-1-RTJ-1'].setValues(
    adjustMethod=NONE, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    surfaceSmoothing=NONE, thickness=ON, tied=OFF)
mdb.models['Model-RTJ'].interactions['CP-3-FLANGE-1-RTJ-1'].swapSurfaces()
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '*FRICTION,LAGRANGE OR *FRICTION,ROUGH MAY CAUSE CONVERGENCE DIFFICULTY WHEN USED IN CONJUNCTION WITH THE *SURFACE BEHAVIOR, AUGMENTED LAGRANGE OR PENALTY OPTION. USE PENALTY FRICTION INSTEAD.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'PLEASE MAKE SURE THAT THE MESH DENSITY OF THE SLAVE SURFACE IN THE CONTACT PAIR (ASSEMBLY_CP-3-FLANGE-1,ASSEMBLY_CP-3-RTJ-1) IS FINER THAN THE MASTER SURFACE.  THE ANALYSIS MAY RUN SLOWER, MAY YIELD INACCURATE RESULTS, AND MAY REQUIRE MORE MEMORY IF THIS IS NOT THE CASE.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 6856, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 96.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].interactions['CP-1-FLANGE-1-BOLT-1'].setValues(
    adjustMethod=NONE, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    thickness=ON)
mdb.models['Model-RTJ'].interactions['CP-3-FLANGE-1-RTJ-1'].setValues(
    adjustMethod=NONE, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    surfaceSmoothing=AUTOMATIC, thickness=ON)
mdb.models['Model-RTJ'].interactions['CP-1-FLANGE-1-BOLT-1'].setValues(
    adjustMethod=NONE, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    surfaceSmoothing=AUTOMATIC, thickness=ON)
mdb.models['Model-RTJ'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.3, ), ), temperatureDependency=OFF)
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'PLEASE MAKE SURE THAT THE MESH DENSITY OF THE SLAVE SURFACE IN THE CONTACT PAIR (ASSEMBLY_CP-3-FLANGE-1,ASSEMBLY_CP-3-RTJ-1) IS FINER THAN THE MASTER SURFACE.  THE ANALYSIS MAY RUN SLOWER, MAY YIELD INACCURATE RESULTS, AND MAY REQUIRE MORE MEMORY IF THIS IS NOT THE CASE.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 10736, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 154.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2730 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 2730 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2730 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 2730 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2730 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 2730 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2730 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 2730 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2730 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 2730 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].interactions['CP-3-FLANGE-1-RTJ-1'].setValues(
    adjustMethod=NONE, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    thickness=ON)
mdb.models['Model-RTJ'].interactions['CP-3-FLANGE-1-RTJ-1'].swapSurfaces()
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 15972, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 154.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2730 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2730 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 207 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2434 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2659 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 172 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2396 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2713 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 35 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 62 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 456 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2179 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 235 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 60 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 329 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].materials['RTJ Gasket'].plastic.setValues(table=((
    525.0, 0.0), ))
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 5036, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 154.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2646 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 1 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1572 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2173 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2704 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 702 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 693 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2606 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 3 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 359 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1866 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 329 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 120 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
del mdb.models['Model-RTJ'].materials['RTJ Gasket'].plastic
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 1824, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 154.0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 6, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov 18 15:06:06 2018', 'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].boundaryConditions['RTJTOP'].setValues(typeName=PINNED)
mdb.models['Model-RTJ'].boundaryConditions['BOLTTOP'].setValues(typeName=
    PINNED)
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 22780, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 154.0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 5, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov 18 15:09:21 2018', 'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].interactions['CP-1-FLANGE-1-BOLT-1'].setValues(
    adjustMethod=OVERCLOSED, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    thickness=ON, tied=OFF)
mdb.models['Model-RTJ'].interactions['CP-3-FLANGE-1-RTJ-1'].setValues(
    adjustMethod=OVERCLOSED, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    thickness=ON, tied=OFF)
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 13480, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 155.0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov 18 15:12:06 2018', 'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].interactions['CP-2-FLANGE-1-BOLT-1'].resume()
del mdb.models['Model-RTJ'].interactions['CP-2-FLANGE-1-BOLT-1']
mdb.models['Model-RTJ'].loads.changeKey(fromName='Load-2', toName='BOLTLOAD')
mdb.models['Model-RF'].boundaryConditions['BC-1'].setValues(typeName=PINNED)
mdb.models['Model-RF'].boundaryConditions['BC-5'].setValues(typeName=PINNED)
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 11136, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 195.0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 19 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 1 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0625, 'attempts': 3, 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0625, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.125, 'attempts': 1, 
    'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.125, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.21875, 'attempts': 1, 
    'timeIncrement': 0.09375, 'increment': 3, 'stepTime': 0.21875, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.359375, 'attempts': 1, 
    'timeIncrement': 0.140625, 'increment': 4, 'stepTime': 0.359375, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.5703125, 'attempts': 1, 
    'timeIncrement': 0.2109375, 'increment': 5, 'stepTime': 0.5703125, 
    'step': 1, 'jobName': 'FlangeRF', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.88671875, 'attempts': 1, 
    'timeIncrement': 0.31640625, 'increment': 6, 'stepTime': 0.88671875, 
    'step': 1, 'jobName': 'FlangeRF', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.11328125, 'increment': 7, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov 18 15:29:29 2018', 'jobName': 'FlangeRF'})
mdb.models['Model-RTJ'].parts['RTJ'].deleteMesh()
mdb.models['Model-RTJ'].parts['RTJ'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.5)
mdb.models['Model-RTJ'].parts['RTJ'].generateMesh()
mdb.models['Model-RTJ'].rootAssembly.regenerate()
mdb.models['Model-RTJ'].rootAssembly.Set(name='RTJTOP', nodes=
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].nodes.getSequenceFromMask(
    mask=('[#0:8 #fffc0000 #ffffffff #fffc1fff #ffffffff #1fff #0:143', 
    ' #ffffc000 #ffffffff:38 #1f ]', ), ))
mdb.models['Model-RTJ'].rootAssembly.Set(name='RTJS1', nodes=
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].nodes.getSequenceFromMask(
    mask=('[#c0 #0:11 #ffffe000 #3 ]', ), ))
mdb.models['Model-RTJ'].interactions['CP-3-FLANGE-1-RTJ-1'].suppress()
mdb.models['Model-RTJ'].interactions['CP-3-FLANGE-1-RTJ-1'].resume()
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
#* Academic Teaching license is restricted to 20000 nodes.
#* Academic Teaching license is restricted to 20000 nodes.
#* Academic Teaching license is restricted to 20000 nodes.
mdb.models['Model-RTJ'].parts['RTJ'].deleteMesh()
mdb.models['Model-RTJ'].parts['RTJ'].seedPart(deviationFactor=0.01, 
    minSizeFactor=0.1, size=0.8)
mdb.models['Model-RTJ'].parts['RTJ'].generateMesh()
mdb.models['Model-RTJ'].parts['RTJ'].deleteMesh()
mdb.models['Model-RTJ'].parts['RTJ'].seedPart(deviationFactor=0.01, 
    minSizeFactor=0.1, size=0.5)
mdb.models['Model-RTJ'].parts['RTJ'].seedPart(deviationFactor=0.01, 
    minSizeFactor=0.1, size=0.6)
mdb.models['Model-RTJ'].parts['RTJ'].generateMesh()
mdb.models['Model-RF'].loads.changeKey(fromName='Load-2', toName='BOLTLOAD')
mdb.models['Model-RTJ'].rootAssembly.regenerate()
mdb.models['Model-RTJ'].rootAssembly.Surface(name='Surf-9', side2Faces=
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].faces.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-RTJ'].loads['BOLTLOAD'].setValues(region=
    mdb.models['Model-RTJ'].rootAssembly.surfaces['Surf-9'])
mdb.models['Model-RTJ'].rootAssembly.Set(name='RTJS1', nodes=
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].nodes.getSequenceFromMask(
    mask=('[#c0 #0:9 #fc000000 #fff ]', ), ))
mdb.models['Model-RTJ'].rootAssembly.Set(name='RTJTOP', nodes=
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].nodes.getSequenceFromMask(
    mask=('[#f0 #0:5 #f0000000 #ffc03fff #ffffffff #fffffc3f #ffffffff', 
    ' #fff #0:113 #fffff000 #ffffffff:26 #fff ]', ), ))
mdb.models['Model-RTJ'].rootAssembly.Set(name='RTJTOP', nodes=
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].nodes.getSequenceFromMask(
    mask=('[#0:7 #ffc00000 #ffffffff #fffffc3f #3ffffff #0:114 #fffff000', 
    ' #ffffffff:26 #fff ]', ), ))
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
#* Academic Teaching license is restricted to 20000 nodes.
#* Academic Teaching license is restricted to 20000 nodes.
#* Academic Teaching license is restricted to 20000 nodes.
mdb.models['Model-RTJ'].parts['RTJ'].deleteMesh()
mdb.models['Model-RTJ'].parts['RTJ'].seedPart(deviationFactor=0.01, 
    minSizeFactor=0.1, size=0.7)
mdb.models['Model-RTJ'].parts['RTJ'].generateMesh()
mdb.models['Model-RTJ'].rootAssembly.regenerate()
mdb.models['Model-RTJ'].rootAssembly.Set(name='RTJS1', nodes=
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].nodes.getSequenceFromMask(
    mask=('[#c0 #0:8 #f8000000 #3ff ]', ), ))
mdb.models['Model-RTJ'].rootAssembly.Set(name='RTJTOP', nodes=
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].nodes.getSequenceFromMask(
    mask=('[#f0 #0:5 #7fff000 #fffffff8 #fffe1fff #ffffffff #3ff', 
    ' #0:96 #f0000000 #ffffffff:19 #3ffff ]', ), ))
mdb.models['Model-RTJ'].rootAssembly.Set(name='RTJTOP', nodes=
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].nodes.getSequenceFromMask(
    mask=('[#0:7 #fffffff8 #fffe1fff #7ffffff #0:97 #f0000000 #ffffffff:19', 
    ' #3ffff ]', ), ))
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-3-RTJ-1-ASSEMBLY_CP-3-FLANGE-1), NOT ALL THE NODES THAT HAVE BEEN ADJUSTED WERE PRINTED. SPECIFY *PREPRINT,CONTACT=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 21332, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 1722.0})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov 18 15:49:15 2018', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-3-RTJ-1-ASSEMBLY_CP-3-FLANGE-1), NOT ALL THE NODES THAT HAVE BEEN ADJUSTED WERE PRINTED. SPECIFY *PREPRINT,CONTACT=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 4304, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 693.0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov 18 15:49:59 2018', 'jobName': 'FLANGERTJ'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RF'].rootAssembly.ReferencePoint(point=(0.0, -222.25, 0.0))
mdb.models['Model-RF'].rootAssembly.WirePolyLine(mergeType=IMPRINT, meshable=
    OFF, points=((
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].vertices[4], 
    mdb.models['Model-RF'].rootAssembly.referencePoints[137]), (
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].vertices[5], 
    mdb.models['Model-RF'].rootAssembly.referencePoints[137]), (
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].vertices[0], 
    mdb.models['Model-RF'].rootAssembly.referencePoints[137]), (
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].vertices[3], 
    mdb.models['Model-RF'].rootAssembly.referencePoints[137]), (
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].vertices[30], 
    mdb.models['Model-RF'].rootAssembly.referencePoints[137]), (
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].vertices[7], 
    mdb.models['Model-RF'].rootAssembly.referencePoints[137])))
mdb.models['Model-RF'].rootAssembly.Set(edges=
    mdb.models['Model-RF'].rootAssembly.edges.getSequenceFromMask(('[#3f ]', ), 
    ), name='Wire-1-Set-1')
mdb.models['Model-RF'].ConnectorSection(assembledType=WELD, name='ConnSect-1')
mdb.models['Model-RF'].rootAssembly.Set(edges=
    mdb.models['Model-RF'].rootAssembly.edges.getSequenceFromMask(('[#3f ]', ), 
    ), name='Set-60')
mdb.models['Model-RF'].rootAssembly.SectionAssignment(region=
    mdb.models['Model-RF'].rootAssembly.sets['Set-60'], sectionName=
    'ConnSect-1')
mdb.models['Model-RF'].StaticStep(name='Step-momemt&force', previous='Step-1')
mdb.models['Model-RF'].rootAssembly.Set(name='Set-61', referencePoints=(
    mdb.models['Model-RF'].rootAssembly.referencePoints[137], ))
mdb.models['Model-RF'].ConcentratedForce(cf2=-314.0, createStepName=
    'Step-momemt&force', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-3', region=mdb.models['Model-RF'].rootAssembly.sets['Set-61'])
mdb.models['Model-RF'].loads.changeKey(fromName='Load-3', toName=
    'external force')
mdb.models['Model-RF'].rootAssembly.Set(name='Set-62', referencePoints=(
    mdb.models['Model-RF'].rootAssembly.referencePoints[137], ))
mdb.models['Model-RF'].Moment(cm2=1887.0, createStepName='Step-momemt&force', 
    distributionType=UNIFORM, field='', follower=ON, localCsys=None, name=
    'external moment', region=
    mdb.models['Model-RF'].rootAssembly.sets['Set-62'])
mdb.models['Model-RF'].loads['external force'].setValues(distributionType=
    UNIFORM, field='', follower=ON)
mdb.models['Model-RF'].loads['external moment'].setValues(cm2=0.0, cm3=1887.0, 
    distributionType=UNIFORM, field='')
mdb.models['Model-RF'].rootAssembly.regenerate()
mdb.models['Model-RF'].loads['external moment'].setValues(cm1=1887.0, cm3=0.0, 
    distributionType=UNIFORM, field='')
mdb.models['Model-RF'].loads['external moment'].setValues(cm1=-1887.0, 
    distributionType=UNIFORM, field='')
mdb.models['Model-RF'].loads['external force'].setValues(cf1=-314.0, cf2=0.0, 
    distributionType=UNIFORM, field='')
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 13384, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 154.0})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov 25 19:26:01 2018', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 12784, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 196.0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 17 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.5, 'attempts': ' 1U', 
    'timeIncrement': 0.375, 'increment': 3, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.5, 'attempts': ' 2U', 
    'timeIncrement': 0.09375, 'increment': 3, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.5234375, 'attempts': 3, 
    'timeIncrement': 0.0234375, 'increment': 3, 'stepTime': 0.5234375, 
    'step': 1, 'jobName': 'FlangeRF', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.5234375, 
    'attempts': ' 1U', 'timeIncrement': 0.03515625, 'increment': 4, 
    'stepTime': 0.5234375, 'step': 1, 'jobName': 'FlangeRF', 'severe': 4, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.5322265625, 
    'attempts': 2, 'timeIncrement': 0.0087890625, 'increment': 4, 
    'stepTime': 0.5322265625, 'step': 1, 'jobName': 'FlangeRF', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.54541015625, 
    'attempts': 1, 'timeIncrement': 0.01318359375, 'increment': 5, 
    'stepTime': 0.54541015625, 'step': 1, 'jobName': 'FlangeRF', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.54541015625, 
    'attempts': ' 1U', 'timeIncrement': 0.019775390625, 'increment': 6, 
    'stepTime': 0.54541015625, 'step': 1, 'jobName': 'FlangeRF', 'severe': 4, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.54541015625, 
    'attempts': ' 2U', 'timeIncrement': 0.00494384765625, 'increment': 6, 
    'stepTime': 0.54541015625, 'step': 1, 'jobName': 'FlangeRF', 'severe': 4, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.546646118164063, 
    'attempts': 3, 'timeIncrement': 0.0012359619140625, 'increment': 6, 
    'stepTime': 0.546646118164063, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.548500061035156, 
    'attempts': 1, 'timeIncrement': 0.00185394287109375, 'increment': 7, 
    'stepTime': 0.548500061035156, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.548500061035156, 
    'attempts': ' 1U', 'timeIncrement': 0.00278091430664063, 'increment': 8, 
    'stepTime': 0.548500061035156, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.549195289611816, 
    'attempts': 2, 'timeIncrement': 0.000695228576660156, 'increment': 8, 
    'stepTime': 0.549195289611816, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.549195289611816, 
    'attempts': ' 1U', 'timeIncrement': 0.00104284286499023, 'increment': 9, 
    'stepTime': 0.549195289611816, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.549456000328064, 
    'attempts': 2, 'timeIncrement': 0.000260710716247559, 'increment': 9, 
    'stepTime': 0.549456000328064, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.549847066402435, 
    'attempts': 1, 'timeIncrement': 0.000391066074371338, 'increment': 10, 
    'stepTime': 0.549847066402435, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.549847066402435, 
    'attempts': ' 1U', 'timeIncrement': 0.000586599111557007, 'increment': 11, 
    'stepTime': 0.549847066402435, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.549993716180325, 
    'attempts': 2, 'timeIncrement': 0.000146649777889252, 'increment': 11, 
    'stepTime': 0.549993716180325, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.549993716180325, 
    'attempts': ' 1U', 'timeIncrement': 0.000219974666833878, 'increment': 12, 
    'stepTime': 0.549993716180325, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.550048709847033, 
    'attempts': 2, 'timeIncrement': 5.49936667084694e-05, 'increment': 12, 
    'stepTime': 0.550048709847033, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.550048709847033, 
    'attempts': ' 1U', 'timeIncrement': 8.24905000627041e-05, 'increment': 13, 
    'stepTime': 0.550048709847033, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.550069332472049, 
    'attempts': 2, 'timeIncrement': 2.0622625015676e-05, 'increment': 13, 
    'stepTime': 0.550069332472049, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.550100266409572, 
    'attempts': 1, 'timeIncrement': 3.0933937523514e-05, 'increment': 14, 
    'stepTime': 0.550100266409572, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.550100266409572, 
    'attempts': ' 1U', 'timeIncrement': 4.6400906285271e-05, 'increment': 15, 
    'stepTime': 0.550100266409572, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.550111866636144, 
    'attempts': 2, 'timeIncrement': 1.16002265713178e-05, 'increment': 15, 
    'stepTime': 0.550111866636144, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.550111866636144, 
    'attempts': ' 1U', 'timeIncrement': 1.74003398569766e-05, 'increment': 16, 
    'stepTime': 0.550111866636144, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Time increment required is less than the minimum specified', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.550111866636144, 
    'attempts': ' 2U', 'timeIncrement': 1e-05, 'increment': 16, 
    'stepTime': 0.550111866636144, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.550111866636144, 
    'attempts': 3, 'timeIncrement': 1e-35, 'increment': 16, 
    'stepTime': 0.550111866636144, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FlangeRF'})
mdb.models['Model-RF'].boundaryConditions['BC-5'].setValues(typeName=ENCASTRE)
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 10540, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 196.0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 17 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.5, 'attempts': ' 1U', 
    'timeIncrement': 0.375, 'increment': 3, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.5, 'attempts': ' 2U', 
    'timeIncrement': 0.09375, 'increment': 3, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.5234375, 'attempts': 3, 
    'timeIncrement': 0.0234375, 'increment': 3, 'stepTime': 0.5234375, 
    'step': 1, 'jobName': 'FlangeRF', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.5234375, 
    'attempts': ' 1U', 'timeIncrement': 0.03515625, 'increment': 4, 
    'stepTime': 0.5234375, 'step': 1, 'jobName': 'FlangeRF', 'severe': 4, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.5322265625, 
    'attempts': 2, 'timeIncrement': 0.0087890625, 'increment': 4, 
    'stepTime': 0.5322265625, 'step': 1, 'jobName': 'FlangeRF', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.54541015625, 
    'attempts': 1, 'timeIncrement': 0.01318359375, 'increment': 5, 
    'stepTime': 0.54541015625, 'step': 1, 'jobName': 'FlangeRF', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.54541015625, 
    'attempts': ' 1U', 'timeIncrement': 0.019775390625, 'increment': 6, 
    'stepTime': 0.54541015625, 'step': 1, 'jobName': 'FlangeRF', 'severe': 4, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.54541015625, 
    'attempts': ' 2U', 'timeIncrement': 0.00494384765625, 'increment': 6, 
    'stepTime': 0.54541015625, 'step': 1, 'jobName': 'FlangeRF', 'severe': 4, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.546646118164063, 
    'attempts': 3, 'timeIncrement': 0.0012359619140625, 'increment': 6, 
    'stepTime': 0.546646118164063, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.548500061035156, 
    'attempts': 1, 'timeIncrement': 0.00185394287109375, 'increment': 7, 
    'stepTime': 0.548500061035156, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.548500061035156, 
    'attempts': ' 1U', 'timeIncrement': 0.00278091430664063, 'increment': 8, 
    'stepTime': 0.548500061035156, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.549195289611816, 
    'attempts': 2, 'timeIncrement': 0.000695228576660156, 'increment': 8, 
    'stepTime': 0.549195289611816, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.549195289611816, 
    'attempts': ' 1U', 'timeIncrement': 0.00104284286499023, 'increment': 9, 
    'stepTime': 0.549195289611816, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.549456000328064, 
    'attempts': 2, 'timeIncrement': 0.000260710716247559, 'increment': 9, 
    'stepTime': 0.549456000328064, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.549847066402435, 
    'attempts': 1, 'timeIncrement': 0.000391066074371338, 'increment': 10, 
    'stepTime': 0.549847066402435, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.549847066402435, 
    'attempts': ' 1U', 'timeIncrement': 0.000586599111557007, 'increment': 11, 
    'stepTime': 0.549847066402435, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.549993716180325, 
    'attempts': 2, 'timeIncrement': 0.000146649777889252, 'increment': 11, 
    'stepTime': 0.549993716180325, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.549993716180325, 
    'attempts': ' 1U', 'timeIncrement': 0.000219974666833878, 'increment': 12, 
    'stepTime': 0.549993716180325, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.550048709847033, 
    'attempts': 2, 'timeIncrement': 5.49936667084694e-05, 'increment': 12, 
    'stepTime': 0.550048709847033, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.550048709847033, 
    'attempts': ' 1U', 'timeIncrement': 8.24905000627041e-05, 'increment': 13, 
    'stepTime': 0.550048709847033, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.550069332472049, 
    'attempts': 2, 'timeIncrement': 2.0622625015676e-05, 'increment': 13, 
    'stepTime': 0.550069332472049, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.550100266409572, 
    'attempts': 1, 'timeIncrement': 3.0933937523514e-05, 'increment': 14, 
    'stepTime': 0.550100266409572, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.550100266409572, 
    'attempts': ' 1U', 'timeIncrement': 4.6400906285271e-05, 'increment': 15, 
    'stepTime': 0.550100266409572, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.550111866636144, 
    'attempts': 2, 'timeIncrement': 1.16002265713178e-05, 'increment': 15, 
    'stepTime': 0.550111866636144, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.550111866636144, 
    'attempts': ' 1U', 'timeIncrement': 1.74003398569766e-05, 'increment': 16, 
    'stepTime': 0.550111866636144, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Time increment required is less than the minimum specified', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.550111866636144, 
    'attempts': ' 2U', 'timeIncrement': 1e-05, 'increment': 16, 
    'stepTime': 0.550111866636144, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.550111866636144, 
    'attempts': 3, 'timeIncrement': 1e-35, 'increment': 16, 
    'stepTime': 0.550111866636144, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FlangeRF'})
mdb.models['Model-RF'].boundaryConditions['BC-5'].setValues(typeName=YSYMM)
mdb.models['Model-RF'].boundaryConditions['BC-1'].setValues(typeName=YSYMM)
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 13356, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 196.0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 13 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0625, 'attempts': 3, 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0625, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.125, 'attempts': 1, 
    'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.125, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.21875, 'attempts': 1, 
    'timeIncrement': 0.09375, 'increment': 3, 'stepTime': 0.21875, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.359375, 'attempts': 1, 
    'timeIncrement': 0.140625, 'increment': 4, 'stepTime': 0.359375, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.5703125, 'attempts': 1, 
    'timeIncrement': 0.2109375, 'increment': 5, 'stepTime': 0.5703125, 
    'step': 1, 'jobName': 'FlangeRF', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.88671875, 'attempts': 1, 
    'timeIncrement': 0.31640625, 'increment': 6, 'stepTime': 0.88671875, 
    'step': 1, 'jobName': 'FlangeRF', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.11328125, 'increment': 7, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 2, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 188.0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov 25 19:41:19 2018', 'jobName': 'FlangeRF'})
mdb.models['Model-RF'].loads['external force'].setValues(cf1=-12560.0, 
    distributionType=UNIFORM, field='')
mdb.models['Model-RF'].loads['external moment'].setValues(cm1=-75471.0, 
    distributionType=UNIFORM, field='')
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 17196, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 196.0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 13 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0625, 'attempts': 3, 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0625, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.125, 'attempts': 1, 
    'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.125, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.21875, 'attempts': 1, 
    'timeIncrement': 0.09375, 'increment': 3, 'stepTime': 0.21875, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.359375, 'attempts': 1, 
    'timeIncrement': 0.140625, 'increment': 4, 'stepTime': 0.359375, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.5703125, 'attempts': 1, 
    'timeIncrement': 0.2109375, 'increment': 5, 'stepTime': 0.5703125, 
    'step': 1, 'jobName': 'FlangeRF', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.88671875, 'attempts': 1, 
    'timeIncrement': 0.31640625, 'increment': 6, 'stepTime': 0.88671875, 
    'step': 1, 'jobName': 'FlangeRF', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.11328125, 'increment': 7, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 2, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 188.0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov 25 19:46:23 2018', 'jobName': 'FlangeRF'})
mdb.models['Model-RF'].loads['external force'].setValues(cf1=0.0, cf2=-12560.0, 
    distributionType=UNIFORM, field='')
mdb.models['Model-RF'].loads['external moment'].setValues(cm1=0.0, cm2=-75471.0
    , distributionType=UNIFORM, field='')
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 20192, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 196.0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 13 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0625, 'attempts': 3, 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0625, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.125, 'attempts': 1, 
    'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.125, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.21875, 'attempts': 1, 
    'timeIncrement': 0.09375, 'increment': 3, 'stepTime': 0.21875, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.359375, 'attempts': 1, 
    'timeIncrement': 0.140625, 'increment': 4, 'stepTime': 0.359375, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.5703125, 'attempts': 1, 
    'timeIncrement': 0.2109375, 'increment': 5, 'stepTime': 0.5703125, 
    'step': 1, 'jobName': 'FlangeRF', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.88671875, 'attempts': 1, 
    'timeIncrement': 0.31640625, 'increment': 6, 'stepTime': 0.88671875, 
    'step': 1, 'jobName': 'FlangeRF', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.11328125, 'increment': 7, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 2, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 188.0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'FlangeRF', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov 25 19:50:30 2018', 'jobName': 'FlangeRF'})
mdb.models['Model-RF'].StaticStep(name='step-pressure', previous=
    'Step-momemt&force')
mdb.models['Model-RF'].loads['pressure10mpa'].move('Step-1', 
    'Step-momemt&force')
mdb.models['Model-RF'].loads['external force'].move('Step-momemt&force', 
    'step-pressure')
mdb.models['Model-RF'].loads['external moment'].move('Step-momemt&force', 
    'step-pressure')
mdb.models['Model-RF'].steps.changeKey(fromName='Step-momemt&force', toName=
    'Step-pressure10')
mdb.models['Model-RF'].steps.changeKey(fromName='step-pressure', toName=
    'step-force&moment')
mdb.models['Model-RF'].loads['external force'].setValues(cf2=0.0, cf3=-12560.0, 
    distributionType=UNIFORM, field='')
mdb.models['Model-RF'].loads['external moment'].setValues(cm2=0.0, cm3=-75471.0
    , distributionType=UNIFORM, field='')
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 19460, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 196.0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 13 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.875, 'attempts': 1, 
    'timeIncrement': 0.375, 'increment': 3, 'stepTime': 0.875, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.125, 'increment': 4, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 6, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 2, 
    'jobName': 'FlangeRF', 'severe': 6, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 190.0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'FlangeRF', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 3, 
    'jobName': 'FlangeRF', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 188.0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 3, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov 25 19:59:21 2018', 'jobName': 'FlangeRF'})
mdb.models['Model-RF'].loads['external force'].setValues(cf2=-12560.0, cf3=0.0, 
    distributionType=UNIFORM, field='')
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 12760, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 196.0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 13 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.875, 'attempts': 1, 
    'timeIncrement': 0.375, 'increment': 3, 'stepTime': 0.875, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.125, 'increment': 4, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 6, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 2, 
    'jobName': 'FlangeRF', 'severe': 6, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 190.0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'FlangeRF', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 3, 
    'jobName': 'FlangeRF', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 188.0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 3, 
    'jobName': 'FlangeRF', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov 25 20:02:09 2018', 'jobName': 'FlangeRF'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RF'].rootAssembly.Set(name='Set-63', referencePoints=(
    mdb.models['Model-RF'].rootAssembly.referencePoints[137], ))
mdb.models['Model-RF'].ConcentratedForce(cf2=-76702.7221186334, createStepName=
    'Step-pressure10', distributionType=UNIFORM, field='', localCsys=None, 
    name='axial pressure load', region=
    mdb.models['Model-RF'].rootAssembly.sets['Set-63'])
mdb.models['Model-RF'].loads['axial pressure load'].setValues(distributionType=
    UNIFORM, field='', follower=ON)
mdb.models['Model-RF'].loads['external force'].setValues(cf2=-314.0, 
    distributionType=UNIFORM, field='')
mdb.models['Model-RF'].loads['external moment'].setValues(cm3=-1887.0, 
    distributionType=UNIFORM, field='')
mdb.models['Model-RF'].loads['external moment'].setValues(cm2=-1887.0, cm3=0.0, 
    distributionType=UNIFORM, field='')
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 19924, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'increment': 0, 
    'attempts': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 0.0, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 0, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'memory': 196.0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 13 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'increment': 1, 
    'attempts': ' 1U', 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 0.0, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 1, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.25, 'increment': 1, 
    'attempts': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.25, 'stepTime': 0.25, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 3, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.5, 'increment': 2, 
    'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.25, 'stepTime': 0.5, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 1, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.875, 'increment': 3, 
    'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.375, 'stepTime': 0.875, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'increment': 4, 
    'attempts': 1, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.125, 'stepTime': 1.0, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 6, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'increment': 0, 
    'attempts': 0, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 0.0, 'step': 2, 'jobName': 'FlangeRF', 
    'severe': 6, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'memory': 190.0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.0, 'increment': 1, 
    'attempts': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 1.0, 'step': 2, 'jobName': 'FlangeRF', 
    'severe': 4, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.0, 'increment': 0, 
    'attempts': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 0.0, 'step': 3, 'jobName': 'FlangeRF', 
    'severe': 4, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'memory': 148.0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 3.0, 'increment': 1, 
    'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 1.0, 'step': 3, 'jobName': 'FlangeRF', 
    'severe': 0, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_COMPLETED, {'jobName': 'FlangeRF', 
    'time': 'Sun Nov 25 22:31:33 2018'})
mdb.models['Model-RF'].loads['external force'].setValues(cf2=-12560.0, 
    distributionType=UNIFORM, field='')
mdb.models['Model-RF'].loads['external moment'].setValues(cm2=-75480.0, 
    distributionType=UNIFORM, field='')
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 19864, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'increment': 0, 
    'attempts': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 0.0, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 0, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'memory': 196.0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 13 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'increment': 1, 
    'attempts': ' 1U', 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 0.0, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 1, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.25, 'increment': 1, 
    'attempts': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.25, 'stepTime': 0.25, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 3, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.5, 'increment': 2, 
    'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.25, 'stepTime': 0.5, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 1, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.875, 'increment': 3, 
    'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.375, 'stepTime': 0.875, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'increment': 4, 
    'attempts': 1, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.125, 'stepTime': 1.0, 'step': 1, 'jobName': 'FlangeRF', 
    'severe': 6, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'increment': 0, 
    'attempts': 0, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 0.0, 'step': 2, 'jobName': 'FlangeRF', 
    'severe': 6, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'memory': 190.0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.0, 'increment': 1, 
    'attempts': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 1.0, 'step': 2, 'jobName': 'FlangeRF', 
    'severe': 4, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.0, 'increment': 0, 
    'attempts': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 0.0, 'step': 3, 'jobName': 'FlangeRF', 
    'severe': 4, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'memory': 148.0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 3.0, 'increment': 1, 
    'attempts': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 1.0, 'step': 3, 'jobName': 'FlangeRF', 
    'severe': 3, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_COMPLETED, {'jobName': 'FlangeRF', 
    'time': 'Sun Nov 25 22:35:06 2018'})
mdb.models['Model-RTJ'].rootAssembly.ReferencePoint(point=(0.0, -223.2, 0.0))
mdb.models['Model-RTJ'].rootAssembly.AttachmentPoints(name=
    'Attachment Points-1', points=(
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].InterestingPoint(
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].edges[53], 
    MIDDLE), 
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].InterestingPoint(
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].edges[51], 
    MIDDLE), 
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].InterestingPoint(
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].edges[54], 
    MIDDLE), 
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].InterestingPoint(
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].edges[48], 
    MIDDLE)), projectOnFaces=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    ('[#20000 ]', ), ), setName='Attachment Points-1-Set-1')
mdb.models['Model-RTJ'].rootAssembly.WirePolyLine(mergeType=IMPRINT, meshable=
    OFF, points=((mdb.models['Model-RTJ'].rootAssembly.referencePoints[201], 
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].vertices[37]), (
    mdb.models['Model-RTJ'].rootAssembly.referencePoints[201], 
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].vertices[34]), (
    mdb.models['Model-RTJ'].rootAssembly.referencePoints[201], 
    mdb.models['Model-RTJ'].rootAssembly.vertices[3]), (
    mdb.models['Model-RTJ'].rootAssembly.referencePoints[201], 
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].vertices[36]), (
    mdb.models['Model-RTJ'].rootAssembly.referencePoints[201], 
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].vertices[35]), (
    mdb.models['Model-RTJ'].rootAssembly.referencePoints[201], 
    mdb.models['Model-RTJ'].rootAssembly.vertices[2]), (
    mdb.models['Model-RTJ'].rootAssembly.referencePoints[201], 
    mdb.models['Model-RTJ'].rootAssembly.vertices[1]), (
    mdb.models['Model-RTJ'].rootAssembly.referencePoints[201], 
    mdb.models['Model-RTJ'].rootAssembly.vertices[0])))
mdb.models['Model-RTJ'].rootAssembly.Set(edges=
    mdb.models['Model-RTJ'].rootAssembly.edges.getSequenceFromMask(('[#ff ]', 
    ), ), name='Wire-1-Set-1')
mdb.models['Model-RTJ'].ConnectorSection(assembledType=WELD, name='ConnSect-1')
mdb.models['Model-RTJ'].rootAssembly.Set(edges=
    mdb.models['Model-RTJ'].rootAssembly.edges.getSequenceFromMask(('[#ff ]', 
    ), ), name='Set-30')
mdb.models['Model-RTJ'].rootAssembly.SectionAssignment(region=
    mdb.models['Model-RTJ'].rootAssembly.sets['Set-30'], sectionName=
    'ConnSect-1')
mdb.models['Model-RTJ'].boundaryConditions['BOLTTOP'].setValues(typeName=YSYMM)
mdb.models['Model-RTJ'].boundaryConditions['RTJTOP'].setValues(typeName=YSYMM)
mdb.models['Model-RTJ'].StaticStep(name='pressure load', previous='RTJ STEP-1')
mdb.models['Model-RTJ'].loads['PRESSURE'].move('RTJ STEP-1', 'pressure load')
mdb.models['Model-RTJ'].rootAssembly.Set(name='Set-31', referencePoints=(
    mdb.models['Model-RTJ'].rootAssembly.referencePoints[201], ))
mdb.models['Model-RTJ'].ConcentratedForce(cf2=-76702.7221186334, 
    createStepName='pressure load', distributionType=UNIFORM, field='', 
    localCsys=None, name='Load-3', region=
    mdb.models['Model-RTJ'].rootAssembly.sets['Set-31'])
mdb.models['Model-RTJ'].loads.changeKey(fromName='Load-3', toName=
    'axial pressure load')
mdb.models['Model-RTJ'].steps.changeKey(fromName='RTJ STEP-1', toName=
    'RTJ bolt load')
mdb.models['Model-RTJ'].StaticStep(name='External load', previous=
    'pressure load')
mdb.models['Model-RTJ'].rootAssembly.Set(name='Set-32', referencePoints=(
    mdb.models['Model-RTJ'].rootAssembly.referencePoints[201], ))
mdb.models['Model-RTJ'].ConcentratedForce(cf2=-12560.0, createStepName=
    'External load', distributionType=UNIFORM, field='', follower=ON, 
    localCsys=None, name='Load-4', region=
    mdb.models['Model-RTJ'].rootAssembly.sets['Set-32'])
mdb.models['Model-RTJ'].loads.changeKey(fromName='Load-4', toName=
    'External force')
mdb.models['Model-RTJ'].rootAssembly.Set(name='Set-33', referencePoints=(
    mdb.models['Model-RTJ'].rootAssembly.referencePoints[201], ))
mdb.models['Model-RTJ'].Moment(cm2=75471.0, createStepName='External load', 
    distributionType=UNIFORM, field='', follower=ON, localCsys=None, name=
    'External Moment', region=
    mdb.models['Model-RTJ'].rootAssembly.sets['Set-33'])
mdb.models['Model-RTJ'].loads['axial pressure load'].setValues(
    distributionType=UNIFORM, field='', follower=ON)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.saveAs(pathName='D:/MS PROGRAM/project/MODEL 12INCH 900#RF FLANGE/12inch 900#flange model RF-PROJECT MODEL-Rev2.cae')
mdb.models['Model-RTJ'].rootAssembly.Set(cells=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    mask=('[#f ]', ), )+\
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].cells.getSequenceFromMask(
    mask=('[#ff ]', ), )+\
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].cells.getSequenceFromMask(
    mask=('[#3 ]', ), ), edges=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff #7fffffff ]', ), )+\
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff #1fff ]', ), )+\
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].edges.getSequenceFromMask(
    mask=('[#3fff ]', ), ), faces=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    mask=('[#3fffffff ]', ), )+\
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff ]', ), )+\
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].faces.getSequenceFromMask(
    mask=('[#1ff ]', ), ), name='Set-34', vertices=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff #3f ]', ), )+\
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].vertices.getSequenceFromMask(
    mask=('[#3fffff ]', ), )+\
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].vertices.getSequenceFromMask(
    mask=('[#ff ]', ), )+\
    mdb.models['Model-RTJ'].rootAssembly.vertices.getSequenceFromMask(mask=(
    '[#f0000 ]', ), ))
mdb.models['Model-RTJ'].Temperature(createStepName='Initial', 
    crossSectionDistribution=CONSTANT_THROUGH_THICKNESS, distributionType=
    UNIFORM, magnitudes=(21.0, ), name='Predefined Field-1', region=
    mdb.models['Model-RTJ'].rootAssembly.sets['Set-34'])
mdb.models['Model-RTJ'].rootAssembly.Set(cells=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    mask=('[#f ]', ), )+\
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].cells.getSequenceFromMask(
    mask=('[#ff ]', ), )+\
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].cells.getSequenceFromMask(
    mask=('[#3 ]', ), ), edges=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff #7fffffff ]', ), )+\
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff #1fff ]', ), )+\
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].edges.getSequenceFromMask(
    mask=('[#3fff ]', ), ), faces=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    mask=('[#3fffffff ]', ), )+\
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff ]', ), )+\
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].faces.getSequenceFromMask(
    mask=('[#1ff ]', ), ), name='Set-35', vertices=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff #3f ]', ), )+\
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].vertices.getSequenceFromMask(
    mask=('[#3fffff ]', ), )+\
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].vertices.getSequenceFromMask(
    mask=('[#ff ]', ), )+\
    mdb.models['Model-RTJ'].rootAssembly.vertices.getSequenceFromMask(mask=(
    '[#f0000 ]', ), ))
mdb.models['Model-RTJ'].Temperature(createStepName='RTJ bolt load', 
    crossSectionDistribution=CONSTANT_THROUGH_THICKNESS, distributionType=
    UNIFORM, magnitudes=(65.0, ), name='design temprature', region=
    mdb.models['Model-RTJ'].rootAssembly.sets['Set-35'])
mdb.models['Model-RF'].predefinedFields.changeKey(fromName='Predefined Field-2'
    , toName='design temp')
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-3-RTJ-1-ASSEMBLY_CP-3-FLANGE-1), NOT ALL THE NODES THAT HAVE BEEN ADJUSTED WERE PRINTED. SPECIFY *PREPRINT,CONTACT=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 21892, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 702.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 5, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 5, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 712.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 8, 'iterations': 10, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 3, 
    'jobName': 'FLANGERTJ', 'severe': 8, 'iterations': 10, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 720.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 3, 
    'jobName': 'FLANGERTJ', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov 25 23:04:18 2018', 'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].materials['RTJ Gasket'].Plastic(table=((200.0, 0.0), ))
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-3-RTJ-1-ASSEMBLY_CP-3-FLANGE-1), NOT ALL THE NODES THAT HAVE BEEN ADJUSTED WERE PRINTED. SPECIFY *PREPRINT,CONTACT=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 9476, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 702.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 650 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 5788 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 4 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 294 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 888 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3629 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 6 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_3.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_3.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_3.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 4 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 42 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 140 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 43 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 141 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1129 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 20 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 4, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.00390625, 'attempts': 5, 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.00390625, 
    'step': 1, 'jobName': 'FLANGERTJ', 'severe': 3, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0078125, 'attempts': 1, 
    'timeIncrement': 0.00390625, 'increment': 2, 'stepTime': 0.0078125, 
    'step': 1, 'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.013671875, 
    'attempts': 1, 'timeIncrement': 0.005859375, 'increment': 3, 
    'stepTime': 0.013671875, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 1, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0224609375, 
    'attempts': 1, 'timeIncrement': 0.0087890625, 'increment': 4, 
    'stepTime': 0.0224609375, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.03564453125, 
    'attempts': 1, 'timeIncrement': 0.01318359375, 'increment': 5, 
    'stepTime': 0.03564453125, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.055419921875, 
    'attempts': 1, 'timeIncrement': 0.019775390625, 'increment': 6, 
    'stepTime': 0.055419921875, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 1, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0850830078125, 
    'attempts': 1, 'timeIncrement': 0.0296630859375, 'increment': 7, 
    'stepTime': 0.0850830078125, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 42 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 106 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0850830078125, 
    'attempts': ' 1U', 'timeIncrement': 0.04449462890625, 'increment': 8, 
    'stepTime': 0.0850830078125, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 117 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 192 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 14 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0850830078125, 
    'attempts': ' 2U', 'timeIncrement': 0.0111236572265625, 'increment': 8, 
    'stepTime': 0.0850830078125, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0878639221191406, 
    'attempts': 3, 'timeIncrement': 0.00278091430664063, 'increment': 8, 
    'stepTime': 0.0878639221191406, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0920352935791016, 
    'attempts': 1, 'timeIncrement': 0.00417137145996094, 'increment': 9, 
    'stepTime': 0.0920352935791016, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.098292350769043, 
    'attempts': 1, 'timeIncrement': 0.00625705718994141, 'increment': 10, 
    'stepTime': 0.098292350769043, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.107677936553955, 
    'attempts': 1, 'timeIncrement': 0.00938558578491211, 'increment': 11, 
    'stepTime': 0.107677936553955, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.121756315231323, 
    'attempts': 1, 'timeIncrement': 0.0140783786773682, 'increment': 12, 
    'stepTime': 0.121756315231323, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.142873883247375, 
    'attempts': 1, 'timeIncrement': 0.0211175680160522, 'increment': 13, 
    'stepTime': 0.142873883247375, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 35 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 27 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 54 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.142873883247375, 
    'attempts': ' 1U', 'timeIncrement': 0.0316763520240784, 'increment': 14, 
    'stepTime': 0.142873883247375, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].materials['RTJ Gasket'].plastic.setValues(table=((
    250.0, 0.0), ))
mdb.models['Model-RTJ'].materials['RTJ Gasket'].plastic.setValues(table=((
    190.0, 0.0), (235.0, 0.002)))
mdb.models['Model-RTJ'].materials['RTJ Gasket'].plastic.setValues(table=((
    200.0, 0.0), (246.0, 0.0235), (244.0, 0.0474), (374.0, 0.0935), (437.0, 
    0.1377), (480.0, 0.18)))
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-3-RTJ-1-ASSEMBLY_CP-3-FLANGE-1), NOT ALL THE NODES THAT HAVE BEEN ADJUSTED WERE PRINTED. SPECIFY *PREPRINT,CONTACT=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 15068, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 702.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 581 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2916 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 6604 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 7622 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8167 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8139 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8272 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8290 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8332 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8327 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 2 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 10, 'iterations': 11, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 88 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 211 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1693 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 11 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 74 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 126 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 786 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 15 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 4, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.00390625, 'attempts': 5, 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.00390625, 
    'step': 1, 'jobName': 'FLANGERTJ', 'severe': 3, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0078125, 'attempts': 1, 
    'timeIncrement': 0.00390625, 'increment': 2, 'stepTime': 0.0078125, 
    'step': 1, 'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.013671875, 
    'attempts': 1, 'timeIncrement': 0.005859375, 'increment': 3, 
    'stepTime': 0.013671875, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 1, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0224609375, 
    'attempts': 1, 'timeIncrement': 0.0087890625, 'increment': 4, 
    'stepTime': 0.0224609375, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.03564453125, 
    'attempts': 1, 'timeIncrement': 0.01318359375, 'increment': 5, 
    'stepTime': 0.03564453125, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.055419921875, 
    'attempts': 1, 'timeIncrement': 0.019775390625, 'increment': 6, 
    'stepTime': 0.055419921875, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 1, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0850830078125, 
    'attempts': 1, 'timeIncrement': 0.0296630859375, 'increment': 7, 
    'stepTime': 0.0850830078125, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 67 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0850830078125, 
    'attempts': ' 1U', 'timeIncrement': 0.04449462890625, 'increment': 8, 
    'stepTime': 0.0850830078125, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 5, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0962066650390625, 
    'attempts': 2, 'timeIncrement': 0.0111236572265625, 'increment': 8, 
    'stepTime': 0.0962066650390625, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 127 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0962066650390625, 
    'attempts': ' 1U', 'timeIncrement': 0.0166854858398438, 'increment': 9, 
    'stepTime': 0.0962066650390625, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.100378036499023, 
    'attempts': 2, 'timeIncrement': 0.00417137145996094, 'increment': 9, 
    'stepTime': 0.100378036499023, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.106635093688965, 
    'attempts': 1, 'timeIncrement': 0.00625705718994141, 'increment': 10, 
    'stepTime': 0.106635093688965, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.116020679473877, 
    'attempts': 1, 'timeIncrement': 0.00938558578491211, 'increment': 11, 
    'stepTime': 0.116020679473877, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.130099058151245, 
    'attempts': 1, 'timeIncrement': 0.0140783786773682, 'increment': 12, 
    'stepTime': 0.130099058151245, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.151216626167297, 
    'attempts': 1, 'timeIncrement': 0.0211175680160522, 'increment': 13, 
    'stepTime': 0.151216626167297, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 41 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.151216626167297, 
    'attempts': ' 1U', 'timeIncrement': 0.0316763520240784, 'increment': 14, 
    'stepTime': 0.151216626167297, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 5, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.159135714173317, 
    'attempts': 2, 'timeIncrement': 0.00791908800601959, 'increment': 14, 
    'stepTime': 0.159135714173317, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.171014346182346, 
    'attempts': 1, 'timeIncrement': 0.0118786320090294, 'increment': 15, 
    'stepTime': 0.171014346182346, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.171014346182346, 
    'attempts': ' 1U', 'timeIncrement': 0.0178179480135441, 'increment': 16, 
    'stepTime': 0.171014346182346, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.175468833185732, 
    'attempts': 2, 'timeIncrement': 0.00445448700338602, 'increment': 16, 
    'stepTime': 0.175468833185732, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.182150563690811, 
    'attempts': 1, 'timeIncrement': 0.00668173050507903, 'increment': 17, 
    'stepTime': 0.182150563690811, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.19217315944843, 
    'attempts': 1, 'timeIncrement': 0.0100225957576185, 'increment': 18, 
    'stepTime': 0.19217315944843, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.207207053084858, 
    'attempts': 1, 'timeIncrement': 0.0150338936364278, 'increment': 19, 
    'stepTime': 0.207207053084858, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.207207053084858, 
    'attempts': ' 1U', 'timeIncrement': 0.0225508404546417, 'increment': 20, 
    'stepTime': 0.207207053084858, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.212844763198518, 
    'attempts': 2, 'timeIncrement': 0.00563771011366043, 'increment': 20, 
    'stepTime': 0.212844763198518, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.221301328369009, 
    'attempts': 1, 'timeIncrement': 0.00845656517049065, 'increment': 21, 
    'stepTime': 0.221301328369009, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 22, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.233986176124745, 
    'attempts': 1, 'timeIncrement': 0.012684847755736, 'increment': 22, 
    'stepTime': 0.233986176124745, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 4 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.233986176124745, 
    'attempts': ' 1U', 'timeIncrement': 0.019027271633604, 'increment': 23, 
    'stepTime': 0.233986176124745, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 23, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.238742994033146, 
    'attempts': 2, 'timeIncrement': 0.00475681790840099, 'increment': 23, 
    'stepTime': 0.238742994033146, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 24, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.245878220895747, 
    'attempts': 1, 'timeIncrement': 0.00713522686260148, 'increment': 24, 
    'stepTime': 0.245878220895747, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 25, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.25658106118965, 
    'attempts': 1, 'timeIncrement': 0.0107028402939022, 'increment': 25, 
    'stepTime': 0.25658106118965, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.25658106118965, 
    'attempts': ' 1U', 'timeIncrement': 0.0160542604408533, 'increment': 26, 
    'stepTime': 0.25658106118965, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 26, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.260594626299863, 
    'attempts': 2, 'timeIncrement': 0.00401356511021334, 'increment': 26, 
    'stepTime': 0.260594626299863, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 27, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.266614973965183, 
    'attempts': 1, 'timeIncrement': 0.00602034766532, 'increment': 27, 
    'stepTime': 0.266614973965183, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 28, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.275645495463163, 
    'attempts': 1, 'timeIncrement': 0.00903052149798, 'increment': 28, 
    'stepTime': 0.275645495463163, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 29, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.289191277710133, 
    'attempts': 1, 'timeIncrement': 0.01354578224697, 'increment': 29, 
    'stepTime': 0.289191277710133, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 30, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.309509951080588, 
    'attempts': 1, 'timeIncrement': 0.020318673370455, 'increment': 30, 
    'stepTime': 0.309509951080588, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.models['Model-RTJ'].boundaryConditions['BOLTRTJEDGE'].setValues(typeName=
    ZSYMM)
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.309509951080588, 
    'attempts': ' 1U', 'timeIncrement': 0.0304780100556825, 'increment': 31, 
    'stepTime': 0.309509951080588, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 31, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.317129453594509, 
    'attempts': 2, 'timeIncrement': 0.00761950251392063, 'increment': 31, 
    'stepTime': 0.317129453594509, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 32, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.328558707365389, 
    'attempts': 1, 'timeIncrement': 0.0114292537708809, 'increment': 32, 
    'stepTime': 0.328558707365389, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 33, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.345702588021711, 
    'attempts': 1, 'timeIncrement': 0.0171438806563214, 'increment': 33, 
    'stepTime': 0.345702588021711, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 10 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 55 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.345702588021711, 
    'attempts': ' 1U', 'timeIncrement': 0.0257158209844821, 'increment': 34, 
    'stepTime': 0.345702588021711, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 18 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 92 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 182 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 323 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.345702588021711, 
    'attempts': ' 2U', 'timeIncrement': 0.00642895524612053, 'increment': 34, 
    'stepTime': 0.345702588021711, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 7, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 34, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.347309826833241, 
    'attempts': 3, 'timeIncrement': 0.00160723881153013, 'increment': 34, 
    'stepTime': 0.347309826833241, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 35, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.349720685050536, 
    'attempts': 1, 'timeIncrement': 0.0024108582172952, 'increment': 35, 
    'stepTime': 0.349720685050536, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 36, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.353336972376479, 
    'attempts': 1, 'timeIncrement': 0.0036162873259428, 'increment': 36, 
    'stepTime': 0.353336972376479, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 37, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.358761403365393, 
    'attempts': 1, 'timeIncrement': 0.0054244309889142, 'increment': 37, 
    'stepTime': 0.358761403365393, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 38, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.366898049848765, 
    'attempts': 1, 'timeIncrement': 0.0081366464833713, 'increment': 38, 
    'stepTime': 0.366898049848765, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.366898049848765, 
    'attempts': ' 1U', 'timeIncrement': 0.0122049697250569, 'increment': 39, 
    'stepTime': 0.366898049848765, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 5, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 39, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.369949292280029, 
    'attempts': 2, 'timeIncrement': 0.00305124243126424, 'increment': 39, 
    'stepTime': 0.369949292280029, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 40, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.374526155926925, 
    'attempts': 1, 'timeIncrement': 0.00457686364689635, 'increment': 40, 
    'stepTime': 0.374526155926925, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 41, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.38139145139727, 
    'attempts': 1, 'timeIncrement': 0.00686529547034453, 'increment': 41, 
    'stepTime': 0.38139145139727, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 42, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.391689394602786, 
    'attempts': 1, 'timeIncrement': 0.0102979432055168, 'increment': 42, 
    'stepTime': 0.391689394602786, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 43, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.407136309411062, 
    'attempts': 1, 'timeIncrement': 0.0154469148082752, 'increment': 43, 
    'stepTime': 0.407136309411062, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 66 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.407136309411062, 
    'attempts': ' 1U', 'timeIncrement': 0.0231703722124128, 'increment': 44, 
    'stepTime': 0.407136309411062, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 44, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.412928902464165, 
    'attempts': 2, 'timeIncrement': 0.0057925930531032, 'increment': 44, 
    'stepTime': 0.412928902464165, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 45, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.42161779204382, 
    'attempts': 1, 'timeIncrement': 0.0086888895796548, 'increment': 45, 
    'stepTime': 0.42161779204382, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 46, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.434651126413302, 
    'attempts': 1, 'timeIncrement': 0.0130333343694822, 'increment': 46, 
    'stepTime': 0.434651126413302, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 47, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.454201127967525, 
    'attempts': 1, 'timeIncrement': 0.0195500015542233, 'increment': 47, 
    'stepTime': 0.454201127967525, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 48, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.48352613029886, 
    'attempts': 1, 'timeIncrement': 0.0293250023313349, 'increment': 48, 
    'stepTime': 0.48352613029886, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 9 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 137 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.48352613029886, 
    'attempts': ' 1U', 'timeIncrement': 0.0439875034970024, 'increment': 49, 
    'stepTime': 0.48352613029886, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 49, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.494523006173111, 
    'attempts': 2, 'timeIncrement': 0.0109968758742506, 'increment': 49, 
    'stepTime': 0.494523006173111, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 56 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.494523006173111, 
    'attempts': ' 1U', 'timeIncrement': 0.0164953138113759, 'increment': 50, 
    'stepTime': 0.494523006173111, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 50, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.498646834625955, 
    'attempts': 2, 'timeIncrement': 0.00412382845284398, 'increment': 50, 
    'stepTime': 0.498646834625955, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 51, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.504832577305221, 
    'attempts': 1, 'timeIncrement': 0.00618574267926596, 'increment': 51, 
    'stepTime': 0.504832577305221, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 52, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.51411119132412, 
    'attempts': 1, 'timeIncrement': 0.00927861401889895, 'increment': 52, 
    'stepTime': 0.51411119132412, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 53, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.528029112352468, 
    'attempts': 1, 'timeIncrement': 0.0139179210283484, 'increment': 53, 
    'stepTime': 0.528029112352468, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 54, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.548905993894991, 
    'attempts': 1, 'timeIncrement': 0.0208768815425226, 'increment': 54, 
    'stepTime': 0.548905993894991, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 55, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.569782875437513, 
    'attempts': 1, 'timeIncrement': 0.0208768815425226, 'increment': 55, 
    'stepTime': 0.569782875437513, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 4 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 238 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 864 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1580 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.569782875437513, 
    'attempts': ' 1U', 'timeIncrement': 0.0208768815425226, 'increment': 56, 
    'stepTime': 0.569782875437513, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 7, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.569782875437513, 
    'attempts': ' 2U', 'timeIncrement': 0.00521922038563066, 'increment': 56, 
    'stepTime': 0.569782875437513, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 7, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 56, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.571087680533921, 
    'attempts': 3, 'timeIncrement': 0.00130480509640766, 'increment': 56, 
    'stepTime': 0.571087680533921, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 57, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.573044888178532, 
    'attempts': 1, 'timeIncrement': 0.0019572076446115, 'increment': 57, 
    'stepTime': 0.573044888178532, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 58, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.57598069964545, 
    'attempts': 1, 'timeIncrement': 0.00293581146691724, 'increment': 58, 
    'stepTime': 0.57598069964545, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 59, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.580384416845826, 
    'attempts': 1, 'timeIncrement': 0.00440371720037587, 'increment': 59, 
    'stepTime': 0.580384416845826, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 60, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.586989992646389, 
    'attempts': 1, 'timeIncrement': 0.0066055758005638, 'increment': 60, 
    'stepTime': 0.586989992646389, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 61, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.596898356347235, 
    'attempts': 1, 'timeIncrement': 0.0099083637008457, 'increment': 61, 
    'stepTime': 0.596898356347235, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 62, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.611760901898504, 
    'attempts': 1, 'timeIncrement': 0.0148625455512686, 'increment': 62, 
    'stepTime': 0.611760901898504, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 63, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.634054720225406, 
    'attempts': 1, 'timeIncrement': 0.0222938183269028, 'increment': 63, 
    'stepTime': 0.634054720225406, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.634054720225406, 
    'attempts': ' 1U', 'timeIncrement': 0.0334407274903542, 'increment': 64, 
    'stepTime': 0.634054720225406, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 5, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 64, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.642414902097995, 
    'attempts': 2, 'timeIncrement': 0.00836018187258856, 'increment': 64, 
    'stepTime': 0.642414902097995, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 65, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.654955174906878, 
    'attempts': 1, 'timeIncrement': 0.0125402728088828, 'increment': 65, 
    'stepTime': 0.654955174906878, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 23 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 22 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 182 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.654955174906878, 
    'attempts': ' 1U', 'timeIncrement': 0.0188104092133243, 'increment': 66, 
    'stepTime': 0.654955174906878, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 5, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 66, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.659657777210209, 
    'attempts': 2, 'timeIncrement': 0.00470260230333107, 'increment': 66, 
    'stepTime': 0.659657777210209, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 67, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.666711680665205, 
    'attempts': 1, 'timeIncrement': 0.0070539034549966, 'increment': 67, 
    'stepTime': 0.666711680665205, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 68, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.6772925358477, 
    'attempts': 1, 'timeIncrement': 0.0105808551824949, 'increment': 68, 
    'stepTime': 0.6772925358477, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 69, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.693163818621443, 
    'attempts': 1, 'timeIncrement': 0.0158712827737423, 'increment': 69, 
    'stepTime': 0.693163818621443, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 70, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.716970742782056, 
    'attempts': 1, 'timeIncrement': 0.0238069241606135, 'increment': 70, 
    'stepTime': 0.716970742782056, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 71, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.752681129022976, 
    'attempts': 1, 'timeIncrement': 0.0357103862409203, 'increment': 71, 
    'stepTime': 0.752681129022976, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 100 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 163 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 624 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.752681129022976, 
    'attempts': ' 1U', 'timeIncrement': 0.0535655793613804, 'increment': 72, 
    'stepTime': 0.752681129022976, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 6 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 39 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 316 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 756 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 13 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.752681129022976, 
    'attempts': ' 2U', 'timeIncrement': 0.0133913948403451, 'increment': 72, 
    'stepTime': 0.752681129022976, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 5, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 72, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.756028977733063, 
    'attempts': 3, 'timeIncrement': 0.00334784871008628, 'increment': 72, 
    'stepTime': 0.756028977733063, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 73, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.761050750798192, 
    'attempts': 1, 'timeIncrement': 0.00502177306512941, 'increment': 73, 
    'stepTime': 0.761050750798192, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 74, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.768583410395886, 
    'attempts': 1, 'timeIncrement': 0.00753265959769412, 'increment': 74, 
    'stepTime': 0.768583410395886, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.768583410395886, 
    'attempts': ' 1U', 'timeIncrement': 0.0112989893965412, 'increment': 75, 
    'stepTime': 0.768583410395886, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 75, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.771408157745021, 
    'attempts': 2, 'timeIncrement': 0.0028247473491353, 'increment': 75, 
    'stepTime': 0.771408157745021, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 76, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.775645278768724, 
    'attempts': 1, 'timeIncrement': 0.00423712102370294, 'increment': 76, 
    'stepTime': 0.775645278768724, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 77, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.782000960304279, 
    'attempts': 1, 'timeIncrement': 0.00635568153555442, 'increment': 77, 
    'stepTime': 0.782000960304279, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 78, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.791534482607611, 
    'attempts': 1, 'timeIncrement': 0.00953352230333162, 'increment': 78, 
    'stepTime': 0.791534482607611, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 79, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.805834766062608, 
    'attempts': 1, 'timeIncrement': 0.0143002834549974, 'increment': 79, 
    'stepTime': 0.805834766062608, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 80, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.827285191245104, 
    'attempts': 1, 'timeIncrement': 0.0214504251824962, 'increment': 80, 
    'stepTime': 0.827285191245104, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 81, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.859460829018848, 
    'attempts': 1, 'timeIncrement': 0.0321756377737442, 'increment': 81, 
    'stepTime': 0.859460829018848, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 5 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 12 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.859460829018848, 
    'attempts': ' 1U', 'timeIncrement': 0.0482634566606163, 'increment': 82, 
    'stepTime': 0.859460829018848, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.859460829018848, 
    'attempts': ' 2U', 'timeIncrement': 0.0120658641651541, 'increment': 82, 
    'stepTime': 0.859460829018848, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 82, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.862477295060137, 
    'attempts': 3, 'timeIncrement': 0.00301646604128852, 'increment': 82, 
    'stepTime': 0.862477295060137, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 83, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.86700199412207, 
    'attempts': 1, 'timeIncrement': 0.00452469906193278, 'increment': 83, 
    'stepTime': 0.86700199412207, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 84, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.873789042714969, 
    'attempts': 1, 'timeIncrement': 0.00678704859289917, 'increment': 84, 
    'stepTime': 0.873789042714969, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 85, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.883969615604318, 
    'attempts': 1, 'timeIncrement': 0.0101805728893488, 'increment': 85, 
    'stepTime': 0.883969615604318, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.883969615604318, 
    'attempts': ' 1U', 'timeIncrement': 0.0152708593340231, 'increment': 86, 
    'stepTime': 0.883969615604318, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 9, 'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 86, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.887787330437823, 
    'attempts': 2, 'timeIncrement': 0.00381771483350579, 'increment': 86, 
    'stepTime': 0.887787330437823, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 87, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.893513902688082, 
    'attempts': 1, 'timeIncrement': 0.00572657225025868, 'increment': 87, 
    'stepTime': 0.893513902688082, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 88, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.90210376106347, 
    'attempts': 1, 'timeIncrement': 0.00858985837538802, 'increment': 88, 
    'stepTime': 0.90210376106347, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 89, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.914988548626552, 
    'attempts': 1, 'timeIncrement': 0.012884787563082, 'increment': 89, 
    'stepTime': 0.914988548626552, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 90, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.934315729971175, 
    'attempts': 1, 'timeIncrement': 0.019327181344623, 'increment': 90, 
    'stepTime': 0.934315729971175, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 91, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.953642911315798, 
    'attempts': 1, 'timeIncrement': 0.019327181344623, 'increment': 91, 
    'stepTime': 0.953642911315798, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 92, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.972970092660421, 
    'attempts': 1, 'timeIncrement': 0.019327181344623, 'increment': 92, 
    'stepTime': 0.972970092660421, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.972970092660421, 
    'attempts': ' 1U', 'timeIncrement': 0.0270299073395788, 'increment': 93, 
    'stepTime': 0.972970092660421, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 93, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.979727569495316, 
    'attempts': 2, 'timeIncrement': 0.00675747683489469, 'increment': 93, 
    'stepTime': 0.979727569495316, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 94, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.989863784747658, 
    'attempts': 1, 'timeIncrement': 0.010136215252342, 'increment': 94, 
    'stepTime': 0.989863784747658, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 95, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.010136215252342, 'increment': 95, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 740.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 15 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 67 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 217 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 7, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.5, 'attempts': 1, 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.5, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.5, 'attempts': ' 1U', 
    'timeIncrement': 0.375, 'increment': 3, 'stepTime': 0.5, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.59375, 'attempts': 2, 
    'timeIncrement': 0.09375, 'increment': 3, 'stepTime': 0.59375, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.734375, 'attempts': 1, 
    'timeIncrement': 0.140625, 'increment': 4, 'stepTime': 0.734375, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.9453125, 'attempts': 1, 
    'timeIncrement': 0.2109375, 'increment': 5, 'stepTime': 0.9453125, 
    'step': 2, 'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0546875, 'increment': 6, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 3, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 738.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 3, 
    'jobName': 'FLANGERTJ', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_COMPLETED, {
    'time': 'Mon Nov 26 00:05:26 2018', 'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].boundaryConditions['BOLTRTJEDGE'].setValues(typeName=
    YSYMM)
mdb.models['Model-RTJ'].boundaryConditions['GASKS1'].setValues(typeName=YSYMM)
mdb.models['Model-RTJ'].rootAssembly.Set(faces=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    mask=('[#20002004 ]', ), )+\
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), ), name='flangeglobal')
mdb.models['Model-RTJ'].rootAssembly.Set(faces=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    ('[#20002004 ]', ), ), name='flangeglobal')
mdb.models['Model-RTJ'].rootAssembly.Set(name='gasketglobal', nodes=
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].nodes.getSequenceFromMask(
    mask=('[#ffffff03 #3fffffff #0:4 #78000f00 #0:3 #fffffc00 #ffffffff:5', 
    ' #1ffff #0:76 #fff00000 #ffffffff #ffff ]', ), ))
mdb.models['Model-RTJ'].rootAssembly.Set(name='RTJBOLTEDGES', nodes=
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].nodes.getSequenceFromMask(
    mask=('[#980 #0 #60000 #c000 ]', ), ))
mdb.models['Model-RTJ'].ZsymmBC(createStepName='RTJ bolt load', localCsys=None, 
    name='gasket global', region=
    mdb.models['Model-RTJ'].rootAssembly.sets['gasketglobal'])
mdb.models['Model-RTJ'].rootAssembly.Set(name='RTJ edgeglobal', nodes=
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].nodes.getSequenceFromMask(
    mask=('[#30 #0:5 #7fff000 ]', ), ))
mdb.models['Model-RTJ'].YsymmBC(createStepName='RTJ bolt load', localCsys=None, 
    name='BC-8', region=
    mdb.models['Model-RTJ'].rootAssembly.sets['RTJ edgeglobal'])
mdb.models['Model-RTJ'].boundaryConditions.changeKey(fromName='BC-8', toName=
    'rtjglobaledge')
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-3-RTJ-1-ASSEMBLY_CP-3-FLANGE-1), NOT ALL THE NODES THAT HAVE BEEN ADJUSTED WERE PRINTED. SPECIFY *PREPRINT,CONTACT=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 21044, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 702.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 593 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3250 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 7585 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8050 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8768 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8814 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8827 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8865 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8844 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8873 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 3 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 10, 'iterations': 11, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 82 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 238 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1241 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 81 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 185 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 763 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 49 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 5, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.00390625, 'attempts': 5, 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.00390625, 
    'step': 1, 'jobName': 'FLANGERTJ', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0078125, 'attempts': 1, 
    'timeIncrement': 0.00390625, 'increment': 2, 'stepTime': 0.0078125, 
    'step': 1, 'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.013671875, 
    'attempts': 1, 'timeIncrement': 0.005859375, 'increment': 3, 
    'stepTime': 0.013671875, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 1, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0224609375, 
    'attempts': 1, 'timeIncrement': 0.0087890625, 'increment': 4, 
    'stepTime': 0.0224609375, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.03564453125, 
    'attempts': 1, 'timeIncrement': 0.01318359375, 'increment': 5, 
    'stepTime': 0.03564453125, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].loads['External Moment'].setValues(cm2=-75471.0, 
    distributionType=UNIFORM, field='')
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-3-RTJ-1-ASSEMBLY_CP-3-FLANGE-1), NOT ALL THE NODES THAT HAVE BEEN ADJUSTED WERE PRINTED. SPECIFY *PREPRINT,CONTACT=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 19480, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 702.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 593 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3250 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 7585 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8050 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8768 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8814 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8827 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8865 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8844 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8873 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 3 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 10, 'iterations': 11, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 82 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 238 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1241 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 81 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 185 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 763 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 49 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 5, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.00390625, 'attempts': 5, 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.00390625, 
    'step': 1, 'jobName': 'FLANGERTJ', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0078125, 'attempts': 1, 
    'timeIncrement': 0.00390625, 'increment': 2, 'stepTime': 0.0078125, 
    'step': 1, 'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.013671875, 
    'attempts': 1, 'timeIncrement': 0.005859375, 'increment': 3, 
    'stepTime': 0.013671875, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 1, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0224609375, 
    'attempts': 1, 'timeIncrement': 0.0087890625, 'increment': 4, 
    'stepTime': 0.0224609375, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.03564453125, 
    'attempts': 1, 'timeIncrement': 0.01318359375, 'increment': 5, 
    'stepTime': 0.03564453125, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.055419921875, 
    'attempts': 1, 'timeIncrement': 0.019775390625, 'increment': 6, 
    'stepTime': 0.055419921875, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0850830078125, 
    'attempts': 1, 'timeIncrement': 0.0296630859375, 'increment': 7, 
    'stepTime': 0.0850830078125, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 41 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 55 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0850830078125, 
    'attempts': ' 1U', 'timeIncrement': 0.04449462890625, 'increment': 8, 
    'stepTime': 0.0850830078125, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 5, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0962066650390625, 
    'attempts': 2, 'timeIncrement': 0.0111236572265625, 'increment': 8, 
    'stepTime': 0.0962066650390625, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 149 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 372 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 27 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0962066650390625, 
    'attempts': ' 1U', 'timeIncrement': 0.0166854858398438, 'increment': 9, 
    'stepTime': 0.0962066650390625, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.100378036499023, 
    'attempts': 2, 'timeIncrement': 0.00417137145996094, 'increment': 9, 
    'stepTime': 0.100378036499023, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.106635093688965, 
    'attempts': 1, 'timeIncrement': 0.00625705718994141, 'increment': 10, 
    'stepTime': 0.106635093688965, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.116020679473877, 
    'attempts': 1, 'timeIncrement': 0.00938558578491211, 'increment': 11, 
    'stepTime': 0.116020679473877, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.130099058151245, 
    'attempts': 1, 'timeIncrement': 0.0140783786773682, 'increment': 12, 
    'stepTime': 0.130099058151245, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.151216626167297, 
    'attempts': 1, 'timeIncrement': 0.0211175680160522, 'increment': 13, 
    'stepTime': 0.151216626167297, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 70 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 16 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.151216626167297, 
    'attempts': ' 1U', 'timeIncrement': 0.0316763520240784, 'increment': 14, 
    'stepTime': 0.151216626167297, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 5, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.159135714173317, 
    'attempts': 2, 'timeIncrement': 0.00791908800601959, 'increment': 14, 
    'stepTime': 0.159135714173317, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.171014346182346, 
    'attempts': 1, 'timeIncrement': 0.0118786320090294, 'increment': 15, 
    'stepTime': 0.171014346182346, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.171014346182346, 
    'attempts': ' 1U', 'timeIncrement': 0.0178179480135441, 'increment': 16, 
    'stepTime': 0.171014346182346, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.175468833185732, 
    'attempts': 2, 'timeIncrement': 0.00445448700338602, 'increment': 16, 
    'stepTime': 0.175468833185732, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.182150563690811, 
    'attempts': 1, 'timeIncrement': 0.00668173050507903, 'increment': 17, 
    'stepTime': 0.182150563690811, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.19217315944843, 
    'attempts': 1, 'timeIncrement': 0.0100225957576185, 'increment': 18, 
    'stepTime': 0.19217315944843, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.207207053084858, 
    'attempts': 1, 'timeIncrement': 0.0150338936364278, 'increment': 19, 
    'stepTime': 0.207207053084858, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.207207053084858, 
    'attempts': ' 1U', 'timeIncrement': 0.0225508404546417, 'increment': 20, 
    'stepTime': 0.207207053084858, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.212844763198518, 
    'attempts': 2, 'timeIncrement': 0.00563771011366043, 'increment': 20, 
    'stepTime': 0.212844763198518, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.221301328369009, 
    'attempts': 1, 'timeIncrement': 0.00845656517049065, 'increment': 21, 
    'stepTime': 0.221301328369009, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 22, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.233986176124745, 
    'attempts': 1, 'timeIncrement': 0.012684847755736, 'increment': 22, 
    'stepTime': 0.233986176124745, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 23, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.253013447758349, 
    'attempts': 1, 'timeIncrement': 0.019027271633604, 'increment': 23, 
    'stepTime': 0.253013447758349, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 16 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.253013447758349, 
    'attempts': ' 1U', 'timeIncrement': 0.0285409074504059, 'increment': 24, 
    'stepTime': 0.253013447758349, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 24, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.26014867462095, 
    'attempts': 2, 'timeIncrement': 0.00713522686260148, 'increment': 24, 
    'stepTime': 0.26014867462095, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 25, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.270851514914852, 
    'attempts': 1, 'timeIncrement': 0.0107028402939022, 'increment': 25, 
    'stepTime': 0.270851514914852, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 26, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.286905775355706, 
    'attempts': 1, 'timeIncrement': 0.0160542604408533, 'increment': 26, 
    'stepTime': 0.286905775355706, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.286905775355706, 
    'attempts': ' 1U', 'timeIncrement': 0.02408139066128, 'increment': 27, 
    'stepTime': 0.286905775355706, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 27, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.292926123021026, 
    'attempts': 2, 'timeIncrement': 0.00602034766532, 'increment': 27, 
    'stepTime': 0.292926123021026, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 28, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.301956644519006, 
    'attempts': 1, 'timeIncrement': 0.00903052149798, 'increment': 28, 
    'stepTime': 0.301956644519006, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 29, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.315502426765976, 
    'attempts': 1, 'timeIncrement': 0.01354578224697, 'increment': 29, 
    'stepTime': 0.315502426765976, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 30, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.335821100136431, 
    'attempts': 1, 'timeIncrement': 0.020318673370455, 'increment': 30, 
    'stepTime': 0.335821100136431, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.335821100136431, 
    'attempts': ' 1U', 'timeIncrement': 0.0304780100556825, 'increment': 31, 
    'stepTime': 0.335821100136431, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 5, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 31, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.343440602650351, 
    'attempts': 2, 'timeIncrement': 0.00761950251392063, 'increment': 31, 
    'stepTime': 0.343440602650351, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 18 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.343440602650351, 
    'attempts': ' 1U', 'timeIncrement': 0.0114292537708809, 'increment': 32, 
    'stepTime': 0.343440602650351, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 32, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.346297916093072, 
    'attempts': 2, 'timeIncrement': 0.00285731344272024, 'increment': 32, 
    'stepTime': 0.346297916093072, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 33, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.350583886257152, 
    'attempts': 1, 'timeIncrement': 0.00428597016408035, 'increment': 33, 
    'stepTime': 0.350583886257152, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 34, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.357012841503273, 
    'attempts': 1, 'timeIncrement': 0.00642895524612053, 'increment': 34, 
    'stepTime': 0.357012841503273, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 35, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.366656274372453, 
    'attempts': 1, 'timeIncrement': 0.0096434328691808, 'increment': 35, 
    'stepTime': 0.366656274372453, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.366656274372453, 
    'attempts': ' 1U', 'timeIncrement': 0.0144651493037712, 'increment': 36, 
    'stepTime': 0.366656274372453, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 5, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 36, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.370272561698396, 
    'attempts': 2, 'timeIncrement': 0.0036162873259428, 'increment': 36, 
    'stepTime': 0.370272561698396, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 37, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.37569699268731, 
    'attempts': 1, 'timeIncrement': 0.0054244309889142, 'increment': 37, 
    'stepTime': 0.37569699268731, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 38, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.383833639170682, 
    'attempts': 1, 'timeIncrement': 0.0081366464833713, 'increment': 38, 
    'stepTime': 0.383833639170682, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 39, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.396038608895739, 
    'attempts': 1, 'timeIncrement': 0.0122049697250569, 'increment': 39, 
    'stepTime': 0.396038608895739, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.396038608895739, 
    'attempts': ' 1U', 'timeIncrement': 0.0183074545875854, 'increment': 40, 
    'stepTime': 0.396038608895739, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 40, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.400615472542635, 
    'attempts': 2, 'timeIncrement': 0.00457686364689635, 'increment': 40, 
    'stepTime': 0.400615472542635, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 41, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.40748076801298, 
    'attempts': 1, 'timeIncrement': 0.00686529547034453, 'increment': 41, 
    'stepTime': 0.40748076801298, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 42, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.417778711218496, 
    'attempts': 1, 'timeIncrement': 0.0102979432055168, 'increment': 42, 
    'stepTime': 0.417778711218496, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 43, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.433225626026772, 
    'attempts': 1, 'timeIncrement': 0.0154469148082752, 'increment': 43, 
    'stepTime': 0.433225626026772, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 44, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.456395998239184, 
    'attempts': 1, 'timeIncrement': 0.0231703722124128, 'increment': 44, 
    'stepTime': 0.456395998239184, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 45, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.491151556557804, 
    'attempts': 1, 'timeIncrement': 0.0347555583186192, 'increment': 45, 
    'stepTime': 0.491151556557804, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 23 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.491151556557804, 
    'attempts': ' 1U', 'timeIncrement': 0.0521333374779288, 'increment': 46, 
    'stepTime': 0.491151556557804, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 11 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 45 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 160 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.491151556557804, 
    'attempts': ' 2U', 'timeIncrement': 0.0130333343694822, 'increment': 46, 
    'stepTime': 0.491151556557804, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 5, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 46, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.494409890150174, 
    'attempts': 3, 'timeIncrement': 0.00325833359237055, 'increment': 46, 
    'stepTime': 0.494409890150174, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 47, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.49929739053873, 
    'attempts': 1, 'timeIncrement': 0.00488750038855582, 'increment': 47, 
    'stepTime': 0.49929739053873, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 48, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.506628641121564, 
    'attempts': 1, 'timeIncrement': 0.00733125058283374, 'increment': 48, 
    'stepTime': 0.506628641121564, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 49, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.517625516995814, 
    'attempts': 1, 'timeIncrement': 0.0109968758742506, 'increment': 49, 
    'stepTime': 0.517625516995814, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 50, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.528622392870065, 
    'attempts': 1, 'timeIncrement': 0.0109968758742506, 'increment': 50, 
    'stepTime': 0.528622392870065, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 51, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.539619268744315, 
    'attempts': 1, 'timeIncrement': 0.0109968758742506, 'increment': 51, 
    'stepTime': 0.539619268744315, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 52, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.556114582555691, 
    'attempts': 1, 'timeIncrement': 0.0164953138113759, 'increment': 52, 
    'stepTime': 0.556114582555691, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 5 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 204 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.556114582555691, 
    'attempts': ' 1U', 'timeIncrement': 0.0247429707170639, 'increment': 53, 
    'stepTime': 0.556114582555691, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 53, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.562300325234957, 
    'attempts': 2, 'timeIncrement': 0.00618574267926596, 'increment': 53, 
    'stepTime': 0.562300325234957, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.562300325234957, 
    'attempts': ' 1U', 'timeIncrement': 0.00927861401889895, 'increment': 54, 
    'stepTime': 0.562300325234957, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 5, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 54, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.564619978739682, 
    'attempts': 2, 'timeIncrement': 0.00231965350472474, 'increment': 54, 
    'stepTime': 0.564619978739682, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 55, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.568099458996769, 
    'attempts': 1, 'timeIncrement': 0.0034794802570871, 'increment': 55, 
    'stepTime': 0.568099458996769, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 56, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.5733186793824, 
    'attempts': 1, 'timeIncrement': 0.00521922038563066, 'increment': 56, 
    'stepTime': 0.5733186793824, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 57, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.581147509960846, 
    'attempts': 1, 'timeIncrement': 0.00782883057844599, 'increment': 57, 
    'stepTime': 0.581147509960846, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 58, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.592890755828515, 
    'attempts': 1, 'timeIncrement': 0.011743245867669, 'increment': 58, 
    'stepTime': 0.592890755828515, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 59, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.610505624630018, 
    'attempts': 1, 'timeIncrement': 0.0176148688015035, 'increment': 59, 
    'stepTime': 0.610505624630018, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 60, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.636927927832273, 
    'attempts': 1, 'timeIncrement': 0.0264223032022552, 'increment': 60, 
    'stepTime': 0.636927927832273, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 61 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.636927927832273, 
    'attempts': ' 1U', 'timeIncrement': 0.0396334548033828, 'increment': 61, 
    'stepTime': 0.636927927832273, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 61, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.646836291533119, 
    'attempts': 2, 'timeIncrement': 0.0099083637008457, 'increment': 61, 
    'stepTime': 0.646836291533119, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.646836291533119, 
    'attempts': ' 1U', 'timeIncrement': 0.0148625455512686, 'increment': 62, 
    'stepTime': 0.646836291533119, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 62, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.650551927920936, 
    'attempts': 2, 'timeIncrement': 0.00371563638781714, 'increment': 62, 
    'stepTime': 0.650551927920936, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 63, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.656125382502662, 
    'attempts': 1, 'timeIncrement': 0.00557345458172571, 'increment': 63, 
    'stepTime': 0.656125382502662, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 64, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.664485564375251, 
    'attempts': 1, 'timeIncrement': 0.00836018187258856, 'increment': 64, 
    'stepTime': 0.664485564375251, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.664485564375251, 
    'attempts': ' 1U', 'timeIncrement': 0.0125402728088828, 'increment': 65, 
    'stepTime': 0.664485564375251, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 5, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 65, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.667620632577471, 
    'attempts': 2, 'timeIncrement': 0.00313506820222071, 'increment': 65, 
    'stepTime': 0.667620632577471, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 66, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.672323234880802, 
    'attempts': 1, 'timeIncrement': 0.00470260230333107, 'increment': 66, 
    'stepTime': 0.672323234880802, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 67, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.679377138335799, 
    'attempts': 1, 'timeIncrement': 0.0070539034549966, 'increment': 67, 
    'stepTime': 0.679377138335799, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 68, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.689957993518294, 
    'attempts': 1, 'timeIncrement': 0.0105808551824949, 'increment': 68, 
    'stepTime': 0.689957993518294, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 69, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.705829276292036, 
    'attempts': 1, 'timeIncrement': 0.0158712827737423, 'increment': 69, 
    'stepTime': 0.705829276292036, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 70, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.72963620045265, 
    'attempts': 1, 'timeIncrement': 0.0238069241606135, 'increment': 70, 
    'stepTime': 0.72963620045265, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.72963620045265, 
    'attempts': ' 1U', 'timeIncrement': 0.0357103862409203, 'increment': 71, 
    'stepTime': 0.72963620045265, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 71, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.73856379701288, 
    'attempts': 2, 'timeIncrement': 0.00892759656023007, 'increment': 71, 
    'stepTime': 0.73856379701288, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 4 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.73856379701288, 
    'attempts': ' 1U', 'timeIncrement': 0.0133913948403451, 'increment': 72, 
    'stepTime': 0.73856379701288, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 72, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.741911645722966, 
    'attempts': 2, 'timeIncrement': 0.00334784871008628, 'increment': 72, 
    'stepTime': 0.741911645722966, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 73, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.746933418788095, 
    'attempts': 1, 'timeIncrement': 0.00502177306512941, 'increment': 73, 
    'stepTime': 0.746933418788095, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 74, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.75446607838579, 
    'attempts': 1, 'timeIncrement': 0.00753265959769412, 'increment': 74, 
    'stepTime': 0.75446607838579, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 75, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.765765067782331, 
    'attempts': 1, 'timeIncrement': 0.0112989893965412, 'increment': 75, 
    'stepTime': 0.765765067782331, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 5, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 5 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.765765067782331, 
    'attempts': ' 1U', 'timeIncrement': 0.0169484840948118, 'increment': 76, 
    'stepTime': 0.765765067782331, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 76, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.770002188806034, 
    'attempts': 2, 'timeIncrement': 0.00423712102370294, 'increment': 76, 
    'stepTime': 0.770002188806034, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 77, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.776357870341588, 
    'attempts': 1, 'timeIncrement': 0.00635568153555442, 'increment': 77, 
    'stepTime': 0.776357870341588, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 78, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.78589139264492, 
    'attempts': 1, 'timeIncrement': 0.00953352230333162, 'increment': 78, 
    'stepTime': 0.78589139264492, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 79, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.800191676099917, 
    'attempts': 1, 'timeIncrement': 0.0143002834549974, 'increment': 79, 
    'stepTime': 0.800191676099917, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['FLANGERTJ']._Message(JOB_COMPLETED, {
    'time': 'Mon Nov 26 01:19:02 2018', 'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].rootAssembly.Set(name='Set-17', nodes=
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].nodes.getSequenceFromMask(
    mask=('[#c #0:3 #fffc0000 #ffffffff #800000ff #7 #1e000', 
    ' #0:7 #fffe0000 #ffffffff:5 #ffffff #0:83 #ffffffff #fffffff ]', ), ))
mdb.models['Model-RTJ'].rootAssembly.sets.changeKey(fromName='Set-17', toName=
    'RTJSideS1')
mdb.models['Model-RTJ'].ZsymmBC(createStepName='RTJ bolt load', localCsys=
    mdb.models['Model-RTJ'].rootAssembly.datums[104], name='BC-9', region=
    mdb.models['Model-RTJ'].rootAssembly.sets['RTJSideS1'])
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].boundaryConditions.changeKey(fromName='BC-9', toName=
    'RTJSIDES1')
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-3-RTJ-1-ASSEMBLY_CP-3-FLANGE-1), NOT ALL THE NODES THAT HAVE BEEN ADJUSTED WERE PRINTED. SPECIFY *PREPRINT,CONTACT=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 12348, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 702.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 565 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3270 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 7468 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 5834 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8161 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8592 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 54 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 6, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 673 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 929 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3747 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 5209 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8661 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 462 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.25, 'attempts': ' 1U', 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 44 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 440 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2396 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3401 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 6614 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 428 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.25, 'attempts': ' 2U', 
    'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.265625, 'attempts': 3, 
    'timeIncrement': 0.015625, 'increment': 2, 'stepTime': 0.265625, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 276 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1587 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2687 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 4380 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 6284 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 18 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.265625, 
    'attempts': ' 1U', 'timeIncrement': 0.0234375, 'increment': 3, 
    'stepTime': 0.265625, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 5, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.271484375, 
    'attempts': 2, 'timeIncrement': 0.005859375, 'increment': 3, 
    'stepTime': 0.271484375, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 275 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 437 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1493 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2624 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3795 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 5875 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 86 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.271484375, 
    'attempts': ' 1U', 'timeIncrement': 0.0087890625, 'increment': 4, 
    'stepTime': 0.271484375, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 5, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 44 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 258 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 690 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.273681640625, 
    'attempts': 2, 'timeIncrement': 0.002197265625, 'increment': 4, 
    'stepTime': 0.273681640625, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 3, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 830 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3247 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 4952 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 33 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.273681640625, 
    'attempts': ' 1U', 'timeIncrement': 0.0032958984375, 'increment': 5, 
    'stepTime': 0.273681640625, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 1, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1825 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3838 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 5246 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 133 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.273681640625, 
    'attempts': ' 2U', 'timeIncrement': 0.000823974609375, 'increment': 5, 
    'stepTime': 0.273681640625, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 2, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.273887634277344, 
    'attempts': 3, 'timeIncrement': 0.00020599365234375, 'increment': 5, 
    'stepTime': 0.273887634277344, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1383 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2958 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 18 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.273887634277344, 
    'attempts': ' 1U', 'timeIncrement': 0.000308990478515625, 'increment': 6, 
    'stepTime': 0.273887634277344, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 68 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 368 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 695 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1658 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2549 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 1 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.273887634277344, 
    'attempts': ' 2U', 'timeIncrement': 7.72476196289063e-05, 'increment': 6, 
    'stepTime': 0.273887634277344, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.273906946182251, 
    'attempts': 3, 'timeIncrement': 1.93119049072266e-05, 'increment': 6, 
    'stepTime': 0.273906946182251, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 53 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.273935914039612, 
    'attempts': 1, 'timeIncrement': 2.89678573608398e-05, 'increment': 7, 
    'stepTime': 0.273935914039612, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 53 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1014 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 9130 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 1273 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.273935914039612, 
    'attempts': ' 1U', 'timeIncrement': 4.34517860412598e-05, 'increment': 8, 
    'stepTime': 0.273935914039612, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 778 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1503 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 30 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.273935914039612, 
    'attempts': ' 2U', 'timeIncrement': 1.08629465103149e-05, 'increment': 8, 
    'stepTime': 0.273935914039612, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 768 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1046 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 10 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Time increment required is less than the minimum specified', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.273935914039612, 
    'attempts': ' 3U', 'timeIncrement': 1e-05, 'increment': 8, 
    'stepTime': 0.273935914039612, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.273935914039612, 
    'attempts': 4, 'timeIncrement': 1e-35, 'increment': 8, 
    'stepTime': 0.273935914039612, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
del mdb.models['Model-RTJ'].rootAssembly.sectionAssignments[0]
mdb.models['Model-RTJ'].rootAssembly.Set(edges=
    mdb.models['Model-RTJ'].rootAssembly.edges.getSequenceFromMask(('[#ff ]', 
    ), ), name='Set-39')
mdb.models['Model-RTJ'].rootAssembly.SectionAssignment(region=
    mdb.models['Model-RTJ'].rootAssembly.sets['Set-39'], sectionName=
    'ConnSect-1')
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-3-RTJ-1-ASSEMBLY_CP-3-FLANGE-1), NOT ALL THE NODES THAT HAVE BEEN ADJUSTED WERE PRINTED. SPECIFY *PREPRINT,CONTACT=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 19652, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 702.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 565 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3270 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 7468 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 5834 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8161 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8592 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 54 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 6, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 673 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 929 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3747 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 5209 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8661 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 462 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.25, 'attempts': ' 1U', 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 44 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 440 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2396 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3401 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 6614 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 428 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.25, 'attempts': ' 2U', 
    'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.265625, 'attempts': 3, 
    'timeIncrement': 0.015625, 'increment': 2, 'stepTime': 0.265625, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 276 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1587 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2687 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 4380 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 6284 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 18 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.265625, 
    'attempts': ' 1U', 'timeIncrement': 0.0234375, 'increment': 3, 
    'stepTime': 0.265625, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 5, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.271484375, 
    'attempts': 2, 'timeIncrement': 0.005859375, 'increment': 3, 
    'stepTime': 0.271484375, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 275 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 437 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1493 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2624 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3795 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 5875 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 86 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.271484375, 
    'attempts': ' 1U', 'timeIncrement': 0.0087890625, 'increment': 4, 
    'stepTime': 0.271484375, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 5, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 44 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 258 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 690 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.273681640625, 
    'attempts': 2, 'timeIncrement': 0.002197265625, 'increment': 4, 
    'stepTime': 0.273681640625, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 3, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 830 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3247 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 4952 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 33 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.273681640625, 
    'attempts': ' 1U', 'timeIncrement': 0.0032958984375, 'increment': 5, 
    'stepTime': 0.273681640625, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 1, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1825 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3838 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 5246 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 133 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.273681640625, 
    'attempts': ' 2U', 'timeIncrement': 0.000823974609375, 'increment': 5, 
    'stepTime': 0.273681640625, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 2, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.273887634277344, 
    'attempts': 3, 'timeIncrement': 0.00020599365234375, 'increment': 5, 
    'stepTime': 0.273887634277344, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1383 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2958 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 18 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.273887634277344, 
    'attempts': ' 1U', 'timeIncrement': 0.000308990478515625, 'increment': 6, 
    'stepTime': 0.273887634277344, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 68 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 368 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 695 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1658 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2549 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 1 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.273887634277344, 
    'attempts': ' 2U', 'timeIncrement': 7.72476196289063e-05, 'increment': 6, 
    'stepTime': 0.273887634277344, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.273906946182251, 
    'attempts': 3, 'timeIncrement': 1.93119049072266e-05, 'increment': 6, 
    'stepTime': 0.273906946182251, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 53 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.273935914039612, 
    'attempts': 1, 'timeIncrement': 2.89678573608398e-05, 'increment': 7, 
    'stepTime': 0.273935914039612, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 53 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1014 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 9130 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 1273 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.273935914039612, 
    'attempts': ' 1U', 'timeIncrement': 4.34517860412598e-05, 'increment': 8, 
    'stepTime': 0.273935914039612, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 778 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1503 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 30 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.273935914039612, 
    'attempts': ' 2U', 'timeIncrement': 1.08629465103149e-05, 'increment': 8, 
    'stepTime': 0.273935914039612, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 768 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1046 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 10 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Time increment required is less than the minimum specified', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.273935914039612, 
    'attempts': ' 3U', 'timeIncrement': 1e-05, 'increment': 8, 
    'stepTime': 0.273935914039612, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.273935914039612, 
    'attempts': 4, 'timeIncrement': 1e-35, 'increment': 8, 
    'stepTime': 0.273935914039612, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].interactions['CP-1-FLANGE-1-BOLT-1'].setValues(
    adjustMethod=NONE, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    thickness=ON, tied=OFF)
mdb.models['Model-RTJ'].interactions['CP-3-FLANGE-1-RTJ-1'].setValues(
    adjustMethod=NONE, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    thickness=ON, tied=OFF)
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 10524, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 700.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 13157 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 13158 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 1208 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 12191 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 12020 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 3483 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_3.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_3.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_3.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_3.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_3.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_3.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_3.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 7389 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_3.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_3.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_3.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 11774 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 260 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_4.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_4.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_4.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1849 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3071 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 6902 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 207 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 134 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 238 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2061 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 89 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].materials['FLANGE'].GasketThicknessBehavior(table=((
    0.0, 0.0), (34.48275862, 0.0438), (68.96551724, 0.0501), (103.4482759, 
    0.0555), (137.9310345, 0.0606), (172.4137931, 0.0642), (206.8965517, 
    0.0702), (241.3793103, 0.0756), (275.862069, 0.081), (310.3448276, 0.0876), 
    (344.8275862, 0.096), (379.3103448, 0.1062)), unloadingTable=((0.0, 0.0, 
    0.0738), (34.48275862, 0.0438, 0.09), (68.96551724, 0.0501, 0.096), (
    103.4482759, 0.0555, 0.0996), (137.9310345, 0.0606, 0.102), (172.4137931, 
    0.0, 0.1032), (206.8965517, 0.0, 0.1038), (241.3793103, 0.0, 0.1044), (
    275.862069, 0.0, 0.1047), (310.3448276, 0.0, 0.105), (344.8275862, 0.0, 
    0.1056), (379.3103448, 0.0, 0.1062)))
del mdb.models['Model-RTJ'].materials['FLANGE'].gasketThicknessBehavior
del mdb.models['Model-RTJ'].materials['RTJ Gasket'].plastic
mdb.models['Model-RTJ'].materials['RTJ Gasket'].GasketThicknessBehavior(table=(
    (0.0, 0.0), (34.48275862, 0.0438), (68.96551724, 0.0501), (103.4482759, 
    0.0555), (137.9310345, 0.0606), (172.4137931, 0.0642), (206.8965517, 
    0.0702), (241.3793103, 0.0756), (275.862069, 0.081), (310.3448276, 0.0876), 
    (344.8275862, 0.096), (379.3103448, 0.1062)), unloadingTable=((0.0, 0.0, 
    0.0738), (34.48275862, 0.0438, 0.09), (68.96551724, 0.0501, 0.096), (
    103.4482759, 0.0555, 0.0996), (137.9310345, 0.0606, 0.102), (172.4137931, 
    0.0, 0.1032), (206.8965517, 0.0, 0.1038), (241.3793103, 0.0, 0.1044), (
    275.862069, 0.0, 0.1047), (310.3448276, 0.0, 0.105), (344.8275862, 0.0, 
    0.1056), (379.3103448, 0.0, 0.1062)))
mdb.models['Model-RTJ'].materials['RTJ Gasket'].GasketTransverseShearElastic(
    table=((79300.0, ), ))
mdb.models['Model-RTJ'].materials['RTJ Gasket'].GasketMembraneElastic(table=((
    200000.0, 0.26), ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 20192, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 700.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 8, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 8, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 731.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_2_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_2_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.5, 'attempts': 1, 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.5, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.875, 'attempts': 1, 
    'timeIncrement': 0.375, 'increment': 3, 'stepTime': 0.875, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.125, 'increment': 4, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 3, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 729.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 3, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 29 16:53:54 2018', 'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].boundaryConditions['rtjglobaledge'].setValues(typeName=
    PINNED)
mdb.models['Model-RTJ'].boundaryConditions['RTJTOP'].setValues(typeName=PINNED)
mdb.models['Model-RTJ'].boundaryConditions['GASKS1'].setValues(typeName=PINNED)
mdb.models['Model-RTJ'].boundaryConditions['BOLTTOP'].setValues(typeName=
    PINNED)
mdb.models['Model-RTJ'].boundaryConditions['BOLTRTJEDGE'].setValues(typeName=
    PINNED)
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 25792, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 700.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_2_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_2_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_2_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 6, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 6, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 707.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 6, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 3, 
    'jobName': 'FLANGERTJ', 'severe': 6, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 706.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_3_1_2_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_3_1_2_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_3_1_2_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_3_1_2_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 3, 
    'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 29 17:04:13 2018', 'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].materials['RTJ Gasket'].elastic.setValues(table=((
    200000.0, 0.26), ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 2020, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 700.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_2_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_2_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_2_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 6, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 6, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 707.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 8, 'iterations': 10, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 3, 
    'jobName': 'FLANGERTJ', 'severe': 8, 'iterations': 10, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 712.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 3, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 29 17:07:35 2018', 'jobName': 'FLANGERTJ'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].materials['RTJ Gasket'].Plastic(table=((200.0, 0.0), (
    246.0, 0.0235), (294.0, 0.0474), (374.0, 0.0935), (437.0, 0.1377), (480.0, 
    0.18)))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 20080, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 700.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 86 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 6859 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8956 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 11685 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 12719 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 1725 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 795 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1204 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 4688 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8684 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 43 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 412 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1376 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.015625, 'attempts': 4, 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.015625, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.03125, 'attempts': 1, 
    'timeIncrement': 0.015625, 'increment': 2, 'stepTime': 0.03125, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0546875, 'attempts': 1, 
    'timeIncrement': 0.0234375, 'increment': 3, 'stepTime': 0.0546875, 
    'step': 1, 'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.08984375, 'attempts': 1, 
    'timeIncrement': 0.03515625, 'increment': 4, 'stepTime': 0.08984375, 
    'step': 1, 'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 304 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 366 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.08984375, 
    'attempts': ' 1U', 'timeIncrement': 0.052734375, 'increment': 5, 
    'stepTime': 0.08984375, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 4, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.10302734375, 
    'attempts': 2, 'timeIncrement': 0.01318359375, 'increment': 5, 
    'stepTime': 0.10302734375, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.122802734375, 
    'attempts': 1, 'timeIncrement': 0.019775390625, 'increment': 6, 
    'stepTime': 0.122802734375, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 1, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.1524658203125, 
    'attempts': 1, 'timeIncrement': 0.0296630859375, 'increment': 7, 
    'stepTime': 0.1524658203125, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.19696044921875, 
    'attempts': 1, 'timeIncrement': 0.04449462890625, 'increment': 8, 
    'stepTime': 0.19696044921875, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 262 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 712 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.19696044921875, 
    'attempts': ' 1U', 'timeIncrement': 0.066741943359375, 'increment': 9, 
    'stepTime': 0.19696044921875, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 43 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 86 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 218 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.19696044921875, 
    'attempts': ' 2U', 'timeIncrement': 0.0166854858398438, 'increment': 9, 
    'stepTime': 0.19696044921875, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 5, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.201131820678711, 
    'attempts': 3, 'timeIncrement': 0.00417137145996094, 'increment': 9, 
    'stepTime': 0.201131820678711, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.207388877868652, 
    'attempts': 1, 'timeIncrement': 0.00625705718994141, 'increment': 10, 
    'stepTime': 0.207388877868652, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.216774463653564, 
    'attempts': 1, 'timeIncrement': 0.00938558578491211, 'increment': 11, 
    'stepTime': 0.216774463653564, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.230852842330933, 
    'attempts': 1, 'timeIncrement': 0.0140783786773682, 'increment': 12, 
    'stepTime': 0.230852842330933, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.251970410346985, 
    'attempts': 1, 'timeIncrement': 0.0211175680160522, 'increment': 13, 
    'stepTime': 0.251970410346985, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 51 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.251970410346985, 
    'attempts': ' 1U', 'timeIncrement': 0.0316763520240784, 'increment': 14, 
    'stepTime': 0.251970410346985, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.259889498353004, 
    'attempts': 2, 'timeIncrement': 0.00791908800601959, 'increment': 14, 
    'stepTime': 0.259889498353004, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.271768130362034, 
    'attempts': 1, 'timeIncrement': 0.0118786320090294, 'increment': 15, 
    'stepTime': 0.271768130362034, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.289586078375578, 
    'attempts': 1, 'timeIncrement': 0.0178179480135441, 'increment': 16, 
    'stepTime': 0.289586078375578, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.316313000395894, 
    'attempts': 1, 'timeIncrement': 0.0267269220203161, 'increment': 17, 
    'stepTime': 0.316313000395894, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.356403383426368, 
    'attempts': 1, 'timeIncrement': 0.0400903830304742, 'increment': 18, 
    'stepTime': 0.356403383426368, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 172 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 773 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2068 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2223 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3241 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 191 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.356403383426368, 
    'attempts': ' 1U', 'timeIncrement': 0.0601355745457113, 'increment': 19, 
    'stepTime': 0.356403383426368, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 5, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 86 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 173 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1438 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1355 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 4791 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 7242 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 15 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.356403383426368, 
    'attempts': ' 2U', 'timeIncrement': 0.0150338936364278, 'increment': 19, 
    'stepTime': 0.356403383426368, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.360161856835475, 
    'attempts': 3, 'timeIncrement': 0.00375847340910695, 'increment': 19, 
    'stepTime': 0.360161856835475, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.363920330244582, 
    'attempts': 1, 'timeIncrement': 0.00375847340910695, 'increment': 20, 
    'stepTime': 0.363920330244582, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.367678803653689, 
    'attempts': 1, 'timeIncrement': 0.00375847340910695, 'increment': 21, 
    'stepTime': 0.367678803653689, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 22, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.37331651376735, 
    'attempts': 1, 'timeIncrement': 0.00563771011366043, 'increment': 22, 
    'stepTime': 0.37331651376735, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 23, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.38177307893784, 
    'attempts': 1, 'timeIncrement': 0.00845656517049065, 'increment': 23, 
    'stepTime': 0.38177307893784, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 24, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.394457926693576, 
    'attempts': 1, 'timeIncrement': 0.012684847755736, 'increment': 24, 
    'stepTime': 0.394457926693576, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 25, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.41348519832718, 
    'attempts': 1, 'timeIncrement': 0.019027271633604, 'increment': 25, 
    'stepTime': 0.41348519832718, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 26, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.442026105777586, 
    'attempts': 1, 'timeIncrement': 0.0285409074504059, 'increment': 26, 
    'stepTime': 0.442026105777586, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 301 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 847 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3732 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.442026105777586, 
    'attempts': ' 1U', 'timeIncrement': 0.0428113611756089, 'increment': 27, 
    'stepTime': 0.442026105777586, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 5, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 27, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.452728946071488, 
    'attempts': 2, 'timeIncrement': 0.0107028402939022, 'increment': 27, 
    'stepTime': 0.452728946071488, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 339 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 703 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3352 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 7013 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 35 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.452728946071488, 
    'attempts': ' 1U', 'timeIncrement': 0.0160542604408533, 'increment': 28, 
    'stepTime': 0.452728946071488, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 28, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.456742511181702, 
    'attempts': 2, 'timeIncrement': 0.00401356511021334, 'increment': 28, 
    'stepTime': 0.456742511181702, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 29, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.462762858847022, 
    'attempts': 1, 'timeIncrement': 0.00602034766532, 'increment': 29, 
    'stepTime': 0.462762858847022, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 30, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.471793380345002, 
    'attempts': 1, 'timeIncrement': 0.00903052149798, 'increment': 30, 
    'stepTime': 0.471793380345002, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 31, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.485339162591972, 
    'attempts': 1, 'timeIncrement': 0.01354578224697, 'increment': 31, 
    'stepTime': 0.485339162591972, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 32, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.505657835962427, 
    'attempts': 1, 'timeIncrement': 0.020318673370455, 'increment': 32, 
    'stepTime': 0.505657835962427, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 6 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.505657835962427, 
    'attempts': ' 1U', 'timeIncrement': 0.0304780100556825, 'increment': 33, 
    'stepTime': 0.505657835962427, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 33, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.513277338476347, 
    'attempts': 2, 'timeIncrement': 0.00761950251392063, 'increment': 33, 
    'stepTime': 0.513277338476347, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 34, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.524706592247228, 
    'attempts': 1, 'timeIncrement': 0.0114292537708809, 'increment': 34, 
    'stepTime': 0.524706592247228, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 35, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.54185047290355, 
    'attempts': 1, 'timeIncrement': 0.0171438806563214, 'increment': 35, 
    'stepTime': 0.54185047290355, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 36, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.567566293888032, 
    'attempts': 1, 'timeIncrement': 0.0257158209844821, 'increment': 36, 
    'stepTime': 0.567566293888032, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 37, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.606140025364755, 
    'attempts': 1, 'timeIncrement': 0.0385737314767232, 'increment': 37, 
    'stepTime': 0.606140025364755, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 17 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 270 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1486 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.606140025364755, 
    'attempts': ' 1U', 'timeIncrement': 0.0578605972150848, 'increment': 38, 
    'stepTime': 0.606140025364755, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 5, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 38, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.620605174668526, 
    'attempts': 2, 'timeIncrement': 0.0144651493037712, 'increment': 38, 
    'stepTime': 0.620605174668526, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 39, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.642302898624183, 
    'attempts': 1, 'timeIncrement': 0.0216977239556568, 'increment': 39, 
    'stepTime': 0.642302898624183, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 86 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 442 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2372 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 4085 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 7140 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 540 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.642302898624183, 
    'attempts': ' 1U', 'timeIncrement': 0.0325465859334852, 'increment': 40, 
    'stepTime': 0.642302898624183, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 40, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.650439545107554, 
    'attempts': 2, 'timeIncrement': 0.0081366464833713, 'increment': 40, 
    'stepTime': 0.650439545107554, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 41, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.662644514832611, 
    'attempts': 1, 'timeIncrement': 0.0122049697250569, 'increment': 41, 
    'stepTime': 0.662644514832611, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 42, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.680951969420197, 
    'attempts': 1, 'timeIncrement': 0.0183074545875854, 'increment': 42, 
    'stepTime': 0.680951969420197, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 43, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.708413151301575, 
    'attempts': 1, 'timeIncrement': 0.0274611818813781, 'increment': 43, 
    'stepTime': 0.708413151301575, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 44, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.749604924123642, 
    'attempts': 1, 'timeIncrement': 0.0411917728220672, 'increment': 44, 
    'stepTime': 0.749604924123642, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 69 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1361 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 4467 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 68 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.749604924123642, 
    'attempts': ' 1U', 'timeIncrement': 0.0411917728220672, 'increment': 45, 
    'stepTime': 0.749604924123642, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 45, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.759902867329159, 
    'attempts': 2, 'timeIncrement': 0.0102979432055168, 'increment': 45, 
    'stepTime': 0.759902867329159, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 46, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.770200810534676, 
    'attempts': 1, 'timeIncrement': 0.0102979432055168, 'increment': 46, 
    'stepTime': 0.770200810534676, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 47, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.785647725342951, 
    'attempts': 1, 'timeIncrement': 0.0154469148082752, 'increment': 47, 
    'stepTime': 0.785647725342951, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 48, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.808818097555364, 
    'attempts': 1, 'timeIncrement': 0.0231703722124128, 'increment': 48, 
    'stepTime': 0.808818097555364, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 49, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.843573655873983, 
    'attempts': 1, 'timeIncrement': 0.0347555583186192, 'increment': 49, 
    'stepTime': 0.843573655873983, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 158 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 277 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.843573655873983, 
    'attempts': ' 1U', 'timeIncrement': 0.0521333374779288, 'increment': 50, 
    'stepTime': 0.843573655873983, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 50, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.856606990243465, 
    'attempts': 2, 'timeIncrement': 0.0130333343694822, 'increment': 50, 
    'stepTime': 0.856606990243465, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 13 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 215 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 698 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1206 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 6 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.856606990243465, 
    'attempts': ' 1U', 'timeIncrement': 0.0195500015542233, 'increment': 51, 
    'stepTime': 0.856606990243465, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 51, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.861494490632021, 
    'attempts': 2, 'timeIncrement': 0.00488750038855582, 'increment': 51, 
    'stepTime': 0.861494490632021, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 52, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.868825741214854, 
    'attempts': 1, 'timeIncrement': 0.00733125058283374, 'increment': 52, 
    'stepTime': 0.868825741214854, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 53, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.879822617089105, 
    'attempts': 1, 'timeIncrement': 0.0109968758742506, 'increment': 53, 
    'stepTime': 0.879822617089105, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 54, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.896317930900481, 
    'attempts': 1, 'timeIncrement': 0.0164953138113759, 'increment': 54, 
    'stepTime': 0.896317930900481, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 55, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.921060901617545, 
    'attempts': 1, 'timeIncrement': 0.0247429707170639, 'increment': 55, 
    'stepTime': 0.921060901617545, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 56, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.958175357693141, 
    'attempts': 1, 'timeIncrement': 0.0371144560755958, 'increment': 56, 
    'stepTime': 0.958175357693141, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 559 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3306 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.958175357693141, 
    'attempts': ' 1U', 'timeIncrement': 0.0418246423068593, 'increment': 57, 
    'stepTime': 0.958175357693141, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 57, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.968631518269856, 
    'attempts': 2, 'timeIncrement': 0.0104561605767148, 'increment': 57, 
    'stepTime': 0.968631518269856, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 58, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.984315759134928, 
    'attempts': 1, 'timeIncrement': 0.0156842408650723, 'increment': 58, 
    'stepTime': 0.984315759134928, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 59, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0156842408650723, 'increment': 59, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 749.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_2_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_2_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_2_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_2_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 43 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.5, 'attempts': 1, 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.5, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.875, 'attempts': 1, 
    'timeIncrement': 0.375, 'increment': 3, 'stepTime': 0.875, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.125, 'increment': 4, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 3, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 746.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 3, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 29 17:32:00 2018', 'jobName': 'FLANGERTJ'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 20764, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 196.0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 13 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.875, 'attempts': 1, 
    'timeIncrement': 0.375, 'increment': 3, 'stepTime': 0.875, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.125, 'increment': 4, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 6, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 2, 
    'jobName': 'FlangeRF', 'severe': 6, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 190.0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'FlangeRF', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 3, 
    'jobName': 'FlangeRF', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 148.0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 3, 
    'jobName': 'FlangeRF', 'severe': 3, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 29 17:57:29 2018', 'jobName': 'FlangeRF'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].loads['axial pressure load'].suppress()
mdb.models['Model-RTJ'].loads['External Moment'].suppress()
mdb.models['Model-RTJ'].loads['External force'].suppress()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].loads['PRESSURE'].setValuesInStep(magnitude=18.93, 
    stepName='External load')
mdb.models['Model-RTJ'].rootAssembly.Surface(name='Surf-10', side1Faces=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    ('[#20000 ]', ), ))
mdb.models['Model-RTJ'].Pressure(amplitude=UNSET, createStepName=
    'pressure load', distributionType=UNIFORM, field='', magnitude=-199.619, 
    name='Load-6', region=
    mdb.models['Model-RTJ'].rootAssembly.surfaces['Surf-10'])
mdb.models['Model-RTJ'].loads.changeKey(fromName='Load-6', toName=
    'AXIAL PRESSURE')
mdb.models['Model-RTJ'].loads['AXIAL PRESSURE'].setValuesInStep(magnitude=
    -378.9127427, stepName='External load')
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 2588, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 700.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 86 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 6859 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8956 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 11685 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 12719 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 1725 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 795 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1204 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 4688 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8684 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 43 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 412 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1376 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.015625, 'attempts': 4, 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.015625, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.03125, 'attempts': 1, 
    'timeIncrement': 0.015625, 'increment': 2, 'stepTime': 0.03125, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0546875, 'attempts': 1, 
    'timeIncrement': 0.0234375, 'increment': 3, 'stepTime': 0.0546875, 
    'step': 1, 'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.08984375, 'attempts': 1, 
    'timeIncrement': 0.03515625, 'increment': 4, 'stepTime': 0.08984375, 
    'step': 1, 'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 304 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 366 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.08984375, 
    'attempts': ' 1U', 'timeIncrement': 0.052734375, 'increment': 5, 
    'stepTime': 0.08984375, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 4, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.10302734375, 
    'attempts': 2, 'timeIncrement': 0.01318359375, 'increment': 5, 
    'stepTime': 0.10302734375, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.122802734375, 
    'attempts': 1, 'timeIncrement': 0.019775390625, 'increment': 6, 
    'stepTime': 0.122802734375, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 1, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.1524658203125, 
    'attempts': 1, 'timeIncrement': 0.0296630859375, 'increment': 7, 
    'stepTime': 0.1524658203125, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.19696044921875, 
    'attempts': 1, 'timeIncrement': 0.04449462890625, 'increment': 8, 
    'stepTime': 0.19696044921875, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 262 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 712 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.19696044921875, 
    'attempts': ' 1U', 'timeIncrement': 0.066741943359375, 'increment': 9, 
    'stepTime': 0.19696044921875, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 43 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 86 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 218 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.19696044921875, 
    'attempts': ' 2U', 'timeIncrement': 0.0166854858398438, 'increment': 9, 
    'stepTime': 0.19696044921875, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 5, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.201131820678711, 
    'attempts': 3, 'timeIncrement': 0.00417137145996094, 'increment': 9, 
    'stepTime': 0.201131820678711, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.207388877868652, 
    'attempts': 1, 'timeIncrement': 0.00625705718994141, 'increment': 10, 
    'stepTime': 0.207388877868652, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.216774463653564, 
    'attempts': 1, 'timeIncrement': 0.00938558578491211, 'increment': 11, 
    'stepTime': 0.216774463653564, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.230852842330933, 
    'attempts': 1, 'timeIncrement': 0.0140783786773682, 'increment': 12, 
    'stepTime': 0.230852842330933, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.251970410346985, 
    'attempts': 1, 'timeIncrement': 0.0211175680160522, 'increment': 13, 
    'stepTime': 0.251970410346985, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 51 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.251970410346985, 
    'attempts': ' 1U', 'timeIncrement': 0.0316763520240784, 'increment': 14, 
    'stepTime': 0.251970410346985, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.259889498353004, 
    'attempts': 2, 'timeIncrement': 0.00791908800601959, 'increment': 14, 
    'stepTime': 0.259889498353004, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.271768130362034, 
    'attempts': 1, 'timeIncrement': 0.0118786320090294, 'increment': 15, 
    'stepTime': 0.271768130362034, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.289586078375578, 
    'attempts': 1, 'timeIncrement': 0.0178179480135441, 'increment': 16, 
    'stepTime': 0.289586078375578, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.316313000395894, 
    'attempts': 1, 'timeIncrement': 0.0267269220203161, 'increment': 17, 
    'stepTime': 0.316313000395894, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.356403383426368, 
    'attempts': 1, 'timeIncrement': 0.0400903830304742, 'increment': 18, 
    'stepTime': 0.356403383426368, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 172 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 773 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2068 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2223 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3241 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 191 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.356403383426368, 
    'attempts': ' 1U', 'timeIncrement': 0.0601355745457113, 'increment': 19, 
    'stepTime': 0.356403383426368, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 5, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 86 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 173 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1438 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1355 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 4791 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 7242 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 15 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.356403383426368, 
    'attempts': ' 2U', 'timeIncrement': 0.0150338936364278, 'increment': 19, 
    'stepTime': 0.356403383426368, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.360161856835475, 
    'attempts': 3, 'timeIncrement': 0.00375847340910695, 'increment': 19, 
    'stepTime': 0.360161856835475, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.363920330244582, 
    'attempts': 1, 'timeIncrement': 0.00375847340910695, 'increment': 20, 
    'stepTime': 0.363920330244582, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.367678803653689, 
    'attempts': 1, 'timeIncrement': 0.00375847340910695, 'increment': 21, 
    'stepTime': 0.367678803653689, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 22, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.37331651376735, 
    'attempts': 1, 'timeIncrement': 0.00563771011366043, 'increment': 22, 
    'stepTime': 0.37331651376735, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 23, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.38177307893784, 
    'attempts': 1, 'timeIncrement': 0.00845656517049065, 'increment': 23, 
    'stepTime': 0.38177307893784, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 24, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.394457926693576, 
    'attempts': 1, 'timeIncrement': 0.012684847755736, 'increment': 24, 
    'stepTime': 0.394457926693576, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 25, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.41348519832718, 
    'attempts': 1, 'timeIncrement': 0.019027271633604, 'increment': 25, 
    'stepTime': 0.41348519832718, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 26, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.442026105777586, 
    'attempts': 1, 'timeIncrement': 0.0285409074504059, 'increment': 26, 
    'stepTime': 0.442026105777586, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 301 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 847 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3732 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.442026105777586, 
    'attempts': ' 1U', 'timeIncrement': 0.0428113611756089, 'increment': 27, 
    'stepTime': 0.442026105777586, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 5, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 27, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.452728946071488, 
    'attempts': 2, 'timeIncrement': 0.0107028402939022, 'increment': 27, 
    'stepTime': 0.452728946071488, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 339 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 703 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3352 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 7013 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 35 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.452728946071488, 
    'attempts': ' 1U', 'timeIncrement': 0.0160542604408533, 'increment': 28, 
    'stepTime': 0.452728946071488, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 28, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.456742511181702, 
    'attempts': 2, 'timeIncrement': 0.00401356511021334, 'increment': 28, 
    'stepTime': 0.456742511181702, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 29, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.462762858847022, 
    'attempts': 1, 'timeIncrement': 0.00602034766532, 'increment': 29, 
    'stepTime': 0.462762858847022, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 30, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.471793380345002, 
    'attempts': 1, 'timeIncrement': 0.00903052149798, 'increment': 30, 
    'stepTime': 0.471793380345002, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 31, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.485339162591972, 
    'attempts': 1, 'timeIncrement': 0.01354578224697, 'increment': 31, 
    'stepTime': 0.485339162591972, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 32, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.505657835962427, 
    'attempts': 1, 'timeIncrement': 0.020318673370455, 'increment': 32, 
    'stepTime': 0.505657835962427, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 6 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.505657835962427, 
    'attempts': ' 1U', 'timeIncrement': 0.0304780100556825, 'increment': 33, 
    'stepTime': 0.505657835962427, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 33, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.513277338476347, 
    'attempts': 2, 'timeIncrement': 0.00761950251392063, 'increment': 33, 
    'stepTime': 0.513277338476347, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 34, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.524706592247228, 
    'attempts': 1, 'timeIncrement': 0.0114292537708809, 'increment': 34, 
    'stepTime': 0.524706592247228, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 35, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.54185047290355, 
    'attempts': 1, 'timeIncrement': 0.0171438806563214, 'increment': 35, 
    'stepTime': 0.54185047290355, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 36, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.567566293888032, 
    'attempts': 1, 'timeIncrement': 0.0257158209844821, 'increment': 36, 
    'stepTime': 0.567566293888032, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 37, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.606140025364755, 
    'attempts': 1, 'timeIncrement': 0.0385737314767232, 'increment': 37, 
    'stepTime': 0.606140025364755, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 17 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 270 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1486 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.606140025364755, 
    'attempts': ' 1U', 'timeIncrement': 0.0578605972150848, 'increment': 38, 
    'stepTime': 0.606140025364755, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 5, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 38, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.620605174668526, 
    'attempts': 2, 'timeIncrement': 0.0144651493037712, 'increment': 38, 
    'stepTime': 0.620605174668526, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 39, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.642302898624183, 
    'attempts': 1, 'timeIncrement': 0.0216977239556568, 'increment': 39, 
    'stepTime': 0.642302898624183, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 86 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 442 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2372 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 4085 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 7140 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 540 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.642302898624183, 
    'attempts': ' 1U', 'timeIncrement': 0.0325465859334852, 'increment': 40, 
    'stepTime': 0.642302898624183, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 40, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.650439545107554, 
    'attempts': 2, 'timeIncrement': 0.0081366464833713, 'increment': 40, 
    'stepTime': 0.650439545107554, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 41, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.662644514832611, 
    'attempts': 1, 'timeIncrement': 0.0122049697250569, 'increment': 41, 
    'stepTime': 0.662644514832611, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 42, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.680951969420197, 
    'attempts': 1, 'timeIncrement': 0.0183074545875854, 'increment': 42, 
    'stepTime': 0.680951969420197, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 43, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.708413151301575, 
    'attempts': 1, 'timeIncrement': 0.0274611818813781, 'increment': 43, 
    'stepTime': 0.708413151301575, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 44, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.749604924123642, 
    'attempts': 1, 'timeIncrement': 0.0411917728220672, 'increment': 44, 
    'stepTime': 0.749604924123642, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 69 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1361 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 4467 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 68 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.749604924123642, 
    'attempts': ' 1U', 'timeIncrement': 0.0411917728220672, 'increment': 45, 
    'stepTime': 0.749604924123642, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 45, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.759902867329159, 
    'attempts': 2, 'timeIncrement': 0.0102979432055168, 'increment': 45, 
    'stepTime': 0.759902867329159, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 46, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.770200810534676, 
    'attempts': 1, 'timeIncrement': 0.0102979432055168, 'increment': 46, 
    'stepTime': 0.770200810534676, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 47, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.785647725342951, 
    'attempts': 1, 'timeIncrement': 0.0154469148082752, 'increment': 47, 
    'stepTime': 0.785647725342951, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 48, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.808818097555364, 
    'attempts': 1, 'timeIncrement': 0.0231703722124128, 'increment': 48, 
    'stepTime': 0.808818097555364, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 49, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.843573655873983, 
    'attempts': 1, 'timeIncrement': 0.0347555583186192, 'increment': 49, 
    'stepTime': 0.843573655873983, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 158 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 277 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.843573655873983, 
    'attempts': ' 1U', 'timeIncrement': 0.0521333374779288, 'increment': 50, 
    'stepTime': 0.843573655873983, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 50, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.856606990243465, 
    'attempts': 2, 'timeIncrement': 0.0130333343694822, 'increment': 50, 
    'stepTime': 0.856606990243465, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 13 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 215 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 698 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1206 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 6 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.856606990243465, 
    'attempts': ' 1U', 'timeIncrement': 0.0195500015542233, 'increment': 51, 
    'stepTime': 0.856606990243465, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 51, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.861494490632021, 
    'attempts': 2, 'timeIncrement': 0.00488750038855582, 'increment': 51, 
    'stepTime': 0.861494490632021, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 52, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.868825741214854, 
    'attempts': 1, 'timeIncrement': 0.00733125058283374, 'increment': 52, 
    'stepTime': 0.868825741214854, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 53, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.879822617089105, 
    'attempts': 1, 'timeIncrement': 0.0109968758742506, 'increment': 53, 
    'stepTime': 0.879822617089105, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 54, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.896317930900481, 
    'attempts': 1, 'timeIncrement': 0.0164953138113759, 'increment': 54, 
    'stepTime': 0.896317930900481, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 55, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.921060901617545, 
    'attempts': 1, 'timeIncrement': 0.0247429707170639, 'increment': 55, 
    'stepTime': 0.921060901617545, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 56, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.958175357693141, 
    'attempts': 1, 'timeIncrement': 0.0371144560755958, 'increment': 56, 
    'stepTime': 0.958175357693141, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 559 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3306 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.958175357693141, 
    'attempts': ' 1U', 'timeIncrement': 0.0418246423068593, 'increment': 57, 
    'stepTime': 0.958175357693141, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 57, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.968631518269856, 
    'attempts': 2, 'timeIncrement': 0.0104561605767148, 'increment': 57, 
    'stepTime': 0.968631518269856, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 58, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.984315759134928, 
    'attempts': 1, 'timeIncrement': 0.0156842408650723, 'increment': 58, 
    'stepTime': 0.984315759134928, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 59, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0156842408650723, 'increment': 59, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 749.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_2_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_2_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_2_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_2_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 43 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.5, 'attempts': 1, 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.5, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.875, 'attempts': 1, 
    'timeIncrement': 0.375, 'increment': 3, 'stepTime': 0.875, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.125, 'increment': 4, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 3, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 746.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 9789 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 428 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 3, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_3_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_3_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_3_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_3_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_3_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_3_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_3_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_3_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_3_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_3_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_3_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_3_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_3_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_3_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_3_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_3_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 3, 
    'jobName': 'FLANGERTJ', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 732 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.25, 'attempts': ' 1U', 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.25, 'step': 3, 
    'jobName': 'FLANGERTJ', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 2, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.3125, 'attempts': 2, 
    'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.3125, 'step': 3, 
    'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.3125, 'attempts': ' 1U', 
    'timeIncrement': 0.09375, 'increment': 3, 'stepTime': 0.3125, 'step': 3, 
    'jobName': 'FLANGERTJ', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 3, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.3359375, 'attempts': 2, 
    'timeIncrement': 0.0234375, 'increment': 3, 'stepTime': 0.3359375, 
    'step': 3, 'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 4, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.37109375, 'attempts': 1, 
    'timeIncrement': 0.03515625, 'increment': 4, 'stepTime': 0.37109375, 
    'step': 3, 'jobName': 'FLANGERTJ', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 6823 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 235 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.37109375, 
    'attempts': ' 1U', 'timeIncrement': 0.052734375, 'increment': 5, 
    'stepTime': 0.37109375, 'step': 3, 'jobName': 'FLANGERTJ', 'severe': 3, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 5, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.38427734375, 
    'attempts': 2, 'timeIncrement': 0.01318359375, 'increment': 5, 
    'stepTime': 0.38427734375, 'step': 3, 'jobName': 'FLANGERTJ', 'severe': 3, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 93 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1654 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 5186 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 85 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.38427734375, 
    'attempts': ' 1U', 'timeIncrement': 0.019775390625, 'increment': 6, 
    'stepTime': 0.38427734375, 'step': 3, 'jobName': 'FLANGERTJ', 'severe': 5, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.38427734375, 
    'attempts': ' 2U', 'timeIncrement': 0.00494384765625, 'increment': 6, 
    'stepTime': 0.38427734375, 'step': 3, 'jobName': 'FLANGERTJ', 'severe': 8, 
    'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 6, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.38551330566406, 
    'attempts': 3, 'timeIncrement': 0.0012359619140625, 'increment': 6, 
    'stepTime': 0.385513305664063, 'step': 3, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 412 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1752 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.38551330566406, 
    'attempts': ' 1U', 'timeIncrement': 0.00185394287109375, 'increment': 7, 
    'stepTime': 0.385513305664063, 'step': 3, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 7, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.38597679138184, 
    'attempts': 2, 'timeIncrement': 0.000463485717773438, 'increment': 7, 
    'stepTime': 0.385976791381836, 'step': 3, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.38597679138184, 
    'attempts': ' 1U', 'timeIncrement': 0.000695228576660156, 'increment': 8, 
    'stepTime': 0.385976791381836, 'step': 3, 'jobName': 'FLANGERTJ', 
    'severe': 5, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 8, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.386150598526, 
    'attempts': 2, 'timeIncrement': 0.000173807144165039, 'increment': 8, 
    'stepTime': 0.386150598526001, 'step': 3, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 9, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.38641130924225, 
    'attempts': 1, 'timeIncrement': 0.000260710716247559, 'increment': 9, 
    'stepTime': 0.386411309242249, 'step': 3, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.38641130924225, 
    'attempts': ' 1U', 'timeIncrement': 0.000391066074371338, 'increment': 10, 
    'stepTime': 0.386411309242249, 'step': 3, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 10, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.38650907576084, 
    'attempts': 2, 'timeIncrement': 9.77665185928345e-05, 'increment': 10, 
    'stepTime': 0.386509075760841, 'step': 3, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.38650907576084, 
    'attempts': ' 1U', 'timeIncrement': 0.000146649777889252, 'increment': 11, 
    'stepTime': 0.386509075760841, 'step': 3, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 11, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.38654573820531, 
    'attempts': 2, 'timeIncrement': 3.66624444723129e-05, 'increment': 11, 
    'stepTime': 0.386545738205314, 'step': 3, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.38654573820531, 
    'attempts': ' 1U', 'timeIncrement': 5.49936667084694e-05, 'increment': 12, 
    'stepTime': 0.386545738205314, 'step': 3, 'jobName': 'FLANGERTJ', 
    'severe': 8, 'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 12, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.38655948662199, 
    'attempts': 2, 'timeIncrement': 1.37484166771173e-05, 'increment': 12, 
    'stepTime': 0.386559486621991, 'step': 3, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.38655948662199, 
    'attempts': ' 1U', 'timeIncrement': 2.0622625015676e-05, 'increment': 13, 
    'stepTime': 0.386559486621991, 'step': 3, 'jobName': 'FLANGERTJ', 
    'severe': 7, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Time increment required is less than the minimum specified', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.38655948662199, 
    'attempts': ' 2U', 'timeIncrement': 1e-05, 'increment': 13, 
    'stepTime': 0.386559486621991, 'step': 3, 'jobName': 'FLANGERTJ', 
    'severe': 8, 'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 13, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.38655948662199, 
    'attempts': 3, 'timeIncrement': 1e-35, 'increment': 13, 
    'stepTime': 0.386559486621991, 'step': 3, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].loads['AXIAL PRESSURE'].setValuesInStep(magnitude=
    -199.68, stepName='External load')
mdb.models['Model-RTJ'].loads['AXIAL PRESSURE'].setValuesInStep(magnitude=
    -199.619, stepName='External load')
mdb.models['Model-RTJ'].loads['PRESSURE'].setValuesInStep(magnitude=10.0, 
    stepName='External load')
mdb.models['Model-RTJ'].loads['External Moment'].resume()
mdb.models['Model-RTJ'].loads['External force'].resume()
mdb.models['Model-RTJ'].loads['axial pressure load'].resume()
mdb.models['Model-RTJ'].loads['axial pressure load'].suppress()
mdb.models['Model-RTJ'].loads['axial pressure load'].resume()
mdb.models['Model-RTJ'].loads['axial pressure load'].suppress()
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 17648, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 700.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 86 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 6859 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8956 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 11685 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 12719 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 1725 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 795 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1204 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 4688 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 8684 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 43 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 412 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1376 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.015625, 'attempts': 4, 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.015625, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.03125, 'attempts': 1, 
    'timeIncrement': 0.015625, 'increment': 2, 'stepTime': 0.03125, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0546875, 'attempts': 1, 
    'timeIncrement': 0.0234375, 'increment': 3, 'stepTime': 0.0546875, 
    'step': 1, 'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.08984375, 'attempts': 1, 
    'timeIncrement': 0.03515625, 'increment': 4, 'stepTime': 0.08984375, 
    'step': 1, 'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 304 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 366 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.08984375, 
    'attempts': ' 1U', 'timeIncrement': 0.052734375, 'increment': 5, 
    'stepTime': 0.08984375, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 4, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.10302734375, 
    'attempts': 2, 'timeIncrement': 0.01318359375, 'increment': 5, 
    'stepTime': 0.10302734375, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.122802734375, 
    'attempts': 1, 'timeIncrement': 0.019775390625, 'increment': 6, 
    'stepTime': 0.122802734375, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 1, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.1524658203125, 
    'attempts': 1, 'timeIncrement': 0.0296630859375, 'increment': 7, 
    'stepTime': 0.1524658203125, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.19696044921875, 
    'attempts': 1, 'timeIncrement': 0.04449462890625, 'increment': 8, 
    'stepTime': 0.19696044921875, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 262 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 712 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.19696044921875, 
    'attempts': ' 1U', 'timeIncrement': 0.066741943359375, 'increment': 9, 
    'stepTime': 0.19696044921875, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 43 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 86 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 218 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.19696044921875, 
    'attempts': ' 2U', 'timeIncrement': 0.0166854858398438, 'increment': 9, 
    'stepTime': 0.19696044921875, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 5, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.201131820678711, 
    'attempts': 3, 'timeIncrement': 0.00417137145996094, 'increment': 9, 
    'stepTime': 0.201131820678711, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.207388877868652, 
    'attempts': 1, 'timeIncrement': 0.00625705718994141, 'increment': 10, 
    'stepTime': 0.207388877868652, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.216774463653564, 
    'attempts': 1, 'timeIncrement': 0.00938558578491211, 'increment': 11, 
    'stepTime': 0.216774463653564, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.230852842330933, 
    'attempts': 1, 'timeIncrement': 0.0140783786773682, 'increment': 12, 
    'stepTime': 0.230852842330933, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.251970410346985, 
    'attempts': 1, 'timeIncrement': 0.0211175680160522, 'increment': 13, 
    'stepTime': 0.251970410346985, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 51 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.251970410346985, 
    'attempts': ' 1U', 'timeIncrement': 0.0316763520240784, 'increment': 14, 
    'stepTime': 0.251970410346985, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.259889498353004, 
    'attempts': 2, 'timeIncrement': 0.00791908800601959, 'increment': 14, 
    'stepTime': 0.259889498353004, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.271768130362034, 
    'attempts': 1, 'timeIncrement': 0.0118786320090294, 'increment': 15, 
    'stepTime': 0.271768130362034, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.289586078375578, 
    'attempts': 1, 'timeIncrement': 0.0178179480135441, 'increment': 16, 
    'stepTime': 0.289586078375578, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.316313000395894, 
    'attempts': 1, 'timeIncrement': 0.0267269220203161, 'increment': 17, 
    'stepTime': 0.316313000395894, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.356403383426368, 
    'attempts': 1, 'timeIncrement': 0.0400903830304742, 'increment': 18, 
    'stepTime': 0.356403383426368, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 172 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 773 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2068 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2223 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3241 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 191 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.356403383426368, 
    'attempts': ' 1U', 'timeIncrement': 0.0601355745457113, 'increment': 19, 
    'stepTime': 0.356403383426368, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 5, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 86 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 173 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1438 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1355 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 4791 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 7242 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 15 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.356403383426368, 
    'attempts': ' 2U', 'timeIncrement': 0.0150338936364278, 'increment': 19, 
    'stepTime': 0.356403383426368, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.360161856835475, 
    'attempts': 3, 'timeIncrement': 0.00375847340910695, 'increment': 19, 
    'stepTime': 0.360161856835475, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.363920330244582, 
    'attempts': 1, 'timeIncrement': 0.00375847340910695, 'increment': 20, 
    'stepTime': 0.363920330244582, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.367678803653689, 
    'attempts': 1, 'timeIncrement': 0.00375847340910695, 'increment': 21, 
    'stepTime': 0.367678803653689, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 22, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.37331651376735, 
    'attempts': 1, 'timeIncrement': 0.00563771011366043, 'increment': 22, 
    'stepTime': 0.37331651376735, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 23, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.38177307893784, 
    'attempts': 1, 'timeIncrement': 0.00845656517049065, 'increment': 23, 
    'stepTime': 0.38177307893784, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 24, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.394457926693576, 
    'attempts': 1, 'timeIncrement': 0.012684847755736, 'increment': 24, 
    'stepTime': 0.394457926693576, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 25, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.41348519832718, 
    'attempts': 1, 'timeIncrement': 0.019027271633604, 'increment': 25, 
    'stepTime': 0.41348519832718, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 26, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.442026105777586, 
    'attempts': 1, 'timeIncrement': 0.0285409074504059, 'increment': 26, 
    'stepTime': 0.442026105777586, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 301 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 847 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3732 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.442026105777586, 
    'attempts': ' 1U', 'timeIncrement': 0.0428113611756089, 'increment': 27, 
    'stepTime': 0.442026105777586, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 5, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 27, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.452728946071488, 
    'attempts': 2, 'timeIncrement': 0.0107028402939022, 'increment': 27, 
    'stepTime': 0.452728946071488, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 339 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 703 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3352 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 7013 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 35 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.452728946071488, 
    'attempts': ' 1U', 'timeIncrement': 0.0160542604408533, 'increment': 28, 
    'stepTime': 0.452728946071488, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 28, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.456742511181702, 
    'attempts': 2, 'timeIncrement': 0.00401356511021334, 'increment': 28, 
    'stepTime': 0.456742511181702, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 29, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.462762858847022, 
    'attempts': 1, 'timeIncrement': 0.00602034766532, 'increment': 29, 
    'stepTime': 0.462762858847022, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 30, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.471793380345002, 
    'attempts': 1, 'timeIncrement': 0.00903052149798, 'increment': 30, 
    'stepTime': 0.471793380345002, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 31, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.485339162591972, 
    'attempts': 1, 'timeIncrement': 0.01354578224697, 'increment': 31, 
    'stepTime': 0.485339162591972, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 32, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.505657835962427, 
    'attempts': 1, 'timeIncrement': 0.020318673370455, 'increment': 32, 
    'stepTime': 0.505657835962427, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 6 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.505657835962427, 
    'attempts': ' 1U', 'timeIncrement': 0.0304780100556825, 'increment': 33, 
    'stepTime': 0.505657835962427, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 33, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.513277338476347, 
    'attempts': 2, 'timeIncrement': 0.00761950251392063, 'increment': 33, 
    'stepTime': 0.513277338476347, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 34, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.524706592247228, 
    'attempts': 1, 'timeIncrement': 0.0114292537708809, 'increment': 34, 
    'stepTime': 0.524706592247228, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 35, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.54185047290355, 
    'attempts': 1, 'timeIncrement': 0.0171438806563214, 'increment': 35, 
    'stepTime': 0.54185047290355, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 36, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.567566293888032, 
    'attempts': 1, 'timeIncrement': 0.0257158209844821, 'increment': 36, 
    'stepTime': 0.567566293888032, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 37, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.606140025364755, 
    'attempts': 1, 'timeIncrement': 0.0385737314767232, 'increment': 37, 
    'stepTime': 0.606140025364755, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 17 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 270 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1486 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.606140025364755, 
    'attempts': ' 1U', 'timeIncrement': 0.0578605972150848, 'increment': 38, 
    'stepTime': 0.606140025364755, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 5, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 38, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.620605174668526, 
    'attempts': 2, 'timeIncrement': 0.0144651493037712, 'increment': 38, 
    'stepTime': 0.620605174668526, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 39, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.642302898624183, 
    'attempts': 1, 'timeIncrement': 0.0216977239556568, 'increment': 39, 
    'stepTime': 0.642302898624183, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 86 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 442 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2372 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 4085 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 7140 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 540 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.642302898624183, 
    'attempts': ' 1U', 'timeIncrement': 0.0325465859334852, 'increment': 40, 
    'stepTime': 0.642302898624183, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 40, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.650439545107554, 
    'attempts': 2, 'timeIncrement': 0.0081366464833713, 'increment': 40, 
    'stepTime': 0.650439545107554, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 41, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.662644514832611, 
    'attempts': 1, 'timeIncrement': 0.0122049697250569, 'increment': 41, 
    'stepTime': 0.662644514832611, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 42, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.680951969420197, 
    'attempts': 1, 'timeIncrement': 0.0183074545875854, 'increment': 42, 
    'stepTime': 0.680951969420197, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 43, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.708413151301575, 
    'attempts': 1, 'timeIncrement': 0.0274611818813781, 'increment': 43, 
    'stepTime': 0.708413151301575, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 44, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.749604924123642, 
    'attempts': 1, 'timeIncrement': 0.0411917728220672, 'increment': 44, 
    'stepTime': 0.749604924123642, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 69 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1361 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 4467 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 68 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.749604924123642, 
    'attempts': ' 1U', 'timeIncrement': 0.0411917728220672, 'increment': 45, 
    'stepTime': 0.749604924123642, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 45, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.759902867329159, 
    'attempts': 2, 'timeIncrement': 0.0102979432055168, 'increment': 45, 
    'stepTime': 0.759902867329159, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 46, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.770200810534676, 
    'attempts': 1, 'timeIncrement': 0.0102979432055168, 'increment': 46, 
    'stepTime': 0.770200810534676, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 47, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.785647725342951, 
    'attempts': 1, 'timeIncrement': 0.0154469148082752, 'increment': 47, 
    'stepTime': 0.785647725342951, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 48, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.808818097555364, 
    'attempts': 1, 'timeIncrement': 0.0231703722124128, 'increment': 48, 
    'stepTime': 0.808818097555364, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 49, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.843573655873983, 
    'attempts': 1, 'timeIncrement': 0.0347555583186192, 'increment': 49, 
    'stepTime': 0.843573655873983, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 158 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 277 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.843573655873983, 
    'attempts': ' 1U', 'timeIncrement': 0.0521333374779288, 'increment': 50, 
    'stepTime': 0.843573655873983, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 50, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.856606990243465, 
    'attempts': 2, 'timeIncrement': 0.0130333343694822, 'increment': 50, 
    'stepTime': 0.856606990243465, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 13 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 215 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 698 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1206 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 6 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.856606990243465, 
    'attempts': ' 1U', 'timeIncrement': 0.0195500015542233, 'increment': 51, 
    'stepTime': 0.856606990243465, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 51, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.861494490632021, 
    'attempts': 2, 'timeIncrement': 0.00488750038855582, 'increment': 51, 
    'stepTime': 0.861494490632021, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 52, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.868825741214854, 
    'attempts': 1, 'timeIncrement': 0.00733125058283374, 'increment': 52, 
    'stepTime': 0.868825741214854, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 53, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.879822617089105, 
    'attempts': 1, 'timeIncrement': 0.0109968758742506, 'increment': 53, 
    'stepTime': 0.879822617089105, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 54, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.896317930900481, 
    'attempts': 1, 'timeIncrement': 0.0164953138113759, 'increment': 54, 
    'stepTime': 0.896317930900481, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 55, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.921060901617545, 
    'attempts': 1, 'timeIncrement': 0.0247429707170639, 'increment': 55, 
    'stepTime': 0.921060901617545, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 56, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.958175357693141, 
    'attempts': 1, 'timeIncrement': 0.0371144560755958, 'increment': 56, 
    'stepTime': 0.958175357693141, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 559 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3306 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.958175357693141, 
    'attempts': ' 1U', 'timeIncrement': 0.0418246423068593, 'increment': 57, 
    'stepTime': 0.958175357693141, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 57, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.968631518269856, 
    'attempts': 2, 'timeIncrement': 0.0104561605767148, 'increment': 57, 
    'stepTime': 0.968631518269856, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 58, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.984315759134928, 
    'attempts': 1, 'timeIncrement': 0.0156842408650723, 'increment': 58, 
    'stepTime': 0.984315759134928, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 59, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0156842408650723, 'increment': 59, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 749.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_2_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_2_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_2_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_2_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 43 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.5, 'attempts': 1, 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.5, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.875, 'attempts': 1, 
    'timeIncrement': 0.375, 'increment': 3, 'stepTime': 0.875, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.125, 'increment': 4, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 2.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 3, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 746.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_3_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 3, 
    'jobName': 'FLANGERTJ', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 29 21:24:06 2018', 'jobName': 'FLANGERTJ'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RF'].loads['axial pressure load'].suppress()
mdb.models['Model-RF'].rootAssembly.Surface(name='Surf-11', side1Faces=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    ('[#8000002 ]', ), ))
mdb.models['Model-RF'].Pressure(amplitude=UNSET, createStepName=
    'Step-pressure10', distributionType=UNIFORM, field='', magnitude=-199.619, 
    name='Load-6', region=
    mdb.models['Model-RF'].rootAssembly.surfaces['Surf-11'])
mdb.models['Model-RF'].loads.changeKey(fromName='Load-6', toName=
    'AXIALPRESSURELOAD')
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 34776, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 196.0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 13 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.875, 'attempts': 1, 
    'timeIncrement': 0.375, 'increment': 3, 'stepTime': 0.875, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.125, 'increment': 4, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 6, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 2, 
    'jobName': 'FlangeRF', 'severe': 6, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 190.0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'FlangeRF', 'severe': 5, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 3, 
    'jobName': 'FlangeRF', 'severe': 5, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 148.0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 3, 
    'jobName': 'FlangeRF', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 29 22:08:47 2018', 'jobName': 'FlangeRF'})
mdb.models['Model-RF'].boundaryConditions.changeKey(fromName='BC-1', toName=
    'SPIRALGASKETTOP')
mdb.models['Model-RF'].boundaryConditions.changeKey(fromName='BC-2', toName=
    'SPIRALGASKETSEDGE')
mdb.models['Model-RF'].boundaryConditions.changeKey(fromName='BC-4', toName=
    'FLANGEBOLTS')
mdb.models['Model-RF'].boundaryConditions.changeKey(fromName='BC-5', toName=
    'BOLTTOP')
mdb.models['Model-RF'].boundaryConditions.changeKey(fromName='BC-6', toName=
    'FLANGE GLOBAL')
mdb.models['Model-RF'].boundaryConditions['SPIRALGASKETSEDGE'].suppress()
mdb.models['Model-RF'].boundaryConditions.changeKey(fromName='BC-3', toName=
    'SPIRGASKETSQEDGE')
mdb.models['Model-RF'].boundaryConditions['SPIRALGASKETSEDGE'].resume()
mdb.models['Model-RF'].boundaryConditions['SPIRALGASKETSEDGE'].suppress()
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 33572, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 196.0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 13 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.875, 'attempts': 1, 
    'timeIncrement': 0.375, 'increment': 3, 'stepTime': 0.875, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.125, 'increment': 4, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 6, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 2, 
    'jobName': 'FlangeRF', 'severe': 6, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 190.0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'FlangeRF', 'severe': 5, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 3, 
    'jobName': 'FlangeRF', 'severe': 5, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 148.0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 3, 
    'jobName': 'FlangeRF', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 29 22:25:28 2018', 'jobName': 'FlangeRF'})
mdb.models['Model-RF'].boundaryConditions['SPIRALGASKETSEDGE'].resume()
mdb.models['Model-RF'].rootAssembly.Set(name='gaskets1', nodes=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#c #ffffc000 #ff00007 #0:24 #ffffffff:2 #fffff ]', ), ))
mdb.models['Model-RF'].boundaryConditions.changeKey(fromName='SPIRGASKETSQEDGE'
    , toName='SPIRGASKETSQ')
mdb.models['Model-RF'].boundaryConditions['SPIRALGASKETSEDGE'].setValues(
    typeName=YSYMM)
mdb.models['Model-RF'].rootAssembly.Set(faces=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    mask=('[#240000 #4 ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces.getSequenceFromMask(
    mask=('[#400 ]', ), ), name='flangeglobal')
mdb.models['Model-RF'].rootAssembly.Set(name='Flangeglob', nodes=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].nodes.getSequenceFromMask(
    mask=('[#c6c6c #ffe00000 #feff007f #1fff #f9f00 #f0007fe0 #fffc00ff', 
    ' #7ff #0:4 #e0000000 #ffffffff:2 #1fffffff #0:4 #f8000000', 
    ' #ffffffff:6 #1fff ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#300 #0:4 #fffe0000 #7f8003f #0:45 #fffc0000 #ffffffff:2', 
    ' #3f ]', ), ))
mdb.models['Model-RF'].rootAssembly.Set(name='flgglobaledge', nodes=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#c00 #0:6 #1fffff00 ]', ), ))
mdb.models['Model-RF'].boundaryConditions['FLANGE GLOBAL'].setValues(region=
    mdb.models['Model-RF'].rootAssembly.sets['Flangeglob'])
mdb.models['Model-RF'].YsymmBC(createStepName='Step-1', localCsys=None, name=
    'flgglobaledge', region=
    mdb.models['Model-RF'].rootAssembly.sets['flgglobaledge'])
mdb.models['Model-RF'].boundaryConditions.changeKey(fromName='flgglobaledge', 
    toName='GASKETGLOBALEDGE')
mdb.models['Model-RF'].rootAssembly.Set(name='FLANGESQD', nodes=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].nodes.getSequenceFromMask(
    mask=('[#fff00000 #3 #0:5 #f8000000 #ffff9fff #fdf3e7ff #3ffff', 
    ' #ffe1ffff #7 #0:22 #fffffffe #ffffffff:2 #3 #7ffff80', 
    ' #0:3 #ffc00000 #ffffffff:3 #ffffff ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['BOLT-1'].nodes.getSequenceFromMask(
    mask=('[#1ffce0f9 #1ff00006 #3ffffe1e #7f00000 #3e1fff80 #1f050f80 #6', 
    ' #7ffe0 #0 #3fff0000 #3fff0 #0 #1fff8000 #0:2', 
    ' #ffc #ffc0 #3e0000 #7c0000 ]', ), ))
mdb.models['Model-RF'].boundaryConditions['FLANGEBOLTS'].setValues(region=
    mdb.models['Model-RF'].rootAssembly.sets['FLANGESQD'])
mdb.models['Model-RF'].rootAssembly.Set(name='BOLTSQEDGE', nodes=
    mdb.models['Model-RF'].rootAssembly.instances['BOLT-1'].nodes.getSequenceFromMask(
    mask=('[#b00 #0 #c0000000 #c000 ]', ), ))
mdb.models['Model-RF'].YsymmBC(createStepName='Step-1', localCsys=
    mdb.models['Model-RF'].rootAssembly.datums[43], name='BC-8', region=
    mdb.models['Model-RF'].rootAssembly.sets['BOLTSQEDGE'])
mdb.models['Model-RF'].boundaryConditions['BC-8'].setValues(localCsys=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].datums[15])
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 33672, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.3 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.4 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.47 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.48 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.49 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.50 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.51 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.52 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.53 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.54 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.55 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.56 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.57 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.58 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.59 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.60 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.61 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.62 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.63 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.64 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.65 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.66 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.67 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 194.0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.3 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.47 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.48 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.49 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.50 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.51 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.52 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.53 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.54 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.55 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.56 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.57 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.58 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.59 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.60 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.61 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.62 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.63 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.64 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.65 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.66 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.3 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.47 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.50 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.51 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.52 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.53 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.54 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.55 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.56 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.58 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.60 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.62 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.64 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 55 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.3 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.4 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.47 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.48 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.49 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.50 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.51 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.52 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.53 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.54 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.55 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.56 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.57 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.58 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.59 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.60 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.61 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.62 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.63 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.64 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.65 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.66 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.67 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.3 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.47 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.48 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.49 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.50 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.51 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.52 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.53 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.54 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.55 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.56 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.57 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.875, 'attempts': 1, 
    'timeIncrement': 0.375, 'increment': 3, 'stepTime': 0.875, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.125, 'increment': 4, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 2, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 185.0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'FlangeRF', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 3, 
    'jobName': 'FlangeRF', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 146.0})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 3, 
    'jobName': 'FlangeRF', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 3, 
    'jobName': 'FlangeRF', 'severe': 2, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 2, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.5, 'attempts': 1, 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.5, 'step': 3, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 3, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.875, 'attempts': 1, 
    'timeIncrement': 0.375, 'increment': 3, 'stepTime': 0.875, 'step': 3, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.875, 'attempts': ' 1U', 
    'timeIncrement': 0.125, 'increment': 4, 'stepTime': 0.875, 'step': 3, 
    'jobName': 'FlangeRF', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 4, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.90625, 'attempts': 2, 
    'timeIncrement': 0.03125, 'increment': 4, 'stepTime': 0.90625, 'step': 3, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 5, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.953125, 'attempts': 1, 
    'timeIncrement': 0.046875, 'increment': 5, 'stepTime': 0.953125, 'step': 3, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.953125, 
    'attempts': ' 1U', 'timeIncrement': 0.046875, 'increment': 6, 
    'stepTime': 0.953125, 'step': 3, 'jobName': 'FlangeRF', 'severe': 5, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 6, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.96484375, 'attempts': 2, 
    'timeIncrement': 0.01171875, 'increment': 6, 'stepTime': 0.96484375, 
    'step': 3, 'jobName': 'FlangeRF', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 7, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.982421875, 'attempts': 1, 
    'timeIncrement': 0.017578125, 'increment': 7, 'stepTime': 0.982421875, 
    'step': 3, 'jobName': 'FlangeRF', 'severe': 1, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.982421875, 
    'attempts': ' 1U', 'timeIncrement': 0.017578125, 'increment': 8, 
    'stepTime': 0.982421875, 'step': 3, 'jobName': 'FlangeRF', 'severe': 5, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.982421875, 
    'attempts': ' 2U', 'timeIncrement': 0.00439453125, 'increment': 8, 
    'stepTime': 0.982421875, 'step': 3, 'jobName': 'FlangeRF', 'severe': 4, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 8, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.9835205078125, 
    'attempts': 3, 'timeIncrement': 0.0010986328125, 'increment': 8, 
    'stepTime': 0.9835205078125, 'step': 3, 'jobName': 'FlangeRF', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.9835205078125, 
    'attempts': ' 1U', 'timeIncrement': 0.00164794921875, 'increment': 9, 
    'stepTime': 0.9835205078125, 'step': 3, 'jobName': 'FlangeRF', 'severe': 4, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 9, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.98393249511719, 
    'attempts': 2, 'timeIncrement': 0.0004119873046875, 'increment': 9, 
    'stepTime': 0.983932495117188, 'step': 3, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 10, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.98455047607422, 
    'attempts': 1, 'timeIncrement': 0.00061798095703125, 'increment': 10, 
    'stepTime': 0.984550476074219, 'step': 3, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.98455047607422, 
    'attempts': ' 1U', 'timeIncrement': 0.000926971435546875, 'increment': 11, 
    'stepTime': 0.984550476074219, 'step': 3, 'jobName': 'FlangeRF', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 11, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.98478221893311, 
    'attempts': 2, 'timeIncrement': 0.000231742858886719, 'increment': 11, 
    'stepTime': 0.984782218933105, 'step': 3, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.98478221893311, 
    'attempts': ' 1U', 'timeIncrement': 0.000347614288330078, 'increment': 12, 
    'stepTime': 0.984782218933105, 'step': 3, 'jobName': 'FlangeRF', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 12, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.98486912250519, 
    'attempts': 2, 'timeIncrement': 8.69035720825195e-05, 'increment': 12, 
    'stepTime': 0.984869122505188, 'step': 3, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.98486912250519, 
    'attempts': ' 1U', 'timeIncrement': 0.000130355358123779, 'increment': 13, 
    'stepTime': 0.984869122505188, 'step': 3, 'jobName': 'FlangeRF', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 13, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.98490171134472, 
    'attempts': 2, 'timeIncrement': 3.25888395309448e-05, 'increment': 13, 
    'stepTime': 0.984901711344719, 'step': 3, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 14, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.98495059460402, 
    'attempts': 1, 'timeIncrement': 4.88832592964172e-05, 'increment': 14, 
    'stepTime': 0.984950594604015, 'step': 3, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.98495059460402, 
    'attempts': ' 1U', 'timeIncrement': 7.33248889446259e-05, 'increment': 15, 
    'stepTime': 0.984950594604015, 'step': 3, 'jobName': 'FlangeRF', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 15, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.98496892582625, 
    'attempts': 2, 'timeIncrement': 1.83312222361565e-05, 'increment': 15, 
    'stepTime': 0.984968925826252, 'step': 3, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 16, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.98499642265961, 
    'attempts': 1, 'timeIncrement': 2.74968333542347e-05, 'increment': 16, 
    'stepTime': 0.984996422659606, 'step': 3, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.98499642265961, 
    'attempts': ' 1U', 'timeIncrement': 4.1245250031352e-05, 'increment': 17, 
    'stepTime': 0.984996422659606, 'step': 3, 'jobName': 'FlangeRF', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.98499642265961, 
    'attempts': ' 2U', 'timeIncrement': 1.0311312507838e-05, 'increment': 17, 
    'stepTime': 0.984996422659606, 'step': 3, 'jobName': 'FlangeRF', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Time increment required is less than the minimum specified', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.98499642265961, 
    'attempts': ' 3U', 'timeIncrement': 1e-05, 'increment': 17, 
    'stepTime': 0.984996422659606, 'step': 3, 'jobName': 'FlangeRF', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 17, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.98499642265961, 
    'attempts': 4, 'timeIncrement': 1e-35, 'increment': 17, 
    'stepTime': 0.984996422659606, 'step': 3, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FlangeRF'})
mdb.models['Model-RF'].boundaryConditions['BC-8'].setValues(typeName=PINNED)
mdb.models['Model-RF'].boundaryConditions['BOLTTOP'].setValues(typeName=PINNED)
mdb.models['Model-RF'].boundaryConditions['GASKETGLOBALEDGE'].setValues(
    typeName=PINNED)
mdb.models['Model-RF'].boundaryConditions['SPIRALGASKETSEDGE'].setValues(
    typeName=PINNED)
mdb.models['Model-RF'].boundaryConditions['SPIRALGASKETTOP'].setValues(
    typeName=PINNED)
mdb.models['Model-RF'].boundaryConditions.changeKey(fromName='BC-8', toName=
    'BOLTSQEDGE')
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 37464, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.3 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.4 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.47 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.48 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.49 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.50 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.51 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.52 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.53 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.54 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.55 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.56 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.57 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.58 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.59 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.60 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.61 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.62 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.63 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.64 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.65 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.66 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.67 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 194.0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.3 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.47 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.48 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.49 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.50 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.51 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.52 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.53 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.54 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.55 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.56 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.57 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.58 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.59 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.60 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.61 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.62 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.63 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.64 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.65 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.66 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.67 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.3 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.49 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.51 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.63 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.65 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 48 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.3 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.4 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.47 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.48 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.49 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.50 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.51 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.52 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.53 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.54 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.55 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.56 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.57 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.58 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.59 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.60 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.61 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.62 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.63 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.64 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.65 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.66 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.67 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.3 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.47 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.48 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.49 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.50 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.51 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.52 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.53 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.54 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.55 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.56 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.57 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.58 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.59 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.60 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.61 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.62 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.63 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.64 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.65 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.66 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.67 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0625, 'attempts': 3, 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0625, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.125, 'attempts': 1, 
    'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.125, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.21875, 'attempts': 1, 
    'timeIncrement': 0.09375, 'increment': 3, 'stepTime': 0.21875, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.359375, 'attempts': 1, 
    'timeIncrement': 0.140625, 'increment': 4, 'stepTime': 0.359375, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.5703125, 'attempts': 1, 
    'timeIncrement': 0.2109375, 'increment': 5, 'stepTime': 0.5703125, 
    'step': 1, 'jobName': 'FlangeRF', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.88671875, 'attempts': 1, 
    'timeIncrement': 0.31640625, 'increment': 6, 'stepTime': 0.88671875, 
    'step': 1, 'jobName': 'FlangeRF', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.11328125, 'increment': 7, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 2, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 190.0})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 2, 
    'jobName': 'FlangeRF', 'severe': 7, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 2, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.25, 'attempts': ' 1U', 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.25, 'step': 2, 
    'jobName': 'FlangeRF', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.3125, 'attempts': 2, 
    'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.3125, 'step': 2, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.40625, 'attempts': 1, 
    'timeIncrement': 0.09375, 'increment': 3, 'stepTime': 0.40625, 'step': 2, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.546875, 'attempts': 1, 
    'timeIncrement': 0.140625, 'increment': 4, 'stepTime': 0.546875, 'step': 2, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.546875, 
    'attempts': ' 1U', 'timeIncrement': 0.2109375, 'increment': 5, 
    'stepTime': 0.546875, 'step': 2, 'jobName': 'FlangeRF', 'severe': 5, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.546875, 
    'attempts': ' 2U', 'timeIncrement': 0.052734375, 'increment': 5, 
    'stepTime': 0.546875, 'step': 2, 'jobName': 'FlangeRF', 'severe': 4, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.56005859375, 
    'attempts': 3, 'timeIncrement': 0.01318359375, 'increment': 5, 
    'stepTime': 0.56005859375, 'step': 2, 'jobName': 'FlangeRF', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.579833984375, 
    'attempts': 1, 'timeIncrement': 0.019775390625, 'increment': 6, 
    'stepTime': 0.579833984375, 'step': 2, 'jobName': 'FlangeRF', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.579833984375, 
    'attempts': ' 1U', 'timeIncrement': 0.0296630859375, 'increment': 7, 
    'stepTime': 0.579833984375, 'step': 2, 'jobName': 'FlangeRF', 'severe': 36, 
    'iterations': 36, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.579833984375, 
    'attempts': ' 2U', 'timeIncrement': 0.007415771484375, 'increment': 7, 
    'stepTime': 0.579833984375, 'step': 2, 'jobName': 'FlangeRF', 'severe': 4, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 7, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.58168792724609, 
    'attempts': 3, 'timeIncrement': 0.00185394287109375, 'increment': 7, 
    'stepTime': 0.581687927246094, 'step': 2, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.58168792724609, 
    'attempts': ' 1U', 'timeIncrement': 0.00278091430664063, 'increment': 8, 
    'stepTime': 0.581687927246094, 'step': 2, 'jobName': 'FlangeRF', 
    'severe': 5, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 8, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.58238315582275, 
    'attempts': 2, 'timeIncrement': 0.000695228576660156, 'increment': 8, 
    'stepTime': 0.582383155822754, 'step': 2, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 9, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.58342599868774, 
    'attempts': 1, 'timeIncrement': 0.00104284286499023, 'increment': 9, 
    'stepTime': 0.583425998687744, 'step': 2, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.58342599868774, 
    'attempts': ' 1U', 'timeIncrement': 0.00156426429748535, 'increment': 10, 
    'stepTime': 0.583425998687744, 'step': 2, 'jobName': 'FlangeRF', 
    'severe': 5, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.58342599868774, 
    'attempts': ' 2U', 'timeIncrement': 0.000391066074371338, 'increment': 10, 
    'stepTime': 0.583425998687744, 'step': 2, 'jobName': 'FlangeRF', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 10, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.58352376520634, 
    'attempts': 3, 'timeIncrement': 9.77665185928345e-05, 'increment': 10, 
    'stepTime': 0.583523765206337, 'step': 2, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 11, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.58367041498423, 
    'attempts': 1, 'timeIncrement': 0.000146649777889252, 'increment': 11, 
    'stepTime': 0.583670414984226, 'step': 2, 'jobName': 'FlangeRF', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 12, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.58389038965106, 
    'attempts': 1, 'timeIncrement': 0.000219974666833878, 'increment': 12, 
    'stepTime': 0.58389038965106, 'step': 2, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 13, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.58422035165131, 
    'attempts': 1, 'timeIncrement': 0.000329962000250816, 'increment': 13, 
    'stepTime': 0.584220351651311, 'step': 2, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 14, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.58471529465169, 
    'attempts': 1, 'timeIncrement': 0.000494943000376225, 'increment': 14, 
    'stepTime': 0.584715294651687, 'step': 2, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.58471529465169, 
    'attempts': ' 1U', 'timeIncrement': 0.000742414500564337, 'increment': 15, 
    'stepTime': 0.584715294651687, 'step': 2, 'jobName': 'FlangeRF', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 15, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.58490089827683, 
    'attempts': 2, 'timeIncrement': 0.000185603625141084, 'increment': 15, 
    'stepTime': 0.584900898276828, 'step': 2, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.58490089827683, 
    'attempts': ' 1U', 'timeIncrement': 0.000278405437711626, 'increment': 16, 
    'stepTime': 0.584900898276828, 'step': 2, 'jobName': 'FlangeRF', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 16, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.58497049963626, 
    'attempts': 2, 'timeIncrement': 6.96013594279066e-05, 'increment': 16, 
    'stepTime': 0.584970499636256, 'step': 2, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.58497049963626, 
    'attempts': ' 1U', 'timeIncrement': 0.00010440203914186, 'increment': 17, 
    'stepTime': 0.584970499636256, 'step': 2, 'jobName': 'FlangeRF', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 17, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.58499660014604, 
    'attempts': 2, 'timeIncrement': 2.6100509785465e-05, 'increment': 17, 
    'stepTime': 0.584996600146042, 'step': 2, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.58499660014604, 
    'attempts': ' 1U', 'timeIncrement': 3.91507646781974e-05, 'increment': 18, 
    'stepTime': 0.584996600146042, 'step': 2, 'jobName': 'FlangeRF', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 18, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.58500660014604, 
    'attempts': 2, 'timeIncrement': 1e-05, 'increment': 18, 
    'stepTime': 0.585006600146042, 'step': 2, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 19, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.58502160014604, 
    'attempts': 1, 'timeIncrement': 1.5e-05, 'increment': 19, 
    'stepTime': 0.585021600146042, 'step': 2, 'jobName': 'FlangeRF', 
    'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.58502160014604, 
    'attempts': ' 1U', 'timeIncrement': 2.25e-05, 'increment': 20, 
    'stepTime': 0.585021600146042, 'step': 2, 'jobName': 'FlangeRF', 
    'severe': 10, 'iterations': 10, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Time increment required is less than the minimum specified', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.58502160014604, 
    'attempts': ' 2U', 'timeIncrement': 1e-05, 'increment': 20, 
    'stepTime': 0.585021600146042, 'step': 2, 'jobName': 'FlangeRF', 
    'severe': 10, 'iterations': 10, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 20, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.58502160014604, 
    'attempts': 3, 'timeIncrement': 1e-35, 'increment': 20, 
    'stepTime': 0.585021600146042, 'step': 2, 'jobName': 'FlangeRF', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FlangeRF'})
mdb.models['Model-RTJ'].boundaryConditions['BOLTRTJEDGE'].setValues(typeName=
    YSYMM)
mdb.models['Model-RTJ'].boundaryConditions['BOLTTOP'].setValues(typeName=YSYMM)
mdb.models['Model-RTJ'].boundaryConditions['GASKS1'].setValues(typeName=YSYMM)
mdb.models['Model-RTJ'].boundaryConditions['RTJTOP'].setValues(typeName=YSYMM)
mdb.models['Model-RTJ'].boundaryConditions['rtjglobaledge'].setValues(typeName=
    YSYMM)
mdb.models['Model-RF'].boundaryConditions['BOLTSQEDGE'].setValues(typeName=
    YSYMM)
mdb.models['Model-RF'].boundaryConditions['BOLTTOP'].setValues(typeName=YSYMM)
mdb.models['Model-RF'].boundaryConditions['SPIRALGASKETSEDGE'].setValues(
    typeName=YSYMM)
mdb.models['Model-RF'].boundaryConditions['SPIRALGASKETTOP'].setValues(
    typeName=YSYMM)
mdb.models['Model-RF'].boundaryConditions.changeKey(fromName='FLANGEBOLTS', 
    toName='FLANGEBOLTSQ')
mdb.models['Model-RF'].boundaryConditions['GASKETGLOBALEDGE'].setValues(
    typeName=YSYMM)
mdb.models['Model-RF'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    formulation=ROUGH)
mdb.models['Model-RF'].interactionProperties['IntProp-1'].normalBehavior.setValues(
    allowSeparation=ON, clearanceAtZeroContactPressure=0.0, 
    constraintEnforcementMethod=PENALTY, contactStiffness=DEFAULT, 
    contactStiffnessScaleFactor=1.0, pressureOverclosure=HARD, 
    stiffnessBehavior=LINEAR)
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '*FRICTION,LAGRANGE OR *FRICTION,ROUGH MAY CAUSE CONVERGENCE DIFFICULTY WHEN USED IN CONJUNCTION WITH THE *SURFACE BEHAVIOR, AUGMENTED LAGRANGE OR PENALTY OPTION. USE PENALTY FRICTION INSTEAD.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 34596, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 120.0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 4 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 4 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 4 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 4 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 4 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 4 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 2, 
    'jobName': 'FlangeRF', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 120.0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 4 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 4 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 4 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 4 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 4 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 4 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_2_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 4 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_2_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 4 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_2_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_2_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'FlangeRF', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 2.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 3, 
    'jobName': 'FlangeRF', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 118.0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_3_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 4 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_3_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 4 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_3_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_3_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_3_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 4 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_3_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 4 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_3_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_3_1_1_1.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 3, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 29 23:10:36 2018', 'jobName': 'FlangeRF'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(modelType=STANDARD_EXPLICIT, name='2D MODEL RTJ')
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['2D MODEL RTJ'].ConstrainedSketch(name='__profile__', sheetSize=
    200.0)
del mdb.models['2D MODEL RTJ'].sketches['__profile__']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Solid revolve-1'].sketch)
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Solid revolve-1'])
mdb.models['Model-RTJ'].ConstrainedSketch(name='RTJ FLG', objectToCopy=
    mdb.models['Model-RTJ'].sketches['__edit__'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].sketches['FLGRTJ'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].sketches['FLGRTJ'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].sketches['FLGRTJ'].writeAcisFile(fileName=
    'D:/MSPROGRAM/project/MODEL 12INCH 900#RF FLANGE/SKETCH/FLG RTJ.sat', 
    version=20)
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].sketches['HOLERTJ'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].sketches['RF12FLANGE900'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].sketches['RTJ FLG'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].sketches['FLGRTJ'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].sketches['RTJFLG'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].sketches['adjment'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].sketches['hbolt'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].sketches['adjment'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].sketches['adjment'].writeAcisFile(fileName=
    'D:/MSPROGRAM/project/MODEL 12INCH 900#RF FLANGE/SKETCH/GROOVE RTJ.sat', 
    version=20)
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].sketches['hbolt'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].sketches['hbolt'].writeAcisFile(fileName=
    'D:/MSPROGRAM/project/MODEL 12INCH 900#RF FLANGE/SKETCH/BOLTHALF.sat', 
    version=20)
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['BOLT'].features['Solid revolve-1'].sketch)
mdb.models['Model-RTJ'].parts['BOLT'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['BOLT'].features['Solid revolve-1'])
mdb.models['Model-RTJ'].ConstrainedSketch(name='HALFBOLT-1', objectToCopy=
    mdb.models['Model-RTJ'].sketches['__edit__'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['RTJ'].features['Solid revolve-1'].sketch)
mdb.models['Model-RTJ'].parts['RTJ'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['RTJ'].features['Solid revolve-1'])
mdb.models['Model-RTJ'].ConstrainedSketch(name='RTJGAS-1', objectToCopy=
    mdb.models['Model-RTJ'].sketches['__edit__'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].sketches['HALFBOLT-1'].writeAcisFile(fileName=
    'D:/MSPROGRAM/project/MODEL 12INCH 900#RF FLANGE/SKETCH/BOLTHALF-1.sat', 
    version=20)
mdb.models['Model-RTJ'].sketches['RTJGAS-1'].writeAcisFile(fileName=
    'D:/MSPROGRAM/project/MODEL 12INCH 900#RF FLANGE/SKETCH/RTJGAS-1.sat', 
    version=20)
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Solid revolve-1'].sketch)
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Solid revolve-1'])
mdb.models['Model-RTJ'].ConstrainedSketch(name='FLGRTJ-1', objectToCopy=
    mdb.models['Model-RTJ'].sketches['__edit__'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].sketches['RTJGAS-1'].writeAcisFile(fileName=
    'D:/MSPROGRAM/project/MODEL 12INCH 900#RF FLANGE/SKETCH/FLGRTJ-1.sat', 
    version=20)
mdb.openAcis(
    'D:/MSPROGRAM/project/MODEL 12INCH 900#RF FLANGE/SKETCH/BOLTHALF-1.sat', 
    scaleFromFile=OFF)
mdb.models['2D MODEL RTJ'].ConstrainedSketchFromGeometryFile(geometryFile=
    mdb.acis, name='BOLTHALF-1')
mdb.openAcis(
    'D:/MSPROGRAM/project/MODEL 12INCH 900#RF FLANGE/SKETCH/RTJGAS-1.sat', 
    scaleFromFile=OFF)
mdb.models['2D MODEL RTJ'].ConstrainedSketchFromGeometryFile(geometryFile=
    mdb.acis, name='RTJGAS-1')
mdb.openAcis(
    'D:/MSPROGRAM/project/MODEL 12INCH 900#RF FLANGE/SKETCH/BOLTHALF-1.sat', 
    scaleFromFile=OFF)
mdb.models['2D MODEL RTJ'].ConstrainedSketchFromGeometryFile(geometryFile=
    mdb.acis, name='BOLTHALF-1-1')
mdb.models['2D MODEL RTJ'].ConstrainedSketch(name='__profile__', sheetSize=
    1000.0)
del mdb.models['2D MODEL RTJ'].sketches['__profile__']
mdb.openAcis(
    'D:/MSPROGRAM/project/MODEL 12INCH 900#RF FLANGE/SKETCH/FLGRTJ-1.sat', 
    scaleFromFile=OFF)
mdb.models['2D MODEL RTJ'].ConstrainedSketchFromGeometryFile(geometryFile=
    mdb.acis, name='FLGRTJ-1')
del mdb.models['2D MODEL RTJ'].sketches['BOLTHALF-1-1']
mdb.models['2D MODEL RTJ'].ConstrainedSketch(name='__profile__', sheetSize=
    1000.0)
mdb.models['2D MODEL RTJ'].sketches['__profile__'].sketchOptions.setValues(
    gridOrigin=(190.5, -4.27428579330445))
mdb.models['2D MODEL RTJ'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['2D MODEL RTJ'].sketches['FLGRTJ-1'])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['2D MODEL RTJ'].sketches['FLGRTJ-1'])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[4], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[5], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[6], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[7]))
mdb.models['2D MODEL RTJ'].Part(dimensionality=TWO_D_PLANAR, name='Part-1', 
    type=DEFORMABLE_BODY)
mdb.models['2D MODEL RTJ'].parts['Part-1'].BaseShell(sketch=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'])
del mdb.models['2D MODEL RTJ'].sketches['__profile__']
mdb.models['2D MODEL RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2D MODEL RTJ'].sketches['BOLTHALF-1'])
del mdb.models['2D MODEL RTJ'].sketches['__edit__']
mdb.models['2D MODEL RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2D MODEL RTJ'].sketches['FLGRTJ-1'])
del mdb.models['2D MODEL RTJ'].sketches['__edit__']
mdb.models['2D MODEL RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2D MODEL RTJ'].sketches['RTJGAS-1'])
del mdb.models['2D MODEL RTJ'].sketches['__edit__']
del mdb.models['2D MODEL RTJ'].sketches['FLGRTJ-1']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Solid revolve-1'].sketch)
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Solid revolve-1'])
mdb.models['Model-RTJ'].ConstrainedSketch(name='FLGRTJ-2', objectToCopy=
    mdb.models['Model-RTJ'].sketches['__edit__'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].sketches['FLGRTJ-2'].writeAcisFile(fileName=
    'D:/MSPROGRAM/project/MODEL 12INCH 900#RF FLANGE/SKETCH/FLGRTJ-2.sat', 
    version=20)
mdb.models['2D MODEL RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2D MODEL RTJ'].parts['Part-1'].features['Shell planar-1'].sketch)
mdb.models['2D MODEL RTJ'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2D MODEL RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2D MODEL RTJ'].parts['Part-1'].features['Shell planar-1'])
del mdb.models['2D MODEL RTJ'].sketches['__edit__']
mdb.openAcis(
    'D:/MSPROGRAM/project/MODEL 12INCH 900#RF FLANGE/SKETCH/FLGRTJ-2.sat', 
    scaleFromFile=OFF)
mdb.models['2D MODEL RTJ'].ConstrainedSketchFromGeometryFile(geometryFile=
    mdb.acis, name='FLGRTJ-2')
mdb.models['2D MODEL RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2D MODEL RTJ'].parts['Part-1'].features['Shell planar-1'].sketch)
mdb.models['2D MODEL RTJ'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2D MODEL RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2D MODEL RTJ'].parts['Part-1'].features['Shell planar-1'])
mdb.models['2D MODEL RTJ'].sketches['__edit__'].retrieveSketch(sketch=
    mdb.models['2D MODEL RTJ'].sketches['FLGRTJ-2'])
mdb.models['2D MODEL RTJ'].sketches['__edit__'].retrieveSketch(sketch=
    mdb.models['2D MODEL RTJ'].sketches['BOLTHALF-1'])
mdb.models['2D MODEL RTJ'].sketches['__edit__'].rotate(angle=90.0, centerPoint=
    (190.5, -4.27428579330445), objectList=(
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[32], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[33], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[34], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[35], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[36], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[37]))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].rotate(angle=90.0, centerPoint=
    (190.5, -4.27428579330444), objectList=(
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[32], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[33], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[34], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[35], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[36], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[37]))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].copyMirror(mirrorLine=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[32], objectList=(
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[32], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[33], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[34], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[35], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[36], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[37]))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[32], ))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[38], ))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[37], ))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[43], ))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[33], ))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[39], ))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].Line(point1=(172.5, 
    -4.27428579330444), point2=(208.5, -4.27428579330444))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[44])
mdb.models['2D MODEL RTJ'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[34], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[44])
mdb.models['2D MODEL RTJ'].sketches['__edit__'].Line(point1=(163.5, 
    -125.707619126638), point2=(217.5, -125.707619126638))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[45])
mdb.models['2D MODEL RTJ'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[36], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[45])
mdb.models['2D MODEL RTJ'].sketches['__edit__'].Line(point1=(190.5, 
    -4.27428579330444), point2=(190.5, -229.274285793304))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[46])
mdb.models['2D MODEL RTJ'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[44], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[46])
mdb.models['2D MODEL RTJ'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].vertices[38], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[44])
mdb.models['2D MODEL RTJ'].sketches['__edit__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].vertices[28], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].vertices[34], midpoint=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].vertices[38])
mdb.models['2D MODEL RTJ'].sketches['__edit__'].offset(distance=266.7, 
    objectList=(mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[46], )
    , side=LEFT)
mdb.models['2D MODEL RTJ'].sketches['__edit__'].move(objectList=(
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[34], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[35], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[36], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[40], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[41], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[42], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[44], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[45], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[46]), vector=(
    266.7, 0.0))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].offset(distance=19.05, 
    objectList=(mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[46], )
    , side=LEFT)
mdb.models['2D MODEL RTJ'].sketches['__edit__'].offset(distance=19.05, 
    objectList=(mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[46], )
    , side=RIGHT)
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[49], point1=(
    436.366119384766, -215.358276367188))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[50], point1=(
    438.872619628906, -111.070785522461))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[48], point1=(
    477.096343994141, -187.08757019043))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[52], point1=(
    477.096343994141, -106.673126220703))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[53], point1=(
    477.421020507813, -9.16716766357422))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[51], point1=(
    436.441986083984, -8.70029449462891))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[26], point1=(
    439.00927734375, -13.1930999755859))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[57], point1=(
    475.743225097656, -13.3389711380005))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[58], point1=(
    463.397399902344, -13.6475553512573))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[60], point1=(
    453.0693359375, -13.4075450897217))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[46], point1=(
    458.546295166016, -165.172729492188))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[47], point1=(
    458.546295166016, -165.582885742188))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[61], point1=(
    457.319000244141, -115.953987121582))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[62], point1=(
    457.728118896484, -112.262588500977))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[63], point1=(
    455.273498535156, -76.578987121582))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[64], point1=(
    457.319000244141, -76.989143371582))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[24], point1=(
    454.046203613281, -91.344612121582))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[35], point1=(
    432.930847167969, -93.1570205688477))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[41], point1=(
    479.35400390625, -92.8783187866211))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].undo()
mdb.models['2D MODEL RTJ'].sketches['__edit__'].undo()
mdb.models['2D MODEL RTJ'].sketches['__edit__'].undo()
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[24], point1=(
    457.578674316406, -92.5067138671875))
mdb.models['2D MODEL RTJ'].ConstrainedSketch(name='TWO D MODEL', objectToCopy=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'])
mdb.models['2D MODEL RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[44], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[34], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[40], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[42], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[36]))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[35], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[41]))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[65], point1=(
    439.043487548828, -92.7082214355469))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[66], point1=(
    475.433898925781, -92.6951751708984))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[45], point1=(
    452.770324707031, -123.918014526367))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[13], point1=(
    378.500427246094, -4.1976490020752))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[10], point1=(
    375.705261230469, -5.92852973937988))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[11], point1=(
    378.253784179688, -11.6156997680664))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[12], point1=(
    386.392608642578, -5.92852973937988))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[69], point1=(
    375.668304443359, -7.4843168258667))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[70], point1=(
    386.206878662109, -7.70628833770752))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[29], point1=(
    385.937561035156, -9.40830898284912))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[71], point1=(
    386.011108398438, -9.44518089294434))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[73], point1=(
    385.128448486328, -11.9525499343872))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[72], point1=(
    386.195007324219, -9.18706893920898))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].Line(point1=(383.795054803003, 
    -14.9068708996948), point2=(386.95, -7.47428579330445))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].Line(point1=(438.15, 
    -13.4742857933045), point2=(476.25, -13.4742857933045))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[75])
mdb.models['2D MODEL RTJ'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[55], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[75])
mdb.models['2D MODEL RTJ'].sketches['__edit__'].Line(point1=(438.15, 
    -92.8742857933045), point2=(476.25, -92.8742857933045))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[76])
mdb.models['2D MODEL RTJ'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[55], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[76])
mdb.models['2D MODEL RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[54], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[55], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[56], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[59], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[67], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[68], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[75], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[76], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].constraints[161], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].constraints[162], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].constraints[165], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].constraints[166]))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].Line(point1=(400.0, 
    -13.4742857933045), point2=(495.5, -13.4742857933045))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[77])
mdb.models['2D MODEL RTJ'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[27], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[77])
mdb.models['2D MODEL RTJ'].sketches['__edit__'].Line(point1=(400.0, 
    -92.8742857933045), point2=(495.5, -92.8742857933045))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[78])
mdb.models['2D MODEL RTJ'].parts['Part-1'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2D MODEL RTJ'].sketches['__edit__'])
del mdb.models['2D MODEL RTJ'].sketches['__edit__']
mdb.models['2D MODEL RTJ'].parts['Part-1'].regenerate()
mdb.models['2D MODEL RTJ'].ConstrainedSketch(name='__profile__', sheetSize=
    1000.0)
mdb.models['2D MODEL RTJ'].sketches['__profile__'].sketchOptions.setValues(
    gridOrigin=(190.5, -4.27428579330445))
mdb.models['2D MODEL RTJ'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['2D MODEL RTJ'].sketches['RTJGAS-1'])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[4], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[5], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[6], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[7]))
mdb.models['2D MODEL RTJ'].sketches['__profile__'].sketchOptions.setValues(
    gridOrigin=(416.0, -115.874287366867))
mdb.models['2D MODEL RTJ'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['2D MODEL RTJ'].sketches['TWO D MODEL'])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[21], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[22], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[23], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[24], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[26], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[27], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[28], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[29], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[30], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[31], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[32], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[33], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[34], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[35], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[36], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[37], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[38], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[39], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].constraints[60], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].constraints[61], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].constraints[64], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].constraints[65]))
mdb.models['2D MODEL RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[18], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[19], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[20]))
mdb.models['2D MODEL RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[14], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[15], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[16], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[17], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[25]))
mdb.models['2D MODEL RTJ'].Part(dimensionality=TWO_D_PLANAR, name='Part-2', 
    type=DEFORMABLE_BODY)
mdb.models['2D MODEL RTJ'].parts['Part-2'].BaseShell(sketch=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'])
del mdb.models['2D MODEL RTJ'].sketches['__profile__']
mdb.models['2D MODEL RTJ'].parts.changeKey(fromName='Part-1', toName='FLG')
mdb.models['2D MODEL RTJ'].parts.changeKey(fromName='Part-2', toName='RTJ')
mdb.models['2D MODEL RTJ'].ConstrainedSketch(name='__profile__', sheetSize=
    1000.0)
mdb.models['2D MODEL RTJ'].sketches['__profile__'].sketchOptions.setValues(
    gridOrigin=(416.0, -115.874287366867))
mdb.models['2D MODEL RTJ'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['2D MODEL RTJ'].sketches['TWO D MODEL'])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[4], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[5], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[6], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[7], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[8], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[9], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[10], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[11], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[12], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[13], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[14], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[15], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[17], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[18], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[19], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[30], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[32]))
mdb.models['2D MODEL RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[16], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[31], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[33]))
mdb.models['2D MODEL RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[29], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[28]))
mdb.models['2D MODEL RTJ'].Part(dimensionality=TWO_D_PLANAR, name='BOLTS', 
    type=DEFORMABLE_BODY)
mdb.models['2D MODEL RTJ'].parts['BOLTS'].BaseShell(sketch=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'])
del mdb.models['2D MODEL RTJ'].sketches['__profile__']
mdb.models['2D MODEL RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2D MODEL RTJ'].parts['FLG'].features['Shell planar-1'].sketch)
mdb.models['2D MODEL RTJ'].parts['FLG'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2D MODEL RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2D MODEL RTJ'].parts['FLG'].features['Shell planar-1'])
del mdb.models['2D MODEL RTJ'].sketches['__edit__']
mdb.models['2D MODEL RTJ'].ConstrainedSketch(gridSpacing=18.89, name=
    '__profile__', sheetSize=755.89)
mdb.models['2D MODEL RTJ'].parts['FLG'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2D MODEL RTJ'].sketches['__profile__'])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['2D MODEL RTJ'].sketches['TWO D MODEL'])
del mdb.models['2D MODEL RTJ'].sketches['__profile__']
mdb.models['2D MODEL RTJ'].ConstrainedSketch(gridSpacing=18.89, name=
    '__profile__', sheetSize=755.89)
mdb.models['2D MODEL RTJ'].parts['FLG'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2D MODEL RTJ'].sketches['__profile__'])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['2D MODEL RTJ'].sketches['TWO D MODEL'])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].mirror(mirrorLine=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[40], 
    objectList=(
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[18], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[19], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[20], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[21], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[22], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[23], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[24], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[25], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[26], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[27], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[28], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[29], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[30], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[31], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[32], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[33], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[34], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[35], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[36], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[37], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[38], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[39], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[40], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[41], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[42], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[43], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[44], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[45], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[46], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[47]))
mdb.models['2D MODEL RTJ'].sketches['__profile__'].Line(point1=(438.15, 
    4.92571420669556), point2=(438.15, -99.1725000000512))
mdb.models['2D MODEL RTJ'].sketches['__profile__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[48])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[43], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[48])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].Line(point1=(476.25, 
    4.92571420669556), point2=(476.25, -99.1725000000512))
mdb.models['2D MODEL RTJ'].sketches['__profile__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[49])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[42], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[49])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].Line(point1=(400.0, 
    -13.4742857933045), point2=(495.5, -13.4742857933045))
mdb.models['2D MODEL RTJ'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[50])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[13], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[50])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].Line(point1=(400.0, 
    -92.8742857933045), point2=(495.5, -92.8742857933045))
mdb.models['2D MODEL RTJ'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[51])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[50], point1=(
    406.478118896484, -13.2334899902344))
mdb.models['2D MODEL RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[52], point1=(
    492.093322753906, -14.3703994750977))
mdb.models['2D MODEL RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[51], point1=(
    484.722473144531, -91.111572265625))
mdb.models['2D MODEL RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[49], point1=(
    477.351623535156, -94.8065185546875))
mdb.models['2D MODEL RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[48], point1=(
    437.095458984375, -96.5118713378906))
mdb.models['2D MODEL RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[54], point1=(
    420.65283203125, -92.8169326782227))
mdb.models['2D MODEL RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[56], point1=(
    436.811981201172, -8.68586730957031))
mdb.models['2D MODEL RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[55], point1=(
    476.217651367188, -7.83318328857422))
mdb.models['2D MODEL RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[18], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[19], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[20], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[21], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[22], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[23], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[24], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[25], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[26], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[27], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[28], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[29], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[30], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[31], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[32], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[33], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[34], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[35], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[36], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[37], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[38], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[39], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[40], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[41], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[42], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[43], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[44], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[45], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[46], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[47], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].constraints[112], 
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].constraints[116]))
mdb.models['2D MODEL RTJ'].parts['FLG'].Cut(sketch=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'])
del mdb.models['2D MODEL RTJ'].sketches['__profile__']
mdb.models['2D MODEL RTJ'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['2D MODEL RTJ'].rootAssembly.Instance(dependent=ON, name='BOLTS-1', 
    part=mdb.models['2D MODEL RTJ'].parts['BOLTS'])
mdb.models['2D MODEL RTJ'].rootAssembly.Instance(dependent=ON, name='FLG-1', 
    part=mdb.models['2D MODEL RTJ'].parts['FLG'])
mdb.models['2D MODEL RTJ'].rootAssembly.Instance(dependent=ON, name='RTJ-1', 
    part=mdb.models['2D MODEL RTJ'].parts['RTJ'])
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['2D MODEL RTJ'].Material(name='BOLT&NUT')
mdb.models['2D MODEL RTJ'].materials['BOLT&NUT'].Elastic(table=((204000.0, 
    0.3), ))
mdb.models['2D MODEL RTJ'].materials['BOLT&NUT'].Expansion(table=((1.265e-05, 
    ), ))
mdb.models['2D MODEL RTJ'].Material(name='FLANGE')
mdb.models['2D MODEL RTJ'].materials['FLANGE'].Elastic(table=((203395.0, 0.3), 
    ))
mdb.models['2D MODEL RTJ'].materials['FLANGE'].Expansion(table=((1.265e-05, ), 
    ))
mdb.models['2D MODEL RTJ'].Material(name='gasket')
mdb.models['2D MODEL RTJ'].materials['gasket'].Elastic(table=((200000.0, 0.26), 
    ))
mdb.models['2D MODEL RTJ'].materials['gasket'].Expansion(table=((1.8e-05, ), ))
mdb.models['2D MODEL RTJ'].materials['gasket'].Plastic(table=((200.0, 0.0), (
    246.0, 0.0235), (294.0, 0.0474), (374.0, 0.0935), (437.0, 0.1377), (480.0, 
    0.18)))
mdb.models['2D MODEL RTJ'].materials['gasket'].GasketTransverseShearElastic(
    table=((79300.0, ), ))
mdb.models['2D MODEL RTJ'].materials['gasket'].GasketMembraneElastic(table=((
    200000.0, 0.26), ))
mdb.models['2D MODEL RTJ'].materials['gasket'].GasketThicknessBehavior(table=((
    0.0, 0.0), (34.48275862, 0.0438), (68.96551724, 0.0501), (103.4482759, 
    0.0555), (137.9310345, 0.0606), (172.4137931, 0.0642), (206.8965517, 
    0.0702), (241.3793103, 0.0756), (275.862069, 0.081), (310.3448276, 0.0876), 
    (344.8275862, 0.096), (379.3103448, 0.1062)))
mdb.models['2D MODEL RTJ'].materials['gasket'].gasketThicknessBehavior.setValues(
    unloadingTable=((0.0, 0.0, 0.0738), (34.48275862, 0.0438, 0.09), (
    68.96551724, 0.0501, 0.096), (103.4482759, 0.0555, 0.0996), (137.9310345, 
    0.0606, 0.102), (172.4137931, 0.0, 0.1032), (206.8965517, 0.0, 0.1038), (
    241.3793103, 0.0, 0.1044), (275.862069, 0.0, 0.1047), (310.3448276, 0.0, 
    0.105), (344.8275862, 0.0, 0.1056), (379.3103448, 0.0, 0.1062)))
mdb.models['2D MODEL RTJ'].materials.changeKey(fromName='gasket', toName=
    'RTJ GASKET')
mdb.models['2D MODEL RTJ'].HomogeneousShellSection(idealization=NO_IDEALIZATION
    , integrationRule=SIMPSON, material='RTJ GASKET', name='RTJ GASKET', 
    numIntPts=5, poissonDefinition=DEFAULT, preIntegrate=OFF, temperature=
    GRADIENT, thickness=10.0, thicknessField='', thicknessModulus=None, 
    thicknessType=UNIFORM, useDensity=OFF)
mdb.models['2D MODEL RTJ'].HomogeneousSolidSection(material='RTJ GASKET', name=
    'Section-2', thickness=1.0)
mdb.models['2D MODEL RTJ'].parts['RTJ'].Set(faces=
    mdb.models['2D MODEL RTJ'].parts['RTJ'].faces.getSequenceFromMask(('[#1 ]', 
    ), ), name='Set-1')
mdb.models['2D MODEL RTJ'].parts['RTJ'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['2D MODEL RTJ'].parts['RTJ'].sets['Set-1'], sectionName=
    'Section-2', thicknessAssignment=FROM_SECTION)
mdb.models['2D MODEL RTJ'].sections.changeKey(fromName='Section-2', toName=
    'RTJGASKET')
del mdb.models['2D MODEL RTJ'].sections['RTJ GASKET']
mdb.models['2D MODEL RTJ'].HomogeneousSolidSection(material='FLANGE', name=
    'FLG', thickness=1.0)
mdb.models['2D MODEL RTJ'].parts['RTJ'].sectionAssignments[0].setValues(
    sectionName='RTJGASKET')
mdb.models['2D MODEL RTJ'].parts['FLG'].Set(faces=
    mdb.models['2D MODEL RTJ'].parts['FLG'].faces.getSequenceFromMask(('[#3 ]', 
    ), ), name='Set-1')
mdb.models['2D MODEL RTJ'].parts['FLG'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['2D MODEL RTJ'].parts['FLG'].sets['Set-1'], sectionName='FLG', 
    thicknessAssignment=FROM_SECTION)
mdb.models['2D MODEL RTJ'].HomogeneousSolidSection(material='BOLT&NUT', name=
    'BOLT', thickness=1.0)
mdb.models['2D MODEL RTJ'].parts['BOLTS'].Set(faces=
    mdb.models['2D MODEL RTJ'].parts['BOLTS'].faces.getSequenceFromMask((
    '[#1 ]', ), ), name='Set-1')
mdb.models['2D MODEL RTJ'].parts['BOLTS'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['2D MODEL RTJ'].parts['BOLTS'].sets['Set-1'], sectionName='BOLT'
    , thicknessAssignment=FROM_SECTION)
mdb.models['2D MODEL RTJ'].parts['FLG'].AttachmentPoints(name=
    'Attachment Points-1', points=(
    mdb.models['2D MODEL RTJ'].parts['FLG'].vertices[5], 
    mdb.models['2D MODEL RTJ'].parts['FLG'].vertices[0], 
    mdb.models['2D MODEL RTJ'].parts['FLG'].vertices[4], 
    mdb.models['2D MODEL RTJ'].parts['FLG'].vertices[1]), setName=
    'Attachment Points-1-Set-1')
mdb.models['2D MODEL RTJ'].rootAssembly.regenerate()
mdb.models['2D MODEL RTJ'].rootAssembly.WirePolyLine(mergeType=IMPRINT, 
    meshable=OFF, points=((
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].vertices[9], 
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].vertices[4]), (
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].vertices[8], 
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].vertices[5])))
mdb.models['2D MODEL RTJ'].rootAssembly.Set(edges=
    mdb.models['2D MODEL RTJ'].rootAssembly.edges.getSequenceFromMask(('[#3 ]', 
    ), ), name='Wire-1-Set-1')
mdb.models['2D MODEL RTJ'].rootAssembly.features['BOLTS-1'].suppress()
mdb.models['2D MODEL RTJ'].ConnectorSection(assembledType=BEAM, name=
    'ConnSect-1')
mdb.models['2D MODEL RTJ'].rootAssembly.Set(edges=
    mdb.models['2D MODEL RTJ'].rootAssembly.edges.getSequenceFromMask(('[#3 ]', 
    ), ), name='Set-2')
mdb.models['2D MODEL RTJ'].rootAssembly.SectionAssignment(region=
    mdb.models['2D MODEL RTJ'].rootAssembly.sets['Set-2'], sectionName=
    'ConnSect-1')
mdb.models['2D MODEL RTJ'].rootAssembly.features['BOLTS-1'].resume()
mdb.models['2D MODEL RTJ'].rootAssembly.makeIndependent(instances=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['BOLTS-1'], ))
mdb.models['2D MODEL RTJ'].rootAssembly.makeIndependent(instances=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'], ))
mdb.models['2D MODEL RTJ'].rootAssembly.makeIndependent(instances=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'], ))
mdb.models['2D MODEL RTJ'].ConstrainedSketch(gridSpacing=12.11, name=
    '__profile__', sheetSize=484.69, transform=
    mdb.models['2D MODEL RTJ'].rootAssembly.MakeSketchTransform(
    sketchPlane=mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].faces[1], 
    sketchPlaneSide=SIDE1, sketchOrientation=RIGHT, origin=(375.691806, 
    -88.657704, 0.0)))
mdb.models['2D MODEL RTJ'].rootAssembly.projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2D MODEL RTJ'].sketches['__profile__'])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].Line(point1=(24.308194, 
    75.1834182066955), point2=(24.308194, -4.21658179330446))
mdb.models['2D MODEL RTJ'].sketches['__profile__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[34])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[15], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[34])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].Line(point1=(24.308194, 
    -4.21658179330446), point2=(-39.1918059999794, -4.21658179330446))
mdb.models['2D MODEL RTJ'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[35])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].vertices[33], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[24])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].Line(point1=(
    24.3081940000001, 72.66), point2=(-39.1918059999794, 72.66))
mdb.models['2D MODEL RTJ'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[36])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[34], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[36])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].vertices[34], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[34])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].vertices[35], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[24])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[36], ))
mdb.models['2D MODEL RTJ'].sketches['__profile__'].Line(point1=(
    24.3081940000001, 60.55), point2=(-39.1918059999794, 60.55))
mdb.models['2D MODEL RTJ'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[37])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[34], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[37])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].vertices[36], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[34])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].vertices[37], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[24])
mdb.models['2D MODEL RTJ'].rootAssembly.PartitionFaceBySketch(faces=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].faces.getSequenceFromMask(
    ('[#2 ]', ), ), sketch=mdb.models['2D MODEL RTJ'].sketches['__profile__'])
del mdb.models['2D MODEL RTJ'].sketches['__profile__']
mdb.models['2D MODEL RTJ'].ConstrainedSketch(gridSpacing=13.38, name=
    '__profile__', sheetSize=535.28, transform=
    mdb.models['2D MODEL RTJ'].rootAssembly.MakeSketchTransform(
    sketchPlane=mdb.models['2D MODEL RTJ'].rootAssembly.instances['BOLTS-1'].faces[0], 
    sketchPlaneSide=SIDE1, sketchOrientation=RIGHT, origin=(457.2, -70.266675, 
    0.0)))
mdb.models['2D MODEL RTJ'].rootAssembly.projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2D MODEL RTJ'].sketches['__profile__'])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].Line(point1=(18.0, 
    -22.6076107933044), point2=(-18.0, -22.6076107933044))
mdb.models['2D MODEL RTJ'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[44])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[6], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[44])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].Line(point1=(18.0, 
    21.6923892066956), point2=(-18.0, 21.6923892066956))
mdb.models['2D MODEL RTJ'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[45])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[7], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[45])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].vertices[36], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[7])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].vertices[5], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].vertices[6], midpoint=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].vertices[36])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].vertices[37], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[9])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].vertices[7], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].vertices[0], midpoint=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].vertices[37])
mdb.models['2D MODEL RTJ'].rootAssembly.PartitionFaceBySketch(faces=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['BOLTS-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), sketch=mdb.models['2D MODEL RTJ'].sketches['__profile__'])
del mdb.models['2D MODEL RTJ'].sketches['__profile__']
mdb.models['2D MODEL RTJ'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'], ), size=1.0)
mdb.models['2D MODEL RTJ'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'], ), size=2.0)
mdb.models['2D MODEL RTJ'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'], ), size=3.0)
mdb.models['2D MODEL RTJ'].rootAssembly.setMeshControls(regions=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].faces.getSequenceFromMask(
    ('[#f ]', ), ), technique=STRUCTURED)
mdb.models['2D MODEL RTJ'].rootAssembly.setMeshControls(elemShape=QUAD, 
    regions=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].faces.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['2D MODEL RTJ'].rootAssembly.generateMesh(regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'], ))
mdb.models['2D MODEL RTJ'].rootAssembly.deleteMesh(regions=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].faces.getSequenceFromMask(
    ('[#f ]', ), ))
mdb.models['2D MODEL RTJ'].rootAssembly.setMeshControls(elemShape=QUAD, 
    regions=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].faces.getSequenceFromMask(
    ('[#f ]', ), ))
mdb.models['2D MODEL RTJ'].rootAssembly.generateMesh(regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'], ))
mdb.models['2D MODEL RTJ'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['BOLTS-1'], ), size=5.4)
mdb.models['2D MODEL RTJ'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=CPS4, elemLibrary=STANDARD), ElemType(elemCode=CPS3, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].faces.getSequenceFromMask(
    ('[#1f ]', ), ), ))
mdb.models['2D MODEL RTJ'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=CPS4, elemLibrary=STANDARD), ElemType(elemCode=CPS3, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['BOLTS-1'].faces.getSequenceFromMask(
    ('[#7 ]', ), ), ))
mdb.models['2D MODEL RTJ'].rootAssembly.setMeshControls(elemShape=TRI, regions=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), technique=STRUCTURED)
mdb.models['2D MODEL RTJ'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'], ), size=0.1)
mdb.models['2D MODEL RTJ'].rootAssembly.generateMesh(regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'], ))
mdb.models['2D MODEL RTJ'].rootAssembly.deleteMesh(regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'], ))
mdb.models['2D MODEL RTJ'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'], ), size=0.4)
mdb.models['2D MODEL RTJ'].rootAssembly.setMeshControls(regions=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), technique=FREE)
mdb.models['2D MODEL RTJ'].rootAssembly.setMeshControls(regions=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), technique=STRUCTURED)
mdb.models['2D MODEL RTJ'].rootAssembly.setMeshControls(allowMapped=False, 
    regions=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), technique=FREE)
mdb.models['2D MODEL RTJ'].rootAssembly.setMeshControls(elemShape=QUAD, 
    regions=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['2D MODEL RTJ'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=GKPE4, elemLibrary=STANDARD), ElemType(elemCode=UNKNOWN_TRI, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['2D MODEL RTJ'].rootAssembly.generateMesh(regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'], ))
mdb.models['2D MODEL RTJ'].rootAssembly.deleteMesh(regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'], ))
mdb.models['2D MODEL RTJ'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'], ), size=0.5)
mdb.models['2D MODEL RTJ'].rootAssembly.generateMesh(regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'], ))
mdb.models['2D MODEL RTJ'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=GKPS4, elemLibrary=STANDARD), ElemType(elemCode=UNKNOWN_TRI, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['2D MODEL RTJ'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=GKPE4, elemLibrary=STANDARD), ElemType(elemCode=UNKNOWN_TRI, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['2D MODEL RTJ'].rootAssembly.generateMesh(regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['BOLTS-1'], ))
mdb.models['2D MODEL RTJ'].ContactProperty('IntProp-1')
mdb.models['2D MODEL RTJ'].interactionProperties['IntProp-1'].TangentialBehavior(
    formulation=ROUGH)
mdb.models['2D MODEL RTJ'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, clearanceAtZeroContactPressure=0.0, 
    constraintEnforcementMethod=PENALTY, contactStiffness=DEFAULT, 
    contactStiffnessScaleFactor=1.0, pressureOverclosure=HARD, 
    stiffnessBehavior=LINEAR)
mdb.models['2D MODEL RTJ'].ContactStd(createStepName='Initial', name='Int-1')
mdb.models['2D MODEL RTJ'].interactions['Int-1'].includedPairs.setValuesInStep(
    stepName='Initial', useAllstar=ON)
mdb.models['2D MODEL RTJ'].interactions['Int-1'].contactPropertyAssignments.appendInStep(
    assignments=((GLOBAL, SELF, 'IntProp-1'), ), stepName='Initial')
mdb.models['2D MODEL RTJ'].StaticStep(name='BOLT LOAD', nlgeom=ON, previous=
    'Initial')
mdb.models['2D MODEL RTJ'].rootAssembly.Set(edges=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['BOLTS-1'].edges.getSequenceFromMask(
    mask=('[#4 ]', ), ), name='Set-16')
mdb.models['2D MODEL RTJ'].DisplacementBC(amplitude=UNSET, createStepName=
    'BOLT LOAD', distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=
    None, name='BC-1', region=
    mdb.models['2D MODEL RTJ'].rootAssembly.sets['Set-16'], u1=0.0, u2=0.0, 
    ur3=UNSET)
mdb.models['2D MODEL RTJ'].boundaryConditions['BC-1'].setValues(ur3=0.0)
mdb.models['2D MODEL RTJ'].rootAssembly.DatumAxisByPrincipalAxis(principalAxis=
    YAXIS)
mdb.models['2D MODEL RTJ'].rootAssembly.Surface(name='Surf-1', side1Edges=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['BOLTS-1'].edges.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['2D MODEL RTJ'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'BOLT LOAD', datumAxis=mdb.models['2D MODEL RTJ'].rootAssembly.datums[34], 
    magnitude=115000.0, name='Load-1', region=
    mdb.models['2D MODEL RTJ'].rootAssembly.surfaces['Surf-1'])
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='2D MODEL RTJ', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='2DMODEL', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['2DMODEL'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['2DMODEL']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The surface ASSEMBLY__INT-1_GCS0_13 has not been defined.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The surface ASSEMBLY__INT-1_GCS0_14 has not been defined.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The surface ASSEMBLY__INT-1_GCS0_15 has not been defined.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The surface ASSEMBLY__INT-1_GCS0_16 has not been defined.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The surface ASSEMBLY__INT-1_GCS0_17 has not been defined.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The surface ASSEMBLY__INT-1_GCS0_18 has not been defined.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The surface ASSEMBLY__INT-1_GCS0_19 has not been defined.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The surface ASSEMBLY__INT-1_GCS0_20 has not been defined.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '*FRICTION,LAGRANGE OR *FRICTION,ROUGH MAY CAUSE CONVERGENCE DIFFICULTY WHEN USED IN CONJUNCTION WITH THE *SURFACE BEHAVIOR, AUGMENTED LAGRANGE OR PENALTY OPTION. USE PENALTY FRICTION INSTEAD.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '438 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '438 elements have incorrect property definitions. The elements have been identified in element set ErrElemIncorrectProperty.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY_FLG-1_Attachment Points-1-Set-1 HAS NO MEMBERS AND WILL BE IGNORED.  NODES DEFINED IN THIS SET MAY HAVE BEEN DELETED BECAUSE THEY WERE NOT CONNECTED TO ANY ELEMENTS.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The angle between any thickness direction in 232 elements varies by more than 20 degrees. The elements have been identified in element set ErrElemAngleThickGasket.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The thickness of 148 elements may not be zero or negative; you may want to specify the thickness of these elements on the *GASKET SECTION card for these elements. The elements have been identified in element set ErrElemThickNegZero.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 32 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\2DMODEL.odb', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': '2DMODEL'})
mdb.models['2D MODEL RTJ'].loads['Load-1'].setValues(magnitude=1150.0)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['2D MODEL RTJ'].rootAssembly.deleteMesh(regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'], ))
mdb.models['2D MODEL RTJ'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'], ), size=1.0)
mdb.models['2D MODEL RTJ'].rootAssembly.generateMesh(regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'], ))
mdb.models['2D MODEL RTJ'].rootAssembly.deleteMesh(regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'], ))
mdb.models['2D MODEL RTJ'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'], ), size=0.4)
mdb.models['2D MODEL RTJ'].rootAssembly.setMeshControls(regions=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), technique=STRUCTURED)
#* Error: Mapped meshing with Quad/Hex elements is not supported
#* in Abaqus/CAE for the Gasket elements.
mdb.models['2D MODEL RTJ'].rootAssembly.setMeshControls(algorithm=MEDIAL_AXIS, 
    regions=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ))
#* Error: Free meshing with Quad/Hex elements is not supported
#* in Abaqus/CAE for the Gasket elements.
mdb.models['2D MODEL RTJ'].rootAssembly.setMeshControls(allowMapped=True, 
    regions=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ))
#* Error: Free meshing with Quad/Hex elements is not supported
#* in Abaqus/CAE for the Gasket elements.
mdb.models['2D MODEL RTJ'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=GKPS4N, elemLibrary=STANDARD), ElemType(elemCode=UNKNOWN_TRI, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['2D MODEL RTJ'].rootAssembly.generateMesh(regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'], ))
mdb.models['2D MODEL RTJ'].rootAssembly.deleteMesh(regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'], ))
mdb.models['2D MODEL RTJ'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'], ), size=1.0)
mdb.models['2D MODEL RTJ'].rootAssembly.generateMesh(regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'], ))
mdb.models['2D MODEL RTJ'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=CPS4, elemLibrary=STANDARD), ElemType(elemCode=CPS3, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['2D MODEL RTJ'].rootAssembly.deleteMesh(regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'], ))
mdb.models['2D MODEL RTJ'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'], ), size=0.5)
mdb.models['2D MODEL RTJ'].rootAssembly.generateMesh(regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'], ))
mdb.models['2D MODEL RTJ'].rootAssembly.deleteMesh(regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'], ))
mdb.models['2D MODEL RTJ'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'], ), size=0.2)
mdb.models['2D MODEL RTJ'].rootAssembly.generateMesh(regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'], ))
mdb.jobs['2DMODEL'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['2DMODEL']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The surface ASSEMBLY__INT-1_GCS0_13 has not been defined.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The surface ASSEMBLY__INT-1_GCS0_14 has not been defined.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The surface ASSEMBLY__INT-1_GCS0_15 has not been defined.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The surface ASSEMBLY__INT-1_GCS0_16 has not been defined.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The surface ASSEMBLY__INT-1_GCS0_17 has not been defined.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The surface ASSEMBLY__INT-1_GCS0_18 has not been defined.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The surface ASSEMBLY__INT-1_GCS0_19 has not been defined.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The surface ASSEMBLY__INT-1_GCS0_20 has not been defined.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '*FRICTION,LAGRANGE OR *FRICTION,ROUGH MAY CAUSE CONVERGENCE DIFFICULTY WHEN USED IN CONJUNCTION WITH THE *SURFACE BEHAVIOR, AUGMENTED LAGRANGE OR PENALTY OPTION. USE PENALTY FRICTION INSTEAD.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY_FLG-1_Attachment Points-1-Set-1 HAS NO MEMBERS AND WILL BE IGNORED.  NODES DEFINED IN THIS SET MAY HAVE BEEN DELETED BECAUSE THEY WERE NOT CONNECTED TO ANY ELEMENTS.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 66 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\2DMODEL.odb', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': '2DMODEL'})
mdb.models['2D MODEL RTJ'].rootAssembly.Surface(name='Surf-2', side1Edges=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].edges.getSequenceFromMask(
    ('[#3e00000 ]', ), ))
mdb.models['2D MODEL RTJ'].rootAssembly.Surface(name='Surf-3', side1Edges=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'].edges.getSequenceFromMask(
    ('[#e ]', ), ))
mdb.models['2D MODEL RTJ'].rootAssembly.Surface(name='FLANGE', side1Edges=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].edges.getSequenceFromMask(
    ('[#10020 ]', ), ))
mdb.models['2D MODEL RTJ'].rootAssembly.Surface(name='Surf-5', side1Edges=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['BOLTS-1'].edges.getSequenceFromMask(
    ('[#880 ]', ), ))
mdb.models['2D MODEL RTJ'].interactions['Int-1'].includedPairs.setValuesInStep(
    addPairs=((mdb.models['2D MODEL RTJ'].rootAssembly.surfaces['Surf-2'], 
    mdb.models['2D MODEL RTJ'].rootAssembly.surfaces['Surf-3']), (
    mdb.models['2D MODEL RTJ'].rootAssembly.surfaces['FLANGE'], 
    mdb.models['2D MODEL RTJ'].rootAssembly.surfaces['Surf-5'])), stepName=
    'Initial', useAllstar=OFF)
mdb.models['2D MODEL RTJ'].interactions['Int-1'].surfaceThicknessAssignments.appendInStep(
    assignments=((mdb.models['2D MODEL RTJ'].rootAssembly.surfaces['FLANGE'], 
    ORIGINAL, 1.0), (
    mdb.models['2D MODEL RTJ'].rootAssembly.surfaces['Surf-1'], ORIGINAL, 1.0), 
    (mdb.models['2D MODEL RTJ'].rootAssembly.surfaces['Surf-2'], ORIGINAL, 
    1.0), (mdb.models['2D MODEL RTJ'].rootAssembly.surfaces['Surf-3'], 
    ORIGINAL, 1.0), (
    mdb.models['2D MODEL RTJ'].rootAssembly.surfaces['Surf-5'], ORIGINAL, 1.0))
    , stepName='Initial')
mdb.models['2D MODEL RTJ'].interactions['Int-1'].masterSlaveAssignments.appendInStep(
    assignments=((mdb.models['2D MODEL RTJ'].rootAssembly.surfaces['Surf-2'], 
    mdb.models['2D MODEL RTJ'].rootAssembly.surfaces['Surf-3'], MASTER), (
    mdb.models['2D MODEL RTJ'].rootAssembly.surfaces['Surf-3'], 
    mdb.models['2D MODEL RTJ'].rootAssembly.surfaces['Surf-5'], MASTER)), 
    stepName='Initial')
mdb.jobs['2DMODEL'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['2DMODEL']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The surface ASSEMBLY__INT-1_GCS0_13 has not been defined.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The surface ASSEMBLY__INT-1_GCS0_14 has not been defined.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The surface ASSEMBLY__INT-1_GCS0_15 has not been defined.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The surface ASSEMBLY__INT-1_GCS0_16 has not been defined.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The surface ASSEMBLY__INT-1_GCS0_17 has not been defined.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The surface ASSEMBLY__INT-1_GCS0_18 has not been defined.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The surface ASSEMBLY__INT-1_GCS0_19 has not been defined.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The surface ASSEMBLY__INT-1_GCS0_20 has not been defined.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '*FRICTION,LAGRANGE OR *FRICTION,ROUGH MAY CAUSE CONVERGENCE DIFFICULTY WHEN USED IN CONJUNCTION WITH THE *SURFACE BEHAVIOR, AUGMENTED LAGRANGE OR PENALTY OPTION. USE PENALTY FRICTION INSTEAD.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY_FLG-1_Attachment Points-1-Set-1 HAS NO MEMBERS AND WILL BE IGNORED.  NODES DEFINED IN THIS SET MAY HAVE BEEN DELETED BECAUSE THEY WERE NOT CONNECTED TO ANY ELEMENTS.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 66 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\2DMODEL.odb', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': '2DMODEL'})
mdb.models['2D MODEL RTJ'].interactions['Int-1'].includedPairs.setValuesInStep(
    stepName='Initial', useAllstar=ON)
mdb.models['2D MODEL RTJ'].interactions['Int-1'].contactPropertyAssignments.appendInStep(
    assignments=((mdb.models['2D MODEL RTJ'].rootAssembly.surfaces['Surf-2'], 
    mdb.models['2D MODEL RTJ'].rootAssembly.surfaces['Surf-3'], 'IntProp-1'), (
    mdb.models['2D MODEL RTJ'].rootAssembly.surfaces['Surf-3'], 
    mdb.models['2D MODEL RTJ'].rootAssembly.surfaces['Surf-5'], 'IntProp-1')), 
    stepName='Initial')
mdb.jobs['2DMODEL'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['2DMODEL']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The surface ASSEMBLY__INT-1_GCS0_13 has not been defined.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The surface ASSEMBLY__INT-1_GCS0_14 has not been defined.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The surface ASSEMBLY__INT-1_GCS0_15 has not been defined.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The surface ASSEMBLY__INT-1_GCS0_16 has not been defined.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The surface ASSEMBLY__INT-1_GCS0_17 has not been defined.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The surface ASSEMBLY__INT-1_GCS0_18 has not been defined.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The surface ASSEMBLY__INT-1_GCS0_19 has not been defined.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The surface ASSEMBLY__INT-1_GCS0_20 has not been defined.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '*FRICTION,LAGRANGE OR *FRICTION,ROUGH MAY CAUSE CONVERGENCE DIFFICULTY WHEN USED IN CONJUNCTION WITH THE *SURFACE BEHAVIOR, AUGMENTED LAGRANGE OR PENALTY OPTION. USE PENALTY FRICTION INSTEAD.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY_FLG-1_Attachment Points-1-Set-1 HAS NO MEMBERS AND WILL BE IGNORED.  NODES DEFINED IN THIS SET MAY HAVE BEEN DELETED BECAUSE THEY WERE NOT CONNECTED TO ANY ELEMENTS.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 66 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\2DMODEL.odb', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': '2DMODEL'})
mdb.models['2D MODEL RTJ'].interactions['Int-1'].suppress()
mdb.jobs['2DMODEL'].submit(consistencyChecking=OFF)
mdb.jobs['2DMODEL']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY_FLG-1_Attachment Points-1-Set-1 HAS NO MEMBERS AND WILL BE IGNORED.  NODES DEFINED IN THIS SET MAY HAVE BEEN DELETED BECAUSE THEY WERE NOT CONNECTED TO ANY ELEMENTS.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 66 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\2DMODEL.odb', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 22452, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['2DMODEL']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 3 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': '2DMODEL', 'memory': 40.0})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': '2DMODEL'})
mdb.models['2D MODEL RTJ'].rootAssembly.RemoveAttachments(attachmentPoints=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].vertices.getSequenceFromMask(
    ('[#f ]', ), ))
#* Only attachments created at the assembly level
#* should be selected. Attachments created at the
#* part level can be removed in the part module.
mdb.models['2D MODEL RTJ'].rootAssembly.RemoveAttachments(attachmentPoints=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].vertices.getSequenceFromMask(
    ('[#f ]', ), ))
#* Only attachments created at the assembly level
#* should be selected. Attachments created at the
#* part level can be removed in the part module.
mdb.models['2D MODEL RTJ'].rootAssembly.RemoveAttachments(attachmentPoints=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].vertices.getSequenceFromMask(
    ('[#2 ]', ), ))
#* Only attachments created at the assembly level
#* should be selected. Attachments created at the
#* part level can be removed in the part module.
mdb.models['2D MODEL RTJ'].rootAssembly.features['Wire-1'].suppress()
del mdb.models['2D MODEL RTJ'].rootAssembly.features['Wire-1']
mdb.models['2D MODEL RTJ'].rootAssembly.RemoveAttachments(attachmentPoints=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].vertices.getSequenceFromMask(
    ('[#8 ]', ), ))
#* Only attachments created at the assembly level
#* should be selected. Attachments created at the
#* part level can be removed in the part module.
mdb.models['2D MODEL RTJ'].parts['FLG'].RemoveAttachments(attachmentPoints=
    mdb.models['2D MODEL RTJ'].parts['FLG'].vertices.getSequenceFromMask((
    '[#f ]', ), ))
mdb.models['2D MODEL RTJ'].rootAssembly.regenerate()
mdb.models['2D MODEL RTJ'].rootAssembly.WirePolyLine(mergeType=IMPRINT, 
    meshable=OFF, points=((
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].vertices[11], 
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].vertices[1]), (
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].vertices[12], 
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].vertices[0])))
mdb.models['2D MODEL RTJ'].rootAssembly.Set(edges=
    mdb.models['2D MODEL RTJ'].rootAssembly.edges.getSequenceFromMask(('[#3 ]', 
    ), ), name='Wire-1-Set-2')
del mdb.models['2D MODEL RTJ'].rootAssembly.sets['Wire-1-Set-1']
del mdb.models['2D MODEL RTJ'].sections['ConnSect-1']
mdb.models['2D MODEL RTJ'].ConnectorSection(assembledType=BEAM, name=
    'ConnSect-1')
mdb.models['2D MODEL RTJ'].rootAssembly.Set(edges=
    mdb.models['2D MODEL RTJ'].rootAssembly.edges.getSequenceFromMask(('[#3 ]', 
    ), ), name='Set-19')
mdb.models['2D MODEL RTJ'].rootAssembly.SectionAssignment(region=
    mdb.models['2D MODEL RTJ'].rootAssembly.sets['Set-19'], sectionName=
    'ConnSect-1')
del mdb.models['2D MODEL RTJ'].rootAssembly.sectionAssignments[0]
mdb.jobs['2DMODEL'].submit(consistencyChecking=OFF)
mdb.jobs['2DMODEL']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 66 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\2DMODEL.odb', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 32572, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['2DMODEL']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 3 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': '2DMODEL', 'memory': 40.0})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': '2DMODEL'})
mdb.models['2D MODEL RTJ'].loads['Load-1'].setValues(magnitude=115.0)
mdb.jobs['2DMODEL'].submit(consistencyChecking=OFF)
mdb.jobs['2DMODEL']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 66 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\2DMODEL.odb', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 28996, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['2DMODEL']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 3 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': '2DMODEL', 'memory': 40.0})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': '2DMODEL'})
mdb.models['2D MODEL RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2D MODEL RTJ'].parts['BOLTS'].features['Shell planar-1'].sketch)
mdb.models['2D MODEL RTJ'].parts['BOLTS'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2D MODEL RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2D MODEL RTJ'].parts['BOLTS'].features['Shell planar-1'])
mdb.models['2D MODEL RTJ'].sketches['__edit__'].ConstructionLine(point1=(457.2, 
    -125.707619126638), point2=(457.2, -4.27428579330444))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[34])
mdb.models['2D MODEL RTJ'].sketches['__edit__'].DistanceDimension(entity1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].vertices[21], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[34], textPoint=(
    453.555633544922, 6.93979644775391), value=18.0)
mdb.models['2D MODEL RTJ'].parts['BOLTS'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2D MODEL RTJ'].sketches['__edit__'])
del mdb.models['2D MODEL RTJ'].sketches['__edit__']
mdb.models['2D MODEL RTJ'].parts['BOLTS'].regenerate()
mdb.models['2D MODEL RTJ'].rootAssembly.regenerate()
mdb.models['2D MODEL RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2D MODEL RTJ'].parts['BOLTS'].features['Shell planar-1'].sketch)
mdb.models['2D MODEL RTJ'].parts['BOLTS'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2D MODEL RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2D MODEL RTJ'].parts['BOLTS'].features['Shell planar-1'])
del mdb.models['2D MODEL RTJ'].sketches['__edit__']
mdb.models['2D MODEL RTJ'].rootAssembly.regenerate()
mdb.models['2D MODEL RTJ'].rootAssembly.DatumPointByMidPoint(point1=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['BOLTS-1'].InterestingPoint(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['BOLTS-1'].edges[2], 
    MIDDLE), point2=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['BOLTS-1'].InterestingPoint(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['BOLTS-1'].edges[9], 
    MIDDLE))
mdb.models['2D MODEL RTJ'].rootAssembly.DatumPointByMidPoint(point1=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['BOLTS-1'].InterestingPoint(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['BOLTS-1'].edges[2], 
    MIDDLE), point2=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['BOLTS-1'].InterestingPoint(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['BOLTS-1'].edges[9], 
    MIDDLE))
mdb.models['2D MODEL RTJ'].rootAssembly.DatumAxisByTwoPoint(point1=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['BOLTS-1'].InterestingPoint(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['BOLTS-1'].edges[9], 
    MIDDLE), point2=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['BOLTS-1'].InterestingPoint(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['BOLTS-1'].edges[2], 
    MIDDLE))
mdb.models['2D MODEL RTJ'].loads['Load-1'].setValues(datumAxis=
    mdb.models['2D MODEL RTJ'].rootAssembly.datums[96])
mdb.jobs['2DMODEL'].submit(consistencyChecking=OFF)
mdb.jobs['2DMODEL']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 66 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\2DMODEL.odb', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 4740, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['2DMODEL']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 3 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': '2DMODEL', 'memory': 40.0})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': '2DMODEL'})
mdb.models['2D MODEL RTJ'].loads['Load-1'].setValues(magnitude=11.0)
mdb.jobs['2DMODEL'].submit(consistencyChecking=OFF)
mdb.jobs['2DMODEL']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 66 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\2DMODEL.odb', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 31008, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['2DMODEL']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 3 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': '2DMODEL', 'memory': 40.0})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': '2DMODEL'})
mdb.models['2D MODEL RTJ'].rootAssembly.WirePolyLine(mergeType=IMPRINT, 
    meshable=OFF, points=((
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].vertices[3], 
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].vertices[4]), (
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].vertices[10], 
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].vertices[2]), (
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].vertices[8], 
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].vertices[2]), (
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].vertices[9], 
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].vertices[2]), (
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].vertices[3], 
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].vertices[5]), (
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].vertices[3], 
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].vertices[11]), (
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].vertices[2], 
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].vertices[12])))
mdb.models['2D MODEL RTJ'].rootAssembly.Set(edges=
    mdb.models['2D MODEL RTJ'].rootAssembly.edges.getSequenceFromMask((
    '[#7f ]', ), ), name='Wire-2-Set-1')
mdb.models['2D MODEL RTJ'].rootAssembly.WirePolyLine(mergeType=IMPRINT, 
    meshable=OFF, points=((
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].vertices[20], 
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].vertices[2]), ))
mdb.models['2D MODEL RTJ'].rootAssembly.Set(edges=
    mdb.models['2D MODEL RTJ'].rootAssembly.edges.getSequenceFromMask(('[#1 ]', 
    ), ), name='Wire-3-Set-1')
mdb.models['2D MODEL RTJ'].rootAssembly.Set(edges=
    mdb.models['2D MODEL RTJ'].rootAssembly.edges.getSequenceFromMask((
    '[#ff ]', ), ), name='Set-22')
mdb.models['2D MODEL RTJ'].rootAssembly.SectionAssignment(region=
    mdb.models['2D MODEL RTJ'].rootAssembly.sets['Set-22'], sectionName=
    'ConnSect-1')
mdb.jobs['2DMODEL'].submit(consistencyChecking=OFF)
mdb.jobs['2DMODEL']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 66 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\2DMODEL.odb', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 37752, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['2DMODEL']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 3 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': '2DMODEL', 'memory': 40.0})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': '2DMODEL'})
mdb.models['2D MODEL RTJ'].rootAssembly.deleteSets(setNames=('Wire-1-Set-2', 
    'Wire-2-Set-1', 'Wire-3-Set-1'))
del mdb.models['2D MODEL RTJ'].rootAssembly.features['Wire-1']
mdb.models['2D MODEL RTJ'].rootAssembly.deleteFeatures(('Wire-2', 'Wire-3'))
mdb.models['2D MODEL RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2D MODEL RTJ'].parts['FLG'].features['Shell planar-1'].sketch)
mdb.models['2D MODEL RTJ'].parts['FLG'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2D MODEL RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2D MODEL RTJ'].parts['FLG'].features['Shell planar-1'])
del mdb.models['2D MODEL RTJ'].sketches['__edit__']
mdb.models['2D MODEL RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2D MODEL RTJ'].parts['FLG'].features['Cut extrude-1'].sketch)
mdb.models['2D MODEL RTJ'].parts['FLG'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2D MODEL RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2D MODEL RTJ'].parts['FLG'].features['Cut extrude-1'])
mdb.models['2D MODEL RTJ'].sketches['__edit__'].offset(distance=18.89, 
    objectList=(mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[53], )
    , side=RIGHT)
mdb.models['2D MODEL RTJ'].sketches['__edit__'].offset(distance=18.89, 
    objectList=(mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[57], )
    , side=LEFT)
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[53], point1=(
    458.400848388672, -14.4065933227539))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[58], point1=(
    440.800476074219, -18.4169998168945))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[59], point1=(
    474.401153564453, -23.2294998168945))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[74], point1=(
    440.00048828125, -85.7919998168945))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[57], point1=(
    445.6005859375, -91.4065933227539))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[75], point1=(
    474.001159667969, -86.1930465698242))
mdb.models['2D MODEL RTJ'].parts['FLG'].features['Cut extrude-1'].setValues(
    sketch=mdb.models['2D MODEL RTJ'].sketches['__edit__'])
del mdb.models['2D MODEL RTJ'].sketches['__edit__']
mdb.models['2D MODEL RTJ'].parts['FLG'].regenerate()
#* FeatureError: Regeneration failed
mdb.models['2D MODEL RTJ'].parts['FLG'].backup()
mdb.models['2D MODEL RTJ'].parts['FLG'].deleteFeatures(('Attachment Points-1', 
    'Remove Attachments-1'))
mdb.models['2D MODEL RTJ'].rootAssembly.regenerate()
mdb.models['2D MODEL RTJ'].rootAssembly.generateMesh(regions=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'], ))
mdb.models['2D MODEL RTJ'].rootAssembly.makeDependent(instances=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['BOLTS-1'], ))
mdb.models['2D MODEL RTJ'].rootAssembly.makeDependent(instances=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'], ))
mdb.models['2D MODEL RTJ'].rootAssembly.makeDependent(instances=(
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'], ))
mdb.models['2D MODEL RTJ'].parts['BOLTS'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=8.9)
mdb.models['2D MODEL RTJ'].parts['BOLTS'].generateMesh()
mdb.models['2D MODEL RTJ'].parts['FLG'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=11.0)
mdb.models['2D MODEL RTJ'].parts['FLG'].generateMesh()
mdb.models['2D MODEL RTJ'].parts['RTJ'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=1.2)
mdb.models['2D MODEL RTJ'].parts['RTJ'].generateMesh()
mdb.models['2D MODEL RTJ'].rootAssembly.regenerate()
del mdb.models['2D MODEL RTJ'].interactions['Int-1']
mdb.models['2D MODEL RTJ'].parts['BOLTS'].deleteMesh(regions=
    mdb.models['2D MODEL RTJ'].parts['BOLTS'].faces.getSequenceFromMask((
    '[#1 ]', ), ))
mdb.models['2D MODEL RTJ'].ConstrainedSketch(gridSpacing=6.96, name=
    '__profile__', sheetSize=278.54, transform=
    mdb.models['2D MODEL RTJ'].parts['BOLTS'].MakeSketchTransform(
    sketchPlane=mdb.models['2D MODEL RTJ'].parts['BOLTS'].faces[0], 
    sketchPlaneSide=SIDE1, sketchOrientation=RIGHT, origin=(457.2, -70.266675, 
    0.0)))
mdb.models['2D MODEL RTJ'].parts['BOLTS'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2D MODEL RTJ'].sketches['__profile__'])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].Line(point1=(-18.0, 27.84), 
    point2=(18.0, 27.84))
mdb.models['2D MODEL RTJ'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[10])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[9], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[10])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].vertices[8], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[9])
mdb.models['2D MODEL RTJ'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].vertices[9], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__profile__'].geometry[7])
mdb.models['2D MODEL RTJ'].parts['BOLTS'].PartitionFaceBySketch(faces=
    mdb.models['2D MODEL RTJ'].parts['BOLTS'].faces.getSequenceFromMask((
    '[#1 ]', ), ), sketch=mdb.models['2D MODEL RTJ'].sketches['__profile__'])
del mdb.models['2D MODEL RTJ'].sketches['__profile__']
mdb.models['2D MODEL RTJ'].parts['BOLTS'].generateMesh()
mdb.models['2D MODEL RTJ'].rootAssembly.regenerate()
mdb.models['2D MODEL RTJ'].rootAssembly.Surface(name='Surf-6', side2Edges=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['BOLTS-1'].edges.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['2D MODEL RTJ'].loads['Load-1'].setValues(datumAxis=
    mdb.models['2D MODEL RTJ'].rootAssembly.datums[96], region=
    mdb.models['2D MODEL RTJ'].rootAssembly.surfaces['Surf-6'])
mdb.models['2D MODEL RTJ'].rootAssembly.Surface(name='Surf-7', side1Edges=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['BOLTS-1'].edges.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['2D MODEL RTJ'].loads['Load-1'].setValues(region=
    mdb.models['2D MODEL RTJ'].rootAssembly.surfaces['Surf-7'])
del mdb.models['2D MODEL RTJ'].rootAssembly.sectionAssignments[0]
del mdb.models['2D MODEL RTJ'].rootAssembly.sectionAssignments[0]
mdb.jobs['2DMODEL'].submit(consistencyChecking=OFF)
mdb.jobs['2DMODEL']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\2DMODEL.odb', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 1240, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['2DMODEL']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 3 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': '2DMODEL', 'memory': 24.0})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': '2DMODEL'})
mdb.Model(name='2D MODEL RTJ-Copy', objectToCopy=mdb.models['2D MODEL RTJ'])
del mdb.models['2D MODEL RTJ-Copy'].steps['BOLT LOAD']
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.deleteFeatures(('BOLTS-1', 
    'Datum axis-2', 'Datum pt-2', 'Datum pt-1'))
del mdb.models['2D MODEL RTJ-Copy'].rootAssembly.features['FLG-1']
del mdb.models['2D MODEL RTJ-Copy'].rootAssembly.features['RTJ-1']
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.deleteSets(setNames=('Set-2', 
    'Set-16', 'Set-19', 'Set-22'))
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.deleteSurfaces(surfaceNames=(
    'FLANGE', 'Surf-1', 'Surf-2', 'Surf-3', 'Surf-5', 'Surf-6', 'Surf-7'))
del mdb.models['2D MODEL RTJ-Copy'].parts['BOLTS']
del mdb.models['2D MODEL RTJ-Copy'].parts['FLG']
del mdb.models['2D MODEL RTJ-Copy'].parts['RTJ']
mdb.models['2D MODEL RTJ-Copy'].ConstrainedSketch(name='__profile__', 
    sheetSize=1000.0)
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].sketchOptions.setValues(
    gridOrigin=(416.0, -115.874287366867))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['2D MODEL RTJ-Copy'].sketches['TWO D MODEL'])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].delete(objectList=(
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[20], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[23], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[28], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[29], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[30], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[31]))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].delete(objectList=(
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[32], ))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].delete(objectList=(
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[21], ))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].delete(objectList=(
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[24], ))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].delete(objectList=(
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[33], ))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].Line(point1=(400.0, 
    -92.8742857933045), point2=(430.2, -92.8742857933045))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[34])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].Line(point1=(430.2, 
    -92.8742857933045), point2=(484.2, -92.8742857933045))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[35])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[34], 
    entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[35])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].Line(point1=(484.2, 
    -92.8742857933045), point2=(495.5, -92.8742857933045))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[36])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[35], 
    entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[36])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].Line(point1=(439.2, 
    -4.27428579330444), point2=(439.2, -145.874287366867))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[37])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[26], 
    entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[37])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].Line(point1=(475.2, 
    -4.27428579330444), point2=(475.2, -147.119003295898))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[38])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[26], 
    entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[38])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[37], 
    point1=(442.050415039063, -141.059158325195))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[38], 
    point1=(473.998413085938, -140.626312255859))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[40], 
    point1=(473.998413085938, -119.849723815918))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[39], 
    point1=(442.482116699219, -111.625648498535))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].Line(point1=(400.0, 
    -13.4742857933045), point2=(495.5, -13.4742857933045))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[43])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[17], 
    entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[43])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[43], 
    point1=(459.751281738281, -15.1010360717773))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].Line(point1=(439.2, 
    -48.5742857933044), point2=(475.2, -48.5742857933044))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[46])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[42], 
    entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[46])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].vertices[41], 
    entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[42])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].vertices[21], 
    entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].vertices[38], 
    midpoint=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].vertices[41])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].vertices[42], 
    entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[41])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].vertices[25], 
    entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].vertices[37], 
    midpoint=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].vertices[42])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].delete(objectList=(
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[7], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[4], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[5], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[5], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[6]))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[35], 
    point1=(452.56689453125, -92.9063720703125))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[46], 
    point1=(453.962097167969, -48.1440048217773))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[42], 
    point1=(438.149627685547, -35.3214569091797))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[41], 
    point1=(474.192779541016, -47.677734375))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[47], 
    point1=(435.591735839844, -93.6057815551758))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[48], 
    point1=(477.448303222656, -92.6732330322266))
mdb.models['2D MODEL RTJ-Copy'].Part(dimensionality=TWO_D_PLANAR, name='Part-1'
    , type=DEFORMABLE_BODY)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].BaseShell(sketch=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'])
del mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__']
mdb.models['2D MODEL RTJ-Copy'].ConstrainedSketch(gridSpacing=13.7, name=
    '__profile__', sheetSize=548.08)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].Line(point1=(430.2, 
    -92.8742857933045), point2=(484.2, -92.8742857933045))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[24])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[11], 
    entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[24])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].Line(point1=(336.5, 
    -7.47428579330445), point2=(336.5, -164.4))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[25])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[7], 
    entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[25])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].vertices[24], 
    entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[8])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].copyMove(objectList=(
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[25], ), 
    vector=(102.7, -6.0))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].move(objectList=(
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[26], ), 
    vector=(138.7, -6.0))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].undo()
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].delete(objectList=(
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[25], ))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].copyMove(objectList=(
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[26], ), 
    vector=(36.0, 0.0))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].Line(point1=(439.2, 
    -13.4742857933045), point2=(475.2, -13.4742857933045))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[28])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[20], 
    entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[28])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].vertices[25], 
    entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[20])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].vertices[27], 
    entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[17])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[26], 
    point1=(439.943725585938, -165.106170654297))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[29], 
    point1=(439.537902832031, -119.943046569824))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[27], 
    point1=(474.43896484375, -147.203674316406))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[31], 
    point1=(474.43896484375, -117.908676147461))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].Line(point1=(439.2, 
    -53.1742857933044), point2=(475.2, -53.1742857933044))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[33])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[30], 
    entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[33])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].vertices[33], 
    entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[30])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].vertices[25], 
    entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].vertices[30], 
    midpoint=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].vertices[33])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].vertices[34], 
    entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[32])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].vertices[27], 
    entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].vertices[32], 
    midpoint=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].vertices[34])
mdb.models['2D MODEL RTJ-Copy'].ConstrainedSketch(name='cut', objectToCopy=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'])
del mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__']
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].regenerate()
mdb.models['2D MODEL RTJ-Copy'].ConstrainedSketch(gridSpacing=13.7, name=
    '__profile__', sheetSize=548.08, transform=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].MakeSketchTransform(
    sketchPlane=mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].faces[0], 
    sketchPlaneSide=SIDE1, sketchOrientation=RIGHT, origin=(404.451845, 
    -81.232547, 0.0)))
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['2D MODEL RTJ-Copy'].sketches['cut'])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].move(objectList=(
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[26], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[27], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[28], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[29], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[30]), 
    vector=(-404.451845, 81.232547))
del mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__']
mdb.models['2D MODEL RTJ-Copy'].ConstrainedSketch(gridSpacing=13.7, name=
    '__profile__', sheetSize=548.08, transform=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].MakeSketchTransform(
    sketchPlane=mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].faces[0], 
    sketchPlaneSide=SIDE1, sketchOrientation=RIGHT, origin=(404.451845, 
    -81.232547, 0.0)))
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['2D MODEL RTJ-Copy'].sketches['cut'])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].move(objectList=(
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[26], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[27], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[28], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[29], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[30]), 
    vector=(-404.451845, 81.232547))
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].PartitionFaceBySketch(faces=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].faces.getSequenceFromMask((
    '[#1 ]', ), ), sketch=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'])
del mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__']
mdb.models['2D MODEL RTJ-Copy'].ConstrainedSketch(name='__profile__', 
    sheetSize=1000.0)
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].sketchOptions.setValues(
    gridOrigin=(190.5, -4.27428579330445))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['2D MODEL RTJ-Copy'].sketches['RTJGAS-1'])
mdb.models['2D MODEL RTJ-Copy'].Part(dimensionality=TWO_D_PLANAR, name='Part-2'
    , type=DEFORMABLE_BODY)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-2'].BaseShell(sketch=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'])
del mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__']
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].Set(faces=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].faces.getSequenceFromMask((
    '[#2f ]', ), ), name='Set-1')
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].sets['Set-1'], sectionName=
    'FLG', thicknessAssignment=FROM_SECTION)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].Set(faces=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].faces.getSequenceFromMask((
    '[#3f ]', ), ), name='Set-2')
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].sets['Set-2'], sectionName=
    'FLG', thicknessAssignment=FROM_SECTION)
del mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].sectionAssignments[0]
mdb.models['2D MODEL RTJ-Copy'].parts['Part-2'].Set(faces=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-2'].faces.getSequenceFromMask((
    '[#1 ]', ), ), name='Set-1')
mdb.models['2D MODEL RTJ-Copy'].parts['Part-2'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-2'].sets['Set-1'], sectionName=
    'RTJGASKET', thicknessAssignment=FROM_SECTION)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=1.2)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-2'].setElementType(elemTypes=(
    ElemType(elemCode=CPS4, elemLibrary=STANDARD), ElemType(elemCode=CPS3, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-2'].faces.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['2D MODEL RTJ-Copy'].parts['Part-2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.6)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-2'].generateMesh()
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=11.0)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].setElementType(elemTypes=(
    ElemType(elemCode=CPS4, elemLibrary=STANDARD), ElemType(elemCode=CPS3, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].faces.getSequenceFromMask((
    '[#3f ]', ), ), ))
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].generateMesh()
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.Instance(dependent=ON, name=
    'Part-1-1', part=mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'])
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.Instance(dependent=ON, name=
    'Part-2-1', part=mdb.models['2D MODEL RTJ-Copy'].parts['Part-2'])
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.makeIndependent(instances=(
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-1-1'], ))
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.makeIndependent(instances=(
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-2-1'], ))
mdb.models['2D MODEL RTJ-Copy'].ConstrainedSketch(name='__edit__', 
    objectToCopy=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].features['Shell planar-1'].sketch)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'], upToFeature=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].features['Shell planar-1'])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].Line(point1=(416.0, 
    -115.874287366867), point2=(596.0, -115.874287366866))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[51])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].move(objectList=(
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[8], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[9], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[10], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[11], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[12], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[13], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[14], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[15], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[16], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[17], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[18], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[19], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[22], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[25], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[26], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[27], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[34], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[36], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[44], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[45], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[49], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[50]), vector=
    (259.5, -108.400001573562))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].delete(objectList=(
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[51], ))
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'])
del mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__']
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.regenerate()
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.regenerate()
mdb.models['2D MODEL RTJ-Copy'].ConstrainedSketch(name='__edit__', 
    objectToCopy=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].features['Shell planar-1'].sketch)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'], upToFeature=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].features['Shell planar-1'])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].move(objectList=(
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[8], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[9], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[10], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[11], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[12], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[13], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[14], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[15], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[16], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[17], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[18], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[19], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[22], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[25], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[26], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[27], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[34], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[36], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[44], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[45], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[49], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[50]), vector=
    (-259.464111328125, 108.130520582198))
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'])
del mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__']
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].regenerate()
mdb.models['2D MODEL RTJ-Copy'].ConstrainedSketch(name='__edit__', 
    objectToCopy=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].features['Partition face-1'].sketch)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'], upToFeature=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].features['Partition face-1'])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].move(objectList=(
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[28], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[27], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[29], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[30], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[26]), vector=
    (-36.023155, 21.9167387933045))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].move(objectList=(
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[28], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[27], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[29], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[30], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[26]), vector=
    (36.0590436718751, -22.1862197846685))
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].features['Partition face-1'].setValues(
    sketch=mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'])
del mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__']
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].regenerate()
mdb.models['2D MODEL RTJ-Copy'].ConstrainedSketch(name='__edit__', 
    objectToCopy=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].features['Shell planar-1'].sketch)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'], upToFeature=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].features['Shell planar-1'])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].Line(point1=(
    439.235888671875, -4.54376678466843), point2=(331.0, -4.54376678466875))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[52])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[26], entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[52])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].Line(point1=(
    375.085888671875, -7.74376678466844), point2=(375.085888671875, 
    -1.618896484375))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[53])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].Line(point1=(
    386.985888671875, -7.74376678466844), point2=(386.985888671875, 
    -1.618896484375))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[54])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[18], entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[54])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[52], point1=(
    341.454742431641, -4.59870910644531))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[55], point1=(
    407.832397460938, -4.35038757324219))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[54], point1=(
    387.027465820313, -2.36383056640625))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[53], point1=(
    376.377319335938, -2.61216735839844))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].Spot(point=(
    381.035888671875, -4.5437667846686))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].vertices[51], entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[56])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].vertices[49], entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].vertices[50], 
    midpoint=mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].vertices[51])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].delete(objectList=(
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[58], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[56]))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].delete(objectList=(
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[57], ))
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'])
del mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__']
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].regenerate()
mdb.models['2D MODEL RTJ-Copy'].ConstrainedSketch(name='__edit__', 
    objectToCopy=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].features['Shell planar-1'].sketch)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'], upToFeature=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].features['Shell planar-1'])
del mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__']
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].regenerate()
mdb.models['2D MODEL RTJ-Copy'].ConstrainedSketch(name='__edit__', 
    objectToCopy=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].features['Shell planar-1'].sketch)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'], upToFeature=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].features['Shell planar-1'])
del mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__']
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].regenerate()
mdb.models['2D MODEL RTJ-Copy'].ConstrainedSketch(name='__edit__', 
    objectToCopy=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].features['Shell planar-1'].sketch)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'], upToFeature=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].features['Shell planar-1'])
del mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__']
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.regenerate()
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.deleteFeatures(('Part-1-1', 
    'Part-2-1'))
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.Instance(dependent=ON, name=
    'Part-1-1', part=mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'])
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.Instance(dependent=ON, name=
    'Part-2-1', part=mdb.models['2D MODEL RTJ-Copy'].parts['Part-2'])
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.translate(instanceList=(
    'Part-2-1', ), vector=(-225.46, 111.33, 0.0))
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.deleteFeatures(('Datum csys-1', 
    'Datum axis-1'))
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.deleteFeatures(('Part-1-1', 
    'Part-2-1'))
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.Instance(dependent=OFF, name=
    'Part-1-1', part=mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'])
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.Instance(dependent=OFF, name=
    'Part-2-1', part=mdb.models['2D MODEL RTJ-Copy'].parts['Part-2'])
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.translate(instanceList=(
    'Part-2-1', ), vector=(-225.46, 111.33, 0.0))
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.translate(instanceList=(
    'Part-2-1', ), vector=(146.29, -146.29, 0.0))
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.translate(instanceList=(
    'Part-1-1', ), vector=(-269.809432, -27.844805, 0.0))
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.translate(instanceList=(
    'Part-2-1', ), vector=(-0.002085, 1.492307, 0.0))
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.DatumAxisByTwoPoint(point1=
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-2-1'].InterestingPoint(
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-2-1'].edges[0], 
    MIDDLE), point2=
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-1-1'].InterestingPoint(
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-1-1'].edges[19], 
    MIDDLE))
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.DatumAxisByTwoPoint(point1=
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-1-1'].vertices[19]
    , point2=
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-1-1'].vertices[14])
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.DatumAxisByTwoPoint(point1=
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-1-1'].vertices[25]
    , point2=
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-1-1'].vertices[24])
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.ReferencePoint(point=
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-2-1'].InterestingPoint(
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-2-1'].edges[0], 
    MIDDLE))
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.translate(instanceList=(
    'Part-2-1', ), vector=(0.0, 1.079121, 0.0))
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.setElementType(elemTypes=(
    ElemType(elemCode=CPS4, elemLibrary=STANDARD), ElemType(elemCode=CPS3, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.generateMesh(regions=(
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-1-1'], ))
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.setElementType(elemTypes=(
    ElemType(elemCode=CPS4, elemLibrary=STANDARD), ElemType(elemCode=CPS3, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-2-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.generateMesh(regions=(
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-2-1'], ))
mdb.models['2D MODEL RTJ-Copy'].StaticStep(name='Step-1', nlgeom=ON, previous=
    'Initial')
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.Set(edges=
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#20000000 ]', ), ), name='Set-18')
mdb.models['2D MODEL RTJ-Copy'].DisplacementBC(amplitude=UNSET, createStepName=
    'Step-1', distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None
    , name='BC-1', region=
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.sets['Set-18'], u1=0.0, u2=0.0
    , ur3=0.0)
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.Surface(name='Surf-1', side2Edges=
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#1000 ]', ), ))
mdb.models['2D MODEL RTJ-Copy'].BoltLoad(boltMethod=APPLY_FORCE, 
    createStepName='Step-1', datumAxis=
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.datums[117], magnitude=200.0, 
    name='Load-1', region=
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.surfaces['Surf-1'])
mdb.jobs['2DMODEL'].submit(consistencyChecking=OFF)
mdb.jobs['2DMODEL']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\2DMODEL.odb', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 32620, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['2DMODEL']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 3 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': '2DMODEL', 'memory': 24.0})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': '2DMODEL'})
mdb.models['2D MODEL RTJ-Copy'].boundaryConditions['BC-1'].setValues(ur3=UNSET)
mdb.jobs['2DMODEL'].submit(consistencyChecking=OFF)
mdb.jobs['2DMODEL']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\2DMODEL.odb', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 2376, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['2DMODEL']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 3 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': '2DMODEL', 'memory': 24.0})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': '2DMODEL'})
mdb.models['2D MODEL RTJ-Copy'].boundaryConditions['BC-1'].setValues(u1=UNSET)
mdb.jobs['2DMODEL'].submit(consistencyChecking=OFF)
mdb.jobs['2DMODEL']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\2DMODEL.odb', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 34668, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['2DMODEL']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 3 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': '2DMODEL', 'memory': 24.0})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2DMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DMODEL', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2DMODEL']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': '2DMODEL'})
mdb.jobs['2DMODEL']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': '2DMODEL'})
mdb.models['2D MODEL RTJ-Copy'].ConstrainedSketch(name='__edit__', 
    objectToCopy=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].features['Shell planar-1'].sketch)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'], upToFeature=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].features['Shell planar-1'])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].retrieveSketch(sketch=
    mdb.models['2D MODEL RTJ-Copy'].sketches['RTJGAS-1'])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].move(objectList=(
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[61], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[62], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[63], 
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[64]), vector=
    (-225.464111328125, 111.330520582198))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[19], point1=(
    386.132904052734, -9.75669574737549))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[62], point1=(
    386.139068603516, -9.76287841796875))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[11], point1=(
    375.908782958984, -9.68642616271973))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[67], point1=(
    375.906524658203, -9.66617488861084))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].undo()
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].Line(point1=(
    375.085888671875, -7.74376678466844), point2=(375.917448831096, 
    -9.70279975309327))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].Line(point1=(
    375.779815673828, -9.644775390625), point2=(375.993438720703, 
    -9.56389141082764))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].Line(point1=(
    375.993438720703, -9.56389141082764), point2=(376.049564195611, 
    -9.71212465784629))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[71], entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[72])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].Line(point1=(
    376.049564195611, -9.71212465784629), point2=(375.828498065606, 
    -9.79582680822205))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[72], entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[73])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].Line(point1=(
    375.828498065606, -9.79582680822205), point2=(375.779815673828, 
    -9.644775390625))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[67], point1=(
    375.930938720703, -9.71768569946289))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[69], point1=(
    375.908203125, -9.69376182556152))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[70], point1=(
    375.900238037109, -9.66756057739258))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[75], point1=(
    375.91162109375, -9.67325592041016))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[77], point1=(
    375.921844482422, -9.71085071563721))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[73], point1=(
    376.007049560547, -9.73363494873047))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[72], point1=(
    376.032073974609, -9.67211723327637))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[71], point1=(
    375.950256347656, -9.58781433105469))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[82], point1=(
    375.851379394531, -9.61059951782227))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[74], point1=(
    375.791168212891, -9.67895221710205))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[81], point1=(
    375.858215332031, -9.77920341491699))
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'])
del mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__']
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].regenerate()
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.regenerate()
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.deleteFeatures(('Part-2-1', 
    'RP-1', 'Datum axis-1'))
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.deleteMesh(regions=
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#25 ]', ), ))
mdb.models['2D MODEL RTJ-Copy'].ConstrainedSketch(gridSpacing=12.28, name=
    '__profile__', sheetSize=491.38, transform=
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.MakeSketchTransform(
    sketchPlane=mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-1-1'].faces[3], 
    sketchPlaneSide=SIDE1, sketchOrientation=RIGHT, origin=(106.327299, 
    -116.084521, 0.0)))
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].Line(point1=(
    -0.258666076230915, 78.6321406702466), point2=(-0.197319166022638, 
    78.4858844124784))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].Line(point1=(
    9.90470000599673, 78.2709463887518), point2=(10.1330413661727, 
    78.8088849223379))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[37], 
    entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[55])
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.PartitionFaceBySketch(faces=
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#8 ]', ), ), sketch=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'])
del mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__']
mdb.models['2D MODEL RTJ-Copy'].ConstrainedSketch(name='__edit__', 
    objectToCopy=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].features['Partition face-1'].sketch)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'], upToFeature=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].features['Partition face-1'])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].Line(point1=(
    -18.1820726338273, 71.8017159223379), point2=(-18.4104139940033, 
    71.2637773887518))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[60], entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[83])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].Line(point1=(
    -28.5124331660226, 71.4787154124784), point2=(-28.5737800762309, 
    71.6249716702466))
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].features['Partition face-1'].setValues(
    sketch=mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'])
del mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__']
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].regenerate()
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].Set(faces=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].faces.getSequenceFromMask((
    '[#7d ]', ), ), name='Set-4')
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].sectionAssignments[0].setValues(
    region=mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].sets['Set-4'])
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].Set(faces=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].faces.getSequenceFromMask((
    '[#2 ]', ), ), name='Set-5')
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].sets['Set-5'], sectionName=
    'RTJGASKET', thicknessAssignment=FROM_SECTION)
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.regenerate()
#* FeatureError: Regeneration failed
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.makeDependent(instances=(
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-1-1'], ))
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].seedPart(deviationFactor=0.01, 
    minSizeFactor=0.1, size=11.0)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].generateMesh()
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].deleteMesh(regions=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].faces.getSequenceFromMask((
    '[#2 ]', ), ))
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].seedEdgeBySize(constraint=FINER
    , deviationFactor=0.01, edges=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].edges.getSequenceFromMask((
    '[#2f80 ]', ), ), minSizeFactor=0.1, size=0.2)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].generateMesh()
mdb.models['2D MODEL RTJ-Copy'].ConstrainedSketch(name='__edit__', 
    objectToCopy=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].features['Partition face-1'].sketch)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'], upToFeature=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].features['Partition face-1'])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].Line(point1=(-34.25, 
    73.4887802153316), point2=(-34.25, 61.65))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[117])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[105], 
    entity2=mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[117])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].vertices[114], 
    entity2=mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[105])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].Line(point1=(-34.25, 
    61.65), point2=(-13.7, 65.075))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].undo()
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].Line(point1=(-34.25, 
    61.65), point2=(-11.9803484180011, 61.65))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[118])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[117], 
    entity2=mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[118])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].Line(point1=(
    -11.9803484180011, 61.65), point2=(-11.9803484180011, 73.4887802153571))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[119])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[118], 
    entity2=mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[119])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].vertices[117], 
    entity2=mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[112])
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].features['Partition face-1'].setValues(
    sketch=mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'])
del mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__']
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].regenerate()
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].seedEdgeBySize(constraint=FINER
    , deviationFactor=0.01, edges=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].edges.getSequenceFromMask((
    '[#1ffe00 ]', ), ), minSizeFactor=0.1, size=1.0)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].generateMesh()
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].deleteMesh()
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].seedPart(deviationFactor=0.01, 
    minSizeFactor=0.1, size=2.0)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].generateMesh()
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].deleteMesh()
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=11.0)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].seedEdgeBySize(constraint=FINER
    , deviationFactor=0.01, edges=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].edges.getSequenceFromMask((
    '[#1ffe00 ]', ), ), minSizeFactor=0.1, size=0.7)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].generateMesh()
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].deleteMesh(regions=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].faces.getSequenceFromMask((
    '[#2 ]', ), ))
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].seedEdgeBySize(constraint=FINER
    , deviationFactor=0.01, edges=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].edges.getSequenceFromMask((
    '[#a0000 ]', ), ), minSizeFactor=0.1, size=0.1)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].generateMesh()
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='2D MODEL RTJ-Copy', modelPrint=
    OFF, multiprocessingMode=DEFAULT, name='Job-4', nodalOutputPrecision=SINGLE
    , numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs.changeKey(fromName='Job-4', toName='2dmodelrtj')
del mdb.jobs['2DMODEL']
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.DatumAxisByTwoPoint(point1=
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-1-1'].InterestingPoint(
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-1-1'].edges[26], 
    MIDDLE), point2=
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-1-1'].InterestingPoint(
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-1-1'].edges[23], 
    MIDDLE))
mdb.models['2D MODEL RTJ-Copy'].loads['Load-1'].setValues(datumAxis=
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.datums[126])
mdb.jobs['2dmodelrtj'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['2dmodelrtj']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENTS 40 INSTANCE PART-1-1 AND 56 INSTANCE PART-1-1 ARE DETECTED AS PART OF THE UNDERLYING ELEMENTS TO THE PRE-TENSION SECTION ASSEMBLY_SURF-1; THIS PROBLEM OCCURS BECAUSE THE SECTION WRAPS AROUND ON ITSELF OR ELEMENTS LOCATED ON BOTH SIDES OF THE PRE-TENSION SECTION HAVE BEEN USED TO DEFINE THE SECTION OR YOU HAVE SPECIFIED MORE ELEMENTS THAN NECESSARY TO DEFINE THE SECTION.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '12 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__LOAD-1_BLRN_ HAS NO MEMBERS AND WILL BE IGNORED.  NODES DEFINED IN THIS SET MAY HAVE BEEN DELETED BECAUSE THEY WERE NOT CONNECTED TO ANY ELEMENTS.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__LOAD-1_BLRN_ HAS NOT BEEN DEFINED', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A CONCENTRATED LOAD HAS BEEN SPECIFIED ON NODE SET ASSEMBLY__LOAD-1_BLRN_.  THIS NODE SET IS NOT ACTIVE IN THE MODEL', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The aspect ratio for 1 elements exceeds 100 to 1. The elements have been identified in element set WarnElemAspectRatio.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\2dmodelrtj.odb', 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': '2dmodelrtj'})
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.Set(edges=
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#20 #4000 ]', ), ), name='Set-19')
mdb.models['2D MODEL RTJ-Copy'].boundaryConditions['BC-1'].setValues(region=
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.sets['Set-19'], u1=0.0, ur3=
    0.0)
mdb.jobs['2dmodelrtj'].submit(consistencyChecking=OFF)
mdb.jobs['2dmodelrtj']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENTS 40 INSTANCE PART-1-1 AND 56 INSTANCE PART-1-1 ARE DETECTED AS PART OF THE UNDERLYING ELEMENTS TO THE PRE-TENSION SECTION ASSEMBLY_SURF-1; THIS PROBLEM OCCURS BECAUSE THE SECTION WRAPS AROUND ON ITSELF OR ELEMENTS LOCATED ON BOTH SIDES OF THE PRE-TENSION SECTION HAVE BEEN USED TO DEFINE THE SECTION OR YOU HAVE SPECIFIED MORE ELEMENTS THAN NECESSARY TO DEFINE THE SECTION.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '12 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__LOAD-1_BLRN_ HAS NO MEMBERS AND WILL BE IGNORED.  NODES DEFINED IN THIS SET MAY HAVE BEEN DELETED BECAUSE THEY WERE NOT CONNECTED TO ANY ELEMENTS.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__LOAD-1_BLRN_ HAS NOT BEEN DEFINED', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A CONCENTRATED LOAD HAS BEEN SPECIFIED ON NODE SET ASSEMBLY__LOAD-1_BLRN_.  THIS NODE SET IS NOT ACTIVE IN THE MODEL', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The aspect ratio for 1 elements exceeds 100 to 1. The elements have been identified in element set WarnElemAspectRatio.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\2dmodelrtj.odb', 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': '2dmodelrtj'})
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.Surface(name='Surf-2', side1Edges=
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #4 ]', ), ))
mdb.models['2D MODEL RTJ-Copy'].loads['Load-1'].setValues(region=
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.surfaces['Surf-2'])
mdb.jobs['2dmodelrtj'].submit(consistencyChecking=OFF)
mdb.jobs['2dmodelrtj']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENTS 40 INSTANCE PART-1-1 AND 56 INSTANCE PART-1-1 ARE DETECTED AS PART OF THE UNDERLYING ELEMENTS TO THE PRE-TENSION SECTION ASSEMBLY_SURF-2; THIS PROBLEM OCCURS BECAUSE THE SECTION WRAPS AROUND ON ITSELF OR ELEMENTS LOCATED ON BOTH SIDES OF THE PRE-TENSION SECTION HAVE BEEN USED TO DEFINE THE SECTION OR YOU HAVE SPECIFIED MORE ELEMENTS THAN NECESSARY TO DEFINE THE SECTION.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '12 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__LOAD-1_BLRN_ HAS NO MEMBERS AND WILL BE IGNORED.  NODES DEFINED IN THIS SET MAY HAVE BEEN DELETED BECAUSE THEY WERE NOT CONNECTED TO ANY ELEMENTS.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__LOAD-1_BLRN_ HAS NOT BEEN DEFINED', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A CONCENTRATED LOAD HAS BEEN SPECIFIED ON NODE SET ASSEMBLY__LOAD-1_BLRN_.  THIS NODE SET IS NOT ACTIVE IN THE MODEL', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The aspect ratio for 1 elements exceeds 100 to 1. The elements have been identified in element set WarnElemAspectRatio.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\2dmodelrtj.odb', 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': '2dmodelrtj'})
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].deleteMesh()
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=1.0)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].generateMesh()
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].deleteMesh()
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=2.0)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].generateMesh()
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.regenerate()
mdb.jobs['2dmodelrtj'].submit(consistencyChecking=OFF)
mdb.jobs['2dmodelrtj']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENTS 1173 INSTANCE PART-1-1 AND 1625 INSTANCE PART-1-1 ARE DETECTED AS PART OF THE UNDERLYING ELEMENTS TO THE PRE-TENSION SECTION ASSEMBLY_SURF-2; THIS PROBLEM OCCURS BECAUSE THE SECTION WRAPS AROUND ON ITSELF OR ELEMENTS LOCATED ON BOTH SIDES OF THE PRE-TENSION SECTION HAVE BEEN USED TO DEFINE THE SECTION OR YOU HAVE SPECIFIED MORE ELEMENTS THAN NECESSARY TO DEFINE THE SECTION.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '360 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__LOAD-1_BLRN_ HAS NO MEMBERS AND WILL BE IGNORED.  NODES DEFINED IN THIS SET MAY HAVE BEEN DELETED BECAUSE THEY WERE NOT CONNECTED TO ANY ELEMENTS.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__LOAD-1_BLRN_ HAS NOT BEEN DEFINED', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A CONCENTRATED LOAD HAS BEEN SPECIFIED ON NODE SET ASSEMBLY__LOAD-1_BLRN_.  THIS NODE SET IS NOT ACTIVE IN THE MODEL', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The aspect ratio for 1 elements exceeds 100 to 1. The elements have been identified in element set WarnElemAspectRatio.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\2dmodelrtj.odb', 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': '2dmodelrtj'})
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].Set(faces=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].faces.getSequenceFromMask((
    '[#fe ]', ), ), name='Set-10')
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].sets['Set-10'], 
    sectionName='FLG', thicknessAssignment=FROM_SECTION)
del mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].sectionAssignments[1]
del mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].sectionAssignments[0]
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].Set(faces=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].faces.getSequenceFromMask((
    '[#1 ]', ), ), name='Set-11')
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].sets['Set-11'], 
    sectionName='RTJGASKET', thicknessAssignment=FROM_SECTION)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].regenerate()
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.regenerate()
mdb.jobs['2dmodelrtj'].submit(consistencyChecking=OFF)
mdb.jobs['2dmodelrtj']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENTS 1173 INSTANCE PART-1-1 AND 1625 INSTANCE PART-1-1 ARE DETECTED AS PART OF THE UNDERLYING ELEMENTS TO THE PRE-TENSION SECTION ASSEMBLY_SURF-2; THIS PROBLEM OCCURS BECAUSE THE SECTION WRAPS AROUND ON ITSELF OR ELEMENTS LOCATED ON BOTH SIDES OF THE PRE-TENSION SECTION HAVE BEEN USED TO DEFINE THE SECTION OR YOU HAVE SPECIFIED MORE ELEMENTS THAN NECESSARY TO DEFINE THE SECTION.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__LOAD-1_BLRN_ HAS NO MEMBERS AND WILL BE IGNORED.  NODES DEFINED IN THIS SET MAY HAVE BEEN DELETED BECAUSE THEY WERE NOT CONNECTED TO ANY ELEMENTS.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__LOAD-1_BLRN_ HAS NOT BEEN DEFINED', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A CONCENTRATED LOAD HAS BEEN SPECIFIED ON NODE SET ASSEMBLY__LOAD-1_BLRN_.  THIS NODE SET IS NOT ACTIVE IN THE MODEL', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The aspect ratio for 1 elements exceeds 100 to 1. The elements have been identified in element set WarnElemAspectRatio.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\2dmodelrtj.odb', 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': '2dmodelrtj'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['2D MODEL RTJ-Copy'].ConstrainedSketch(name='__edit__', 
    objectToCopy=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].features['Shell planar-1'].sketch)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'], upToFeature=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].features['Shell planar-1'])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].Line(point1=(
    336.535888671875, -227.743766784668), point2=(246.0, -227.743766784669))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[85])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[13], entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[85])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].HorizontalDimension(
    textPoint=(320.533630371094, -198.704376220703), value=145.925, vertex1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].vertices[69], vertex2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].vertices[13])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].undo()
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].delete(objectList=(
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[85], ))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].Line(point1=(426.0, 
    -215.874287366867), point2=(496.0, -215.874287366867))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[86])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].HorizontalDimension(
    textPoint=(491.5927734375, -197.482284545898), value=145.925, vertex1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].vertices[70], vertex2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].vertices[71])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].move(objectList=(
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[86], ), 
    vector=(-159.464111328125, -11.8694794178014))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].offset(distance=100.0, 
    objectList=(
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[86], ), side=
    RIGHT)
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].Line(point1=(
    190.610888671875, -227.743766784668), point2=(190.610888671875, 
    -327.743766784668))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[88])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[86], entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[88])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].delete(objectList=(
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[14], ))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].Line(point1=(
    352.535888671875, -227.743766784668), point2=(352.535888671875, 
    -340.874287366867))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[89])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].delete(objectList=(
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[87], ))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].Line(point1=(
    190.610888671875, -327.743766784668), point2=(384.414428710938, 
    -327.743766784668))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[90])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[88], entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[90])
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[90], point1=(
    381.946319580078, -325.7490234375))
mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'].geometry[89], point1=(
    350.477752685547, -337.502868652344))
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__'])
del mdb.models['2D MODEL RTJ-Copy'].sketches['__edit__']
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].regenerate()
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].generateMesh()
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].deleteMesh(regions=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].faces.getSequenceFromMask((
    '[#b6 ]', ), ))
mdb.models['2D MODEL RTJ-Copy'].ConstrainedSketch(gridSpacing=22.22, name=
    '__profile__', sheetSize=889.02, transform=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].MakeSketchTransform(
    sketchPlane=mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].faces[5], 
    sketchPlaneSide=SIDE1, sketchOrientation=RIGHT, origin=(319.299337, 
    -191.864972, 0.0)))
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].Line(point1=(
    33.236551671875, -35.8787947846684), point2=(17.236551671875, 
    -35.8787947846684))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[67])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[56], 
    entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[67])
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].PartitionFaceBySketch(faces=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].faces.getSequenceFromMask((
    '[#20 ]', ), ), sketch=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'])
del mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__']
mdb.models['2D MODEL RTJ-Copy'].ConstrainedSketch(gridSpacing=20.26, name=
    '__profile__', sheetSize=810.46, transform=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].MakeSketchTransform(
    sketchPlane=mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].faces[0], 
    sketchPlaneSide=SIDE1, sketchOrientation=RIGHT, origin=(376.030919, 
    -89.781302, 0.0)))
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].Line(point1=(
    23.215647384719, -5.59915488679883), point2=(-39.4950303281454, 
    -5.59915488679883))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[69])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].vertices[46], 
    entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[3])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].vertices[47], 
    entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[15])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].undo()
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].Line(point1=(
    24.004969671875, -3.36246478466845), point2=(-39.4950303281454, 
    -3.36246478466845))
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[69])
mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].vertices[46], 
    entity2=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'].geometry[15])
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].PartitionFaceBySketch(faces=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].faces.getSequenceFromMask((
    '[#1 ]', ), ), sketch=
    mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__'])
del mdb.models['2D MODEL RTJ-Copy'].sketches['__profile__']
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].generateMesh()
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].deleteMesh()
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.0)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].generateMesh()
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].deleteMesh(regions=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].faces.getSequenceFromMask((
    '[#8 ]', ), ))
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].seedEdgeBySize(constraint=FINER
    , deviationFactor=0.01, edges=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].edges.getSequenceFromMask((
    '[#e0000000 #3 ]', ), ), minSizeFactor=0.1, size=0.1)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].generateMesh()
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].deleteMesh(regions=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].faces.getSequenceFromMask((
    '[#8 ]', ), ))
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].seedEdgeBySize(constraint=FINER
    , deviationFactor=0.01, edges=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].edges.getSequenceFromMask((
    '[#2000000 ]', ), ), minSizeFactor=0.1, size=0.1)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].seedEdgeBySize(constraint=FINER
    , deviationFactor=0.01, edges=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].edges.getSequenceFromMask((
    '[#10000000 ]', ), ), minSizeFactor=0.1, size=0.1)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].generateMesh()
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].deleteMesh(regions=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].faces.getSequenceFromMask((
    '[#8 ]', ), ))
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].seedEdgeBySize(constraint=FINER
    , deviationFactor=0.01, edges=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].edges.getSequenceFromMask((
    '[#c000000 ]', ), ), minSizeFactor=0.1, size=0.1)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].generateMesh()
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].deleteMesh(regions=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].faces.getSequenceFromMask((
    '[#c ]', ), ))
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].seedEdgeBySize(constraint=FINER
    , deviationFactor=0.1, edges=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].edges.getSequenceFromMask((
    '[#10000 ]', ), ), minSizeFactor=0.1, size=0.1)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].generateMesh()
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.regenerate()
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.regenerate()
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.Set(edges=
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#200000 ]', ), ), name='Set-20')
mdb.models['2D MODEL RTJ-Copy'].boundaryConditions['BC-1'].setValues(region=
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.sets['Set-20'])
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.Set(edges=
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #8000 ]', ), ), name='Set-21')
mdb.models['2D MODEL RTJ-Copy'].YsymmBC(createStepName='Step-1', localCsys=None
    , name='BC-2', region=
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.sets['Set-21'])
mdb.jobs['2dmodelrtj'].submit(consistencyChecking=OFF)
mdb.jobs['2dmodelrtj']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENTS 285 INSTANCE PART-1-1 AND 1394 INSTANCE PART-1-1 ARE DETECTED AS PART OF THE UNDERLYING ELEMENTS TO THE PRE-TENSION SECTION ASSEMBLY_SURF-2; THIS PROBLEM OCCURS BECAUSE THE SECTION WRAPS AROUND ON ITSELF OR ELEMENTS LOCATED ON BOTH SIDES OF THE PRE-TENSION SECTION HAVE BEEN USED TO DEFINE THE SECTION OR YOU HAVE SPECIFIED MORE ELEMENTS THAN NECESSARY TO DEFINE THE SECTION.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__LOAD-1_BLRN_ HAS NO MEMBERS AND WILL BE IGNORED.  NODES DEFINED IN THIS SET MAY HAVE BEEN DELETED BECAUSE THEY WERE NOT CONNECTED TO ANY ELEMENTS.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__LOAD-1_BLRN_ HAS NOT BEEN DEFINED', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A CONCENTRATED LOAD HAS BEEN SPECIFIED ON NODE SET ASSEMBLY__LOAD-1_BLRN_.  THIS NODE SET IS NOT ACTIVE IN THE MODEL', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\2dmodelrtj.odb', 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': '2dmodelrtj'})
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.Surface(name='Surf-3', side2Edges=
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #2000 ]', ), ))
mdb.models['2D MODEL RTJ-Copy'].loads['Load-1'].setValues(datumAxis=
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.datums[126], region=
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.surfaces['Surf-3'])
mdb.jobs['2dmodelrtj'].submit(consistencyChecking=OFF)
mdb.jobs['2dmodelrtj']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENTS 285 INSTANCE PART-1-1 AND 1394 INSTANCE PART-1-1 ARE DETECTED AS PART OF THE UNDERLYING ELEMENTS TO THE PRE-TENSION SECTION ASSEMBLY_SURF-3; THIS PROBLEM OCCURS BECAUSE THE SECTION WRAPS AROUND ON ITSELF OR ELEMENTS LOCATED ON BOTH SIDES OF THE PRE-TENSION SECTION HAVE BEEN USED TO DEFINE THE SECTION OR YOU HAVE SPECIFIED MORE ELEMENTS THAN NECESSARY TO DEFINE THE SECTION.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__LOAD-1_BLRN_ HAS NO MEMBERS AND WILL BE IGNORED.  NODES DEFINED IN THIS SET MAY HAVE BEEN DELETED BECAUSE THEY WERE NOT CONNECTED TO ANY ELEMENTS.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__LOAD-1_BLRN_ HAS NOT BEEN DEFINED', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A CONCENTRATED LOAD HAS BEEN SPECIFIED ON NODE SET ASSEMBLY__LOAD-1_BLRN_.  THIS NODE SET IS NOT ACTIVE IN THE MODEL', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\2dmodelrtj.odb', 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': '2dmodelrtj'})
mdb.models['2D MODEL RTJ-Copy'].loads['Load-1'].suppress()
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.Surface(name='Surf-4', side1Edges=
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #100000 ]', ), ))
mdb.models['2D MODEL RTJ-Copy'].Pressure(amplitude=UNSET, createStepName=
    'Step-1', distributionType=UNIFORM, field='', magnitude=-310.0, name=
    'pressure', region=
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.surfaces['Surf-4'])
mdb.jobs['2dmodelrtj'].submit(consistencyChecking=OFF)
mdb.jobs['2dmodelrtj']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\2dmodelrtj.odb', 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 5768, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2dmodelrtj', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['2dmodelrtj']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': '2dmodelrtj', 'memory': 50.0})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1001 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 3 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 3788 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2dmodelrtj', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 21 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 468 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 18 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 34 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2dmodelrtj', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 156 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2dmodelrtj', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 6 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 30 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 108 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2dmodelrtj', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.00390625, 
    'attempts': 5, 'timeIncrement': 0.00390625, 'increment': 1, 
    'stepTime': 0.00390625, 'step': 1, 'jobName': '2dmodelrtj', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.00390625, 
    'attempts': ' 1U', 'timeIncrement': 0.00390625, 'increment': 2, 
    'stepTime': 0.00390625, 'step': 1, 'jobName': '2dmodelrtj', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0048828125, 
    'attempts': 2, 'timeIncrement': 0.0009765625, 'increment': 2, 
    'stepTime': 0.0048828125, 'step': 1, 'jobName': '2dmodelrtj', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.005859375, 
    'attempts': 1, 'timeIncrement': 0.0009765625, 'increment': 3, 
    'stepTime': 0.005859375, 'step': 1, 'jobName': '2dmodelrtj', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.00732421875, 
    'attempts': 1, 'timeIncrement': 0.00146484375, 'increment': 4, 
    'stepTime': 0.00732421875, 'step': 1, 'jobName': '2dmodelrtj', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.009521484375, 
    'attempts': 1, 'timeIncrement': 0.002197265625, 'increment': 5, 
    'stepTime': 0.009521484375, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0128173828125, 
    'attempts': 1, 'timeIncrement': 0.0032958984375, 'increment': 6, 
    'stepTime': 0.0128173828125, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.01776123046875, 
    'attempts': 1, 'timeIncrement': 0.00494384765625, 'increment': 7, 
    'stepTime': 0.01776123046875, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.025177001953125, 
    'attempts': 1, 'timeIncrement': 0.007415771484375, 'increment': 8, 
    'stepTime': 0.025177001953125, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 27 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 39 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 40 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 39 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 39 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0363006591796875, 
    'attempts': 1, 'timeIncrement': 0.0111236572265625, 'increment': 9, 
    'stepTime': 0.0363006591796875, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 25 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 66 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 61 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 66 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 64 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 89 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0363006591796875, 
    'attempts': ' 1U', 'timeIncrement': 0.0111236572265625, 'increment': 10, 
    'stepTime': 0.0363006591796875, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0390815734863281, 
    'attempts': 2, 'timeIncrement': 0.00278091430664063, 'increment': 10, 
    'stepTime': 0.0390815734863281, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 4 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 4 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 4 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 4 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0418624877929688, 
    'attempts': 1, 'timeIncrement': 0.00278091430664063, 'increment': 11, 
    'stepTime': 0.0418624877929688, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 13 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 14 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 15 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 14 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 14 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0460338592529297, 
    'attempts': 1, 'timeIncrement': 0.00417137145996094, 'increment': 12, 
    'stepTime': 0.0460338592529297, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 39 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 18 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 27 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 31 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 30 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 30 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 30 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 30 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 30 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 30 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0522909164428711, 
    'attempts': 1, 'timeIncrement': 0.00625705718994141, 'increment': 13, 
    'stepTime': 0.0522909164428711, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 34 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 15 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 22 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 26 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 25 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 26 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 26 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 26 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 26 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 26 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0585479736328125, 
    'attempts': 1, 'timeIncrement': 0.00625705718994141, 'increment': 14, 
    'stepTime': 0.0585479736328125, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 26 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 28 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 28 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 28 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 28 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 28 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 28 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 28 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 28 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 28 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 28 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'FORCE equilibrium accepted using the alternate tolerance.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0648050308227539, 
    'attempts': 1, 'timeIncrement': 0.00625705718994141, 'increment': 15, 
    'stepTime': 0.0648050308227539, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 10, 'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 30 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 55 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 90 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 137 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0648050308227539, 
    'attempts': ' 1U', 'timeIncrement': 0.00625705718994141, 'increment': 16, 
    'stepTime': 0.0648050308227539, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0663692951202393, 
    'attempts': 2, 'timeIncrement': 0.00156426429748535, 'increment': 16, 
    'stepTime': 0.0663692951202393, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0679335594177246, 
    'attempts': 1, 'timeIncrement': 0.00156426429748535, 'increment': 17, 
    'stepTime': 0.0679335594177246, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0702799558639526, 
    'attempts': 1, 'timeIncrement': 0.00234639644622803, 'increment': 18, 
    'stepTime': 0.0702799558639526, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0726263523101807, 
    'attempts': 1, 'timeIncrement': 0.00234639644622803, 'increment': 19, 
    'stepTime': 0.0726263523101807, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0749727487564087, 
    'attempts': 1, 'timeIncrement': 0.00234639644622803, 'increment': 20, 
    'stepTime': 0.0749727487564087, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0773191452026367, 
    'attempts': 1, 'timeIncrement': 0.00234639644622803, 'increment': 21, 
    'stepTime': 0.0773191452026367, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 22, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0796655416488647, 
    'attempts': 1, 'timeIncrement': 0.00234639644622803, 'increment': 22, 
    'stepTime': 0.0796655416488647, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 23, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0820119380950928, 
    'attempts': 1, 'timeIncrement': 0.00234639644622803, 'increment': 23, 
    'stepTime': 0.0820119380950928, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 24, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0843583345413208, 
    'attempts': 1, 'timeIncrement': 0.00234639644622803, 'increment': 24, 
    'stepTime': 0.0843583345413208, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 25, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0867047309875488, 
    'attempts': 1, 'timeIncrement': 0.00234639644622803, 'increment': 25, 
    'stepTime': 0.0867047309875488, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 26, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0890511274337769, 
    'attempts': 1, 'timeIncrement': 0.00234639644622803, 'increment': 26, 
    'stepTime': 0.0890511274337769, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 27, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0913975238800049, 
    'attempts': 1, 'timeIncrement': 0.00234639644622803, 'increment': 27, 
    'stepTime': 0.0913975238800049, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 28, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0937439203262329, 
    'attempts': 1, 'timeIncrement': 0.00234639644622803, 'increment': 28, 
    'stepTime': 0.0937439203262329, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 29, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0960903167724609, 
    'attempts': 1, 'timeIncrement': 0.00234639644622803, 'increment': 29, 
    'stepTime': 0.0960903167724609, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 30, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.098436713218689, 
    'attempts': 1, 'timeIncrement': 0.00234639644622803, 'increment': 30, 
    'stepTime': 0.098436713218689, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 31, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.100783109664917, 
    'attempts': 1, 'timeIncrement': 0.00234639644622803, 'increment': 31, 
    'stepTime': 0.100783109664917, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 32, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.103129506111145, 
    'attempts': 1, 'timeIncrement': 0.00234639644622803, 'increment': 32, 
    'stepTime': 0.103129506111145, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 33, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.105475902557373, 
    'attempts': 1, 'timeIncrement': 0.00234639644622803, 'increment': 33, 
    'stepTime': 0.105475902557373, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 34, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.107822299003601, 
    'attempts': 1, 'timeIncrement': 0.00234639644622803, 'increment': 34, 
    'stepTime': 0.107822299003601, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 35, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.110168695449829, 
    'attempts': 1, 'timeIncrement': 0.00234639644622803, 'increment': 35, 
    'stepTime': 0.110168695449829, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 36, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.112515091896057, 
    'attempts': 1, 'timeIncrement': 0.00234639644622803, 'increment': 36, 
    'stepTime': 0.112515091896057, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 37, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.114861488342285, 
    'attempts': 1, 'timeIncrement': 0.00234639644622803, 'increment': 37, 
    'stepTime': 0.114861488342285, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Warning message limit reached. No further warning messages will be reported.\nPlease see the dat file for more warnings.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 38, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.117207884788513, 
    'attempts': 1, 'timeIncrement': 0.00234639644622803, 'increment': 38, 
    'stepTime': 0.117207884788513, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 39, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.119554281234741, 
    'attempts': 1, 'timeIncrement': 0.00234639644622803, 'increment': 39, 
    'stepTime': 0.119554281234741, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 10, 'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.119554281234741, 
    'attempts': ' 1U', 'timeIncrement': 0.00234639644622803, 'increment': 40, 
    'stepTime': 0.119554281234741, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 40, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.120140880346298, 
    'attempts': 2, 'timeIncrement': 0.000586599111557007, 'increment': 40, 
    'stepTime': 0.120140880346298, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 41, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.120727479457855, 
    'attempts': 1, 'timeIncrement': 0.000586599111557007, 'increment': 41, 
    'stepTime': 0.120727479457855, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 42, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.121607378125191, 
    'attempts': 1, 'timeIncrement': 0.00087989866733551, 'increment': 42, 
    'stepTime': 0.121607378125191, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 43, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.122487276792526, 
    'attempts': 1, 'timeIncrement': 0.00087989866733551, 'increment': 43, 
    'stepTime': 0.122487276792526, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 44, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.123367175459862, 
    'attempts': 1, 'timeIncrement': 0.00087989866733551, 'increment': 44, 
    'stepTime': 0.123367175459862, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 45, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.124687023460865, 
    'attempts': 1, 'timeIncrement': 0.00131984800100327, 'increment': 45, 
    'stepTime': 0.124687023460865, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 46, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.12666679546237, 
    'attempts': 1, 'timeIncrement': 0.0019797720015049, 'increment': 46, 
    'stepTime': 0.12666679546237, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 47, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.128646567463875, 
    'attempts': 1, 'timeIncrement': 0.0019797720015049, 'increment': 47, 
    'stepTime': 0.128646567463875, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 48, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.13062633946538, 
    'attempts': 1, 'timeIncrement': 0.0019797720015049, 'increment': 48, 
    'stepTime': 0.13062633946538, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 49, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.132606111466885, 
    'attempts': 1, 'timeIncrement': 0.0019797720015049, 'increment': 49, 
    'stepTime': 0.132606111466885, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 50, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.13458588346839, 
    'attempts': 1, 'timeIncrement': 0.0019797720015049, 'increment': 50, 
    'stepTime': 0.13458588346839, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 51, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.136565655469894, 
    'attempts': 1, 'timeIncrement': 0.0019797720015049, 'increment': 51, 
    'stepTime': 0.136565655469894, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 52, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.138545427471399, 
    'attempts': 1, 'timeIncrement': 0.0019797720015049, 'increment': 52, 
    'stepTime': 0.138545427471399, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 53, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.140525199472904, 
    'attempts': 1, 'timeIncrement': 0.0019797720015049, 'increment': 53, 
    'stepTime': 0.140525199472904, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 54, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.142504971474409, 
    'attempts': 1, 'timeIncrement': 0.0019797720015049, 'increment': 54, 
    'stepTime': 0.142504971474409, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 55, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.144484743475914, 
    'attempts': 1, 'timeIncrement': 0.0019797720015049, 'increment': 55, 
    'stepTime': 0.144484743475914, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 56, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.146464515477419, 
    'attempts': 1, 'timeIncrement': 0.0019797720015049, 'increment': 56, 
    'stepTime': 0.146464515477419, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 57, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.148444287478924, 
    'attempts': 1, 'timeIncrement': 0.0019797720015049, 'increment': 57, 
    'stepTime': 0.148444287478924, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 58, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.150424059480429, 
    'attempts': 1, 'timeIncrement': 0.0019797720015049, 'increment': 58, 
    'stepTime': 0.150424059480429, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 59, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.152403831481934, 
    'attempts': 1, 'timeIncrement': 0.0019797720015049, 'increment': 59, 
    'stepTime': 0.152403831481934, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 60, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.154383603483438, 
    'attempts': 1, 'timeIncrement': 0.0019797720015049, 'increment': 60, 
    'stepTime': 0.154383603483438, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.154383603483438, 
    'attempts': ' 1U', 'timeIncrement': 0.0019797720015049, 'increment': 61, 
    'stepTime': 0.154383603483438, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 61, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.154878546483815, 
    'attempts': 2, 'timeIncrement': 0.000494943000376225, 'increment': 61, 
    'stepTime': 0.154878546483815, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 62, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.155373489484191, 
    'attempts': 1, 'timeIncrement': 0.000494943000376225, 'increment': 62, 
    'stepTime': 0.155373489484191, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 63, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.156115903984755, 
    'attempts': 1, 'timeIncrement': 0.000742414500564337, 'increment': 63, 
    'stepTime': 0.156115903984755, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 64, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.157229525735602, 
    'attempts': 1, 'timeIncrement': 0.00111362175084651, 'increment': 64, 
    'stepTime': 0.157229525735602, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 65, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.158343147486448, 
    'attempts': 1, 'timeIncrement': 0.00111362175084651, 'increment': 65, 
    'stepTime': 0.158343147486448, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 66, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.159456769237295, 
    'attempts': 1, 'timeIncrement': 0.00111362175084651, 'increment': 66, 
    'stepTime': 0.159456769237295, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 67, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.161127201863565, 
    'attempts': 1, 'timeIncrement': 0.00167043262626976, 'increment': 67, 
    'stepTime': 0.161127201863565, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 68, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.162797634489834, 
    'attempts': 1, 'timeIncrement': 0.00167043262626976, 'increment': 68, 
    'stepTime': 0.162797634489834, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 69, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.164468067116104, 
    'attempts': 1, 'timeIncrement': 0.00167043262626976, 'increment': 69, 
    'stepTime': 0.164468067116104, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 70, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.166138499742374, 
    'attempts': 1, 'timeIncrement': 0.00167043262626976, 'increment': 70, 
    'stepTime': 0.166138499742374, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 71, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.167808932368644, 
    'attempts': 1, 'timeIncrement': 0.00167043262626976, 'increment': 71, 
    'stepTime': 0.167808932368644, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 72, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.169479364994913, 
    'attempts': 1, 'timeIncrement': 0.00167043262626976, 'increment': 72, 
    'stepTime': 0.169479364994913, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 73, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.171149797621183, 
    'attempts': 1, 'timeIncrement': 0.00167043262626976, 'increment': 73, 
    'stepTime': 0.171149797621183, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 74, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.172820230247453, 
    'attempts': 1, 'timeIncrement': 0.00167043262626976, 'increment': 74, 
    'stepTime': 0.172820230247453, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 75, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.174490662873723, 
    'attempts': 1, 'timeIncrement': 0.00167043262626976, 'increment': 75, 
    'stepTime': 0.174490662873723, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 76, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.176161095499992, 
    'attempts': 1, 'timeIncrement': 0.00167043262626976, 'increment': 76, 
    'stepTime': 0.176161095499992, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 77, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.177831528126262, 
    'attempts': 1, 'timeIncrement': 0.00167043262626976, 'increment': 77, 
    'stepTime': 0.177831528126262, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 78, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.179501960752532, 
    'attempts': 1, 'timeIncrement': 0.00167043262626976, 'increment': 78, 
    'stepTime': 0.179501960752532, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 79, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.181172393378802, 
    'attempts': 1, 'timeIncrement': 0.00167043262626976, 'increment': 79, 
    'stepTime': 0.181172393378802, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 80, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.182842826005071, 
    'attempts': 1, 'timeIncrement': 0.00167043262626976, 'increment': 80, 
    'stepTime': 0.182842826005071, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 11, 'phase': STANDARD_PHASE, 'equilibrium': 11})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 81, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.184095650474774, 
    'attempts': 1, 'timeIncrement': 0.00125282446970232, 'increment': 81, 
    'stepTime': 0.184095650474774, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 82, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.185348474944476, 
    'attempts': 1, 'timeIncrement': 0.00125282446970232, 'increment': 82, 
    'stepTime': 0.185348474944476, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 10, 'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.185348474944476, 
    'attempts': ' 1U', 'timeIncrement': 0.00125282446970232, 'increment': 83, 
    'stepTime': 0.185348474944476, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 83, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.185661681061902, 
    'attempts': 2, 'timeIncrement': 0.00031320611742558, 'increment': 83, 
    'stepTime': 0.185661681061902, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 84, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.185974887179327, 
    'attempts': 1, 'timeIncrement': 0.00031320611742558, 'increment': 84, 
    'stepTime': 0.185974887179327, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 85, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.186444696355466, 
    'attempts': 1, 'timeIncrement': 0.000469809176138369, 'increment': 85, 
    'stepTime': 0.186444696355466, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 86, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.186914505531604, 
    'attempts': 1, 'timeIncrement': 0.000469809176138369, 'increment': 86, 
    'stepTime': 0.186914505531604, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 87, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.187384314707742, 
    'attempts': 1, 'timeIncrement': 0.000469809176138369, 'increment': 87, 
    'stepTime': 0.187384314707742, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 88, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.187854123883881, 
    'attempts': 1, 'timeIncrement': 0.000469809176138369, 'increment': 88, 
    'stepTime': 0.187854123883881, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 89, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.188323933060019, 
    'attempts': 1, 'timeIncrement': 0.000469809176138369, 'increment': 89, 
    'stepTime': 0.188323933060019, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 90, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.188793742236157, 
    'attempts': 1, 'timeIncrement': 0.000469809176138369, 'increment': 90, 
    'stepTime': 0.188793742236157, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 91, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.189263551412296, 
    'attempts': 1, 'timeIncrement': 0.000469809176138369, 'increment': 91, 
    'stepTime': 0.189263551412296, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 92, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.189968265176503, 
    'attempts': 1, 'timeIncrement': 0.000704713764207554, 'increment': 92, 
    'stepTime': 0.189968265176503, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 93, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.190672978940711, 
    'attempts': 1, 'timeIncrement': 0.000704713764207554, 'increment': 93, 
    'stepTime': 0.190672978940711, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 94, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.191377692704918, 
    'attempts': 1, 'timeIncrement': 0.000704713764207554, 'increment': 94, 
    'stepTime': 0.191377692704918, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 95, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.192082406469126, 
    'attempts': 1, 'timeIncrement': 0.000704713764207554, 'increment': 95, 
    'stepTime': 0.192082406469126, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 96, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.193139477115437, 
    'attempts': 1, 'timeIncrement': 0.00105707064631133, 'increment': 96, 
    'stepTime': 0.193139477115437, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 97, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.194196547761749, 
    'attempts': 1, 'timeIncrement': 0.00105707064631133, 'increment': 97, 
    'stepTime': 0.194196547761749, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 98, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.19525361840806, 
    'attempts': 1, 'timeIncrement': 0.00105707064631133, 'increment': 98, 
    'stepTime': 0.19525361840806, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 99, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.196310689054371, 
    'attempts': 1, 'timeIncrement': 0.00105707064631133, 'increment': 99, 
    'stepTime': 0.196310689054371, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 100, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.197896295023838, 
    'attempts': 1, 'timeIncrement': 0.001585605969467, 'increment': 100, 
    'stepTime': 0.197896295023838, 'step': 1, 'jobName': '2dmodelrtj', 
    'severe': 0, 'iterations': 10, 'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['2dmodelrtj']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many increments needed to complete the step', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': '2dmodelrtj'})
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].deleteMesh(regions=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].faces.getSequenceFromMask((
    '[#c ]', ), ))
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].seedEdgeBySize(constraint=FINER
    , deviationFactor=0.005, edges=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].edges.getSequenceFromMask((
    '[#3fff0000 #6 ]', ), ), minSizeFactor=0.1, size=0.02)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].generateMesh()
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].seedEdgeBySize(constraint=FINER
    , deviationFactor=0.02, edges=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].edges.getSequenceFromMask((
    '[#3fff0000 #6 ]', ), ), minSizeFactor=0.02, size=0.02)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].seedEdgeBySize(constraint=FINER
    , deviationFactor=0.02, edges=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].edges.getSequenceFromMask((
    '[#3fff0000 #6 ]', ), ), minSizeFactor=0.02, size=0.05)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].generateMesh()
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].deleteMesh()
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].seedPart(deviationFactor=0.05, 
    minSizeFactor=0.1, size=4.0)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].generateMesh()
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].deleteMesh()
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].seedPart(deviationFactor=0.02, 
    minSizeFactor=0.1, size=4.0)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].generateMesh()
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.regenerate()
mdb.jobs['2dmodelrtj'].submit(consistencyChecking=OFF)
mdb.jobs['2dmodelrtj']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '12 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\2dmodelrtj.odb', 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 25624, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2dmodelrtj', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['2dmodelrtj']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': '2dmodelrtj', 'memory': 95.0})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 7995 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 2 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2dmodelrtj', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 223 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 68 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 3 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 388 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2dmodelrtj', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 4 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 221 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 6 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2dmodelrtj', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 122 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 356 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 67 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 6 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2dmodelrtj', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['2dmodelrtj']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 4 POINTS', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2dmodelrtj', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['2dmodelrtj']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': '2dmodelrtj'})
mdb.jobs['2dmodelrtj']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': '2dmodelrtj'})
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].deleteMesh(regions=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].faces.getSequenceFromMask((
    '[#d ]', ), ))
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].seedEdgeBySize(constraint=FINER
    , deviationFactor=AS_IS, edges=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].edges.getSequenceFromMask((
    '[#ffff0700 #7 ]', ), ), minSizeFactor=AS_IS, size=0.02)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].generateMesh()
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].seedEdgeBySize(constraint=FINER
    , deviationFactor=0.01, edges=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].edges.getSequenceFromMask((
    '[#700 ]', ), ), minSizeFactor=0.1, size=0.2)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].seedEdgeBySize(constraint=FINER
    , deviationFactor=0.02, edges=
    mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].edges.getSequenceFromMask((
    '[#200000 ]', ), ), minSizeFactor=0.02, size=0.2)
mdb.models['2D MODEL RTJ-Copy'].parts['Part-1'].generateMesh()
mdb.models['2D MODEL RTJ'].rootAssembly.Set(edges=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'].edges.getSequenceFromMask(
    ('[#1 ]', ), ), name='Set-20')
mdb.models['2D MODEL RTJ'].boundaryConditions['BC-1'].setValues(region=
    mdb.models['2D MODEL RTJ'].rootAssembly.sets['Set-20'])
mdb.models['2D MODEL RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2D MODEL RTJ'].parts['FLG'].features['Shell planar-1'].sketch)
mdb.models['2D MODEL RTJ'].parts['FLG'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2D MODEL RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2D MODEL RTJ'].parts['FLG'].features['Shell planar-1'])
mdb.models['2D MODEL RTJ'].sketches['__edit__'].Line(point1=(336.5, 
    -227.474285793304), point2=(190.5, -227.474285793304))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[79])
mdb.models['2D MODEL RTJ'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[21], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[79])
mdb.models['2D MODEL RTJ'].sketches['__edit__'].HorizontalDimension(textPoint=(
    316.518402099609, -262.05859375), value=146.0, vertex1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].vertices[72], vertex2=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].vertices[18])
mdb.models['2D MODEL RTJ'].sketches['__edit__'].offset(distance=100.0, 
    objectList=(mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[79], )
    , side=RIGHT)
mdb.models['2D MODEL RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[80], ))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].offset(distance=100.0, 
    objectList=(mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[79], )
    , side=LEFT)
mdb.models['2D MODEL RTJ'].sketches['__edit__'].Line(point1=(352.5, 
    -227.474285793304), point2=(352.5, -339.274285793304))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[82])
mdb.models['2D MODEL RTJ'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[22], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[82])
mdb.models['2D MODEL RTJ'].sketches['__edit__'].Line(point1=(336.5, 
    -327.474285793304), point2=(380.5, -327.474285793305))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[83])
mdb.models['2D MODEL RTJ'].sketches['__edit__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[81], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[83])
mdb.models['2D MODEL RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[82], point1=(
    352.163818359375, -335.299255371094))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].Line(point1=(190.5, 
    -227.474285793304), point2=(190.5, -327.474285793304))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[85])
mdb.models['2D MODEL RTJ'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[79], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[85])
mdb.models['2D MODEL RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[81], 
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[83]))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].Line(point1=(352.5, 
    -327.474285793305), point2=(190.5, -327.474285793304))
mdb.models['2D MODEL RTJ'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[86])
mdb.models['2D MODEL RTJ'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[84], entity2=
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[86])
mdb.models['2D MODEL RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['2D MODEL RTJ'].sketches['__edit__'].geometry[22], ))
mdb.models['2D MODEL RTJ'].parts['FLG'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2D MODEL RTJ'].sketches['__edit__'])
del mdb.models['2D MODEL RTJ'].sketches['__edit__']
mdb.models['2D MODEL RTJ'].parts['FLG'].regenerate()
mdb.models['2D MODEL RTJ'].rootAssembly.regenerate()
mdb.models['2D MODEL RTJ'].rootAssembly.Set(edges=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].edges.getSequenceFromMask(
    ('[#1000 ]', ), ), name='Set-21')
mdb.models['2D MODEL RTJ'].YsymmBC(createStepName='BOLT LOAD', localCsys=None, 
    name='BC-2', region=mdb.models['2D MODEL RTJ'].rootAssembly.sets['Set-21'])
mdb.models['2D MODEL RTJ'].loads['Load-1'].suppress()
mdb.models['2D MODEL RTJ'].rootAssembly.Surface(name='Surf-8', side1Edges=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['BOLTS-1'].edges.getSequenceFromMask(
    ('[#200 ]', ), ))
mdb.models['2D MODEL RTJ'].Pressure(amplitude=UNSET, createStepName='BOLT LOAD'
    , distributionType=UNIFORM, field='', magnitude=-310.0, name='Load-2', 
    region=mdb.models['2D MODEL RTJ'].rootAssembly.surfaces['Surf-8'])
mdb.models['2D MODEL RTJ'].parts['FLG'].generateMesh()
mdb.models['2D MODEL RTJ'].rootAssembly.regenerate()
mdb.models['2D MODEL RTJ'].rootAssembly.regenerate()
mdb.models['2D MODEL RTJ'].rootAssembly.regenerate()
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 36368, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 700.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 13157 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 13158 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 1169 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 12144 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 11797 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 3483 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_3.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_3.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_3.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_3.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_3.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_3.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_3.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 12384 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_3.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_3.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_3.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 10877 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 1459 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_4.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_4.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_4.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1805 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2188 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 5253 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 86 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 172 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 215 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 774 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2963 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.regenerate()
mdb.models['2D MODEL RTJ-Copy'].boundaryConditions['BC-2'].suppress()
mdb.models['2D MODEL RTJ-Copy'].rootAssembly.Set(edges=
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#0 #8000 ]', ), ), name='Set-22')
mdb.models['2D MODEL RTJ-Copy'].DisplacementBC(amplitude=UNSET, createStepName=
    'Step-1', distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None
    , name='BC-3', region=
    mdb.models['2D MODEL RTJ-Copy'].rootAssembly.sets['Set-22'], u1=0.0, u2=
    UNSET, ur3=UNSET)
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 36064, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 700.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 13157 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_1.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 13158 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 1169 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 12144 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_2.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 11797 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 3483 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 6 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_6_1_1_1_3.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_3.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_3.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_3.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_3.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_3.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_3.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 12384 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 3 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_3.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_3.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_3.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 10877 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 1459 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 5 at one or more of the internal nodes of 2 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_5_1_1_1_4.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 4 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_4_1_1_1_4.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 3 at one or more of the internal nodes of 1 elements. The elements have been identified in element set WarnElemSolvProbZeroPiv_3_1_1_1_4.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1805 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2188 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 5253 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 86 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 172 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 215 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 774 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2963 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
del mdb.models['2D MODEL RTJ'].parts['FLG'].sets['Attachment Points-1-Set-1']
mdb.models['2D MODEL RTJ'].rootAssembly.regenerate()
mdb.models['2D MODEL RTJ-Copy'].boundaryConditions['BC-2'].resume()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='2D MODEL RTJ', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-4', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Job-4'].submit(consistencyChecking=OFF)
mdb.jobs['Job-4']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-4.odb', 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 29240, 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-4', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 3 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-4', 'memory': 25.0})
mdb.jobs['Job-4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 6 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-4', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 8 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-4', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 8 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-4', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 8 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-4', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 8 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-4', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-4']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-4'})
mdb.models['2D MODEL RTJ'].rootAssembly.Surface(name='m_Surf-9', side1Edges=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].edges.getSequenceFromMask(
    ('[#10000 ]', ), ))
mdb.models['2D MODEL RTJ'].rootAssembly.Surface(name='s_Surf-9', side1Edges=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['BOLTS-1'].edges.getSequenceFromMask(
    ('[#44 ]', ), ))
mdb.models['2D MODEL RTJ'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    clearanceRegion=None, createStepName='Initial', datumAxis=None, 
    initialClearance=OMIT, interactionProperty='IntProp-1', master=
    mdb.models['2D MODEL RTJ'].rootAssembly.surfaces['m_Surf-9'], name='Int-1', 
    slave=mdb.models['2D MODEL RTJ'].rootAssembly.surfaces['s_Surf-9'], 
    sliding=SMALL, thickness=ON)
mdb.models['2D MODEL RTJ'].rootAssembly.Surface(name='m_Surf-11', side1Edges=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['FLG-1'].edges.getSequenceFromMask(
    ('[#1f0 ]', ), ))
mdb.models['2D MODEL RTJ'].rootAssembly.Surface(name='s_Surf-11', side1Edges=
    mdb.models['2D MODEL RTJ'].rootAssembly.instances['RTJ-1'].edges.getSequenceFromMask(
    ('[#e ]', ), ))
mdb.models['2D MODEL RTJ'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    clearanceRegion=None, createStepName='Initial', datumAxis=None, 
    initialClearance=OMIT, interactionProperty='IntProp-1', master=
    mdb.models['2D MODEL RTJ'].rootAssembly.surfaces['m_Surf-11'], name='Int-2'
    , slave=mdb.models['2D MODEL RTJ'].rootAssembly.surfaces['s_Surf-11'], 
    sliding=SMALL, thickness=ON)
mdb.jobs['Job-4'].submit(consistencyChecking=OFF)
mdb.jobs['Job-4']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '*FRICTION,LAGRANGE OR *FRICTION,ROUGH MAY CAUSE CONVERGENCE DIFFICULTY WHEN USED IN CONJUNCTION WITH THE *SURFACE BEHAVIOR, AUGMENTED LAGRANGE OR PENALTY OPTION. USE PENALTY FRICTION INSTEAD.', 
    'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-4.odb', 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 4952, 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-4', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-4', 'memory': 25.0})
mdb.jobs['Job-4']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-4', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-4']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-4', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-4']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-4', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-4']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-4', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-4']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-4', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-4']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-4'})
mdb.models['2D MODEL RTJ'].boundaryConditions['BC-1'].setValues(ur3=UNSET)
mdb.models['2D MODEL RTJ'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.3, ), ), temperatureDependency=OFF)
mdb.models['2D MODEL RTJ'].interactionProperties['IntProp-1'].normalBehavior.setValues(
    allowSeparation=ON, clearanceAtZeroContactPressure=0.0, 
    constraintEnforcementMethod=PENALTY, contactStiffness=DEFAULT, 
    contactStiffnessScaleFactor=1.0, pressureOverclosure=HARD, 
    stiffnessBehavior=LINEAR)
mdb.jobs['Job-4'].submit(consistencyChecking=OFF)
mdb.jobs['Job-4']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-4.odb', 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 7368, 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-4', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-4', 'memory': 25.0})
mdb.jobs['Job-4']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-4', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-4']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-4', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-4']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-4', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-4']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-4', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-4']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-4', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-4']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-4'})
mdb.models['2D MODEL RTJ'].boundaryConditions['BC-2'].setValues(typeName=XSYMM)
mdb.jobs['Job-4'].submit(consistencyChecking=OFF)
mdb.jobs['Job-4']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-4.odb', 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 7036, 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-4', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-4', 'memory': 25.0})
mdb.jobs['Job-4']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-4', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-4']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-4', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-4']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-4', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-4']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-4', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-4']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-4', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-4']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-4'})
mdb.jobs['Job-4']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-4'})
mdb.models['Model-RF'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RF'].parts['BOLT'].features['Solid revolve-1'].sketch)
mdb.models['Model-RF'].parts['BOLT'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RF'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RF'].parts['BOLT'].features['Solid revolve-1'])
mdb.models['Model-RF'].ConstrainedSketch(name='BOLTRF-5', objectToCopy=
    mdb.models['Model-RF'].sketches['__edit__'])
del mdb.models['Model-RF'].sketches['__edit__']
mdb.models['Model-RF'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RF'].parts['FLANGE'].features['Solid revolve-1'].sketch)
mdb.models['Model-RF'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RF'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RF'].parts['FLANGE'].features['Solid revolve-1'])
mdb.models['Model-RF'].ConstrainedSketch(name='FLANGERF-5', objectToCopy=
    mdb.models['Model-RF'].sketches['__edit__'])
del mdb.models['Model-RF'].sketches['__edit__']
mdb.models['Model-RF'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].features['Solid revolve-1'].sketch)
mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-RF'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].features['Solid revolve-1'])
mdb.models['Model-RF'].ConstrainedSketch(name='SPIRAL-5', objectToCopy=
    mdb.models['Model-RF'].sketches['__edit__'])
del mdb.models['Model-RF'].sketches['__edit__']
mdb.models['Model-RF'].sketches['SPIRAL-5'].writeAcisFile(fileName=
    'C:/Temp/SPIRAL-5.sat', version=20)
mdb.models['Model-RF'].sketches['BOLTRF-5'].writeAcisFile(fileName=
    'C:/Temp/BOLT-5.sat', version=20)
mdb.models['Model-RF'].sketches['FLANGERF-5'].writeAcisFile(fileName=
    'C:/Temp/FLANGE-5.sat', version=20)
mdb.Model(modelType=STANDARD_EXPLICIT, name='2DSPIRAL')
mdb.openAcis('C:/Temp/BOLT-5.sat', scaleFromFile=OFF)
mdb.models['2DSPIRAL'].ConstrainedSketchFromGeometryFile(geometryFile=mdb.acis, 
    name='BOLT-5')
mdb.openAcis('C:/Temp/FLANGE-5.sat', scaleFromFile=OFF)
mdb.models['2DSPIRAL'].ConstrainedSketchFromGeometryFile(geometryFile=mdb.acis, 
    name='FLANGE-5')
mdb.openAcis('C:/Temp/SPIRAL-5.sat', scaleFromFile=OFF)
mdb.models['2DSPIRAL'].ConstrainedSketchFromGeometryFile(geometryFile=mdb.acis, 
    name='SPIRAL-5')
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['2DSPIRAL'].sketches['__profile__'].sketchOptions.setValues(
    gridOrigin=(13.5, 60.158334095031))
mdb.models['2DSPIRAL'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['2DSPIRAL'].sketches['BOLT-5'])
mdb.models['2DSPIRAL'].sketches['__profile__'].move(objectList=(
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[4], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[5], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[6], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[7], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[8], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[9]), vector=(13.5, 
    0.0))
mdb.models['2DSPIRAL'].sketches['__profile__'].mirror(mirrorLine=
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[9], objectList=(
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[4], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[5], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[6], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[7], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[8], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[9]))
mdb.models['2DSPIRAL'].sketches['__profile__'].copyMirror(mirrorLine=
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[9], objectList=(
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[4], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[5], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[6], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[7], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[8], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[9]))
mdb.models['2DSPIRAL'].sketches['__profile__'].delete(objectList=(
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[4], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[9], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[10], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[15]))
mdb.models['2DSPIRAL'].sketches['__profile__'].delete(objectList=(
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[8], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[14]))
mdb.models['2DSPIRAL'].sketches['__profile__'].Line(point1=(-13.5, 120.4), 
    point2=(40.5, 120.4))
mdb.models['2DSPIRAL'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[16])
mdb.models['2DSPIRAL'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[5], entity2=
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[16])
mdb.models['2DSPIRAL'].sketches['__profile__'].Line(point1=(-4.5, 0.0), point2=
    (31.5, 0.0))
mdb.models['2DSPIRAL'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[17])
mdb.models['2DSPIRAL'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[7], entity2=
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[17])
mdb.models['2DSPIRAL'].Part(dimensionality=TWO_D_PLANAR, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['2DSPIRAL'].parts['Part-1'].BaseShell(sketch=
    mdb.models['2DSPIRAL'].sketches['__profile__'])
del mdb.models['2DSPIRAL'].sketches['__profile__']
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['2DSPIRAL'].sketches['__profile__'].sketchOptions.setValues(
    gridOrigin=(225.5, -112.25))
mdb.models['2DSPIRAL'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['2DSPIRAL'].sketches['FLANGE-5'])
mdb.models['2DSPIRAL'].sketches['__profile__'].move(objectList=(
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[4], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[5], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[6], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[7], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[8], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[9], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[10], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[11]), vector=(79.5, 
    -110.0))
mdb.models['2DSPIRAL'].Part(dimensionality=TWO_D_PLANAR, name='Part-2', type=
    DEFORMABLE_BODY)
mdb.models['2DSPIRAL'].parts['Part-2'].BaseShell(sketch=
    mdb.models['2DSPIRAL'].sketches['__profile__'])
del mdb.models['2DSPIRAL'].sketches['__profile__']
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['2DSPIRAL'].sketches['__profile__'].sketchOptions.setValues(
    gridOrigin=(173.0, -1.125))
mdb.models['2DSPIRAL'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['2DSPIRAL'].sketches['SPIRAL-5'])
mdb.models['2DSPIRAL'].sketches['__profile__'].move(objectList=(
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[4], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[5], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[6], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[7]), vector=(11.0, 
    -1.125))
mdb.models['2DSPIRAL'].Part(dimensionality=TWO_D_PLANAR, name='Part-3', type=
    DEFORMABLE_BODY)
mdb.models['2DSPIRAL'].parts['Part-3'].BaseShell(sketch=
    mdb.models['2DSPIRAL'].sketches['__profile__'])
del mdb.models['2DSPIRAL'].sketches['__profile__']
mdb.models['2DSPIRAL'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['2DSPIRAL'].rootAssembly.Instance(dependent=OFF, name='Part-1-1', 
    part=mdb.models['2DSPIRAL'].parts['Part-1'])
mdb.models['2DSPIRAL'].rootAssembly.Instance(dependent=OFF, name='Part-2-1', 
    part=mdb.models['2DSPIRAL'].parts['Part-2'])
mdb.models['2DSPIRAL'].rootAssembly.Instance(dependent=OFF, name='Part-3-1', 
    part=mdb.models['2DSPIRAL'].parts['Part-3'])
mdb.models['2DSPIRAL'].rootAssembly.translate(instanceList=('Part-3-1', ), 
    vector=(63.75, -108.875, 0.0))
mdb.models['2DSPIRAL'].rootAssembly.features['Part-1-1'].suppress()
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['Part-2'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['Part-2'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['Part-2'].features['Shell planar-1'])
mdb.models['2DSPIRAL'].sketches['__edit__'].Line(point1=(225.5, -112.25), 
    point2=(371.5, -112.25))
mdb.models['2DSPIRAL'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[12])
mdb.models['2DSPIRAL'].sketches['__edit__'].move(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[12], ), vector=(
    -146.0, -220.0))
mdb.models['2DSPIRAL'].sketches['__edit__'].undo()
mdb.models['2DSPIRAL'].sketches['__edit__'].move(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[12], ), vector=(
    -146.0, -220.0))
mdb.models['2DSPIRAL'].sketches['__edit__'].undo()
mdb.models['2DSPIRAL'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[12], ))
mdb.models['2DSPIRAL'].sketches['__edit__'].Line(point1=(225.5, -112.25), 
    point2=(79.5, -112.25))
mdb.models['2DSPIRAL'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[13])
mdb.models['2DSPIRAL'].sketches['__edit__'].move(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[13], ), vector=(0.0, 
    -220.0))
mdb.models['2DSPIRAL'].sketches['__edit__'].undo()
mdb.models['2DSPIRAL'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[13], ))
mdb.models['2DSPIRAL'].sketches['__edit__'].Line(point1=(224.5, -112.25), 
    point2=(78.5, -112.25))
mdb.models['2DSPIRAL'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[14])
mdb.models['2DSPIRAL'].sketches['__edit__'].move(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[14], ), vector=(1.0, 
    -220.0))
mdb.models['2DSPIRAL'].sketches['__edit__'].offset(distance=100.0, objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[14], ), side=LEFT)
mdb.models['2DSPIRAL'].sketches['__edit__'].Line(point1=(79.5, -332.25), 
    point2=(79.5, -432.25))
mdb.models['2DSPIRAL'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[16])
mdb.models['2DSPIRAL'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[14], entity2=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[16])
mdb.models['2DSPIRAL'].sketches['__edit__'].copyMove(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[16], ), vector=(162.0, 
    0.0))
mdb.models['2DSPIRAL'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[10], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[15]))
mdb.models['2DSPIRAL'].sketches['__edit__'].Line(point1=(241.5, -432.25), 
    point2=(79.5, -432.25))
mdb.models['2DSPIRAL'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[18])
mdb.models['2DSPIRAL'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[17], entity2=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[18])
mdb.models['2DSPIRAL'].parts['Part-2'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2DSPIRAL'].sketches['__edit__'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].parts['Part-2'].regenerate()
mdb.models['2DSPIRAL'].rootAssembly.regenerate()
mdb.models['2DSPIRAL'].Material(name='FLANGE')
mdb.models['2DSPIRAL'].materials['FLANGE'].Elastic(table=((204000.0, 0.3), ))
mdb.models['2DSPIRAL'].Material(name='GASKET')
mdb.models['2DSPIRAL'].materials['GASKET'].Elastic(table=((18000.0, 0.28), ))
mdb.models['2DSPIRAL'].materials['GASKET'].GasketThicknessBehavior(table=((0.0, 
    0.0), (3.703703704, 0.075675676), (8.888888889, 0.135135135), (13.33333333, 
    0.183783784), (17.77777778, 0.286486486), (22.22222222, 0.335135135), (
    28.14814815, 0.389189189), (31.85185185, 0.443243243), (36.2962963, 
    0.497297297), (40.74074074, 0.551351351), (45.18518519, 0.610810811), (
    49.62962963, 0.648648649), (55.55555556, 0.681081081), (59.25925926, 
    0.735135135), (65.18518519, 0.767567568), (68.14814815, 0.810810811), (
    72.59259259, 0.848648649), (77.03703704, 0.875675676), (80.0, 0.908108108), 
    (85.92592593, 0.92972973), (88.88888889, 0.967567568)))
mdb.models['2DSPIRAL'].materials['GASKET'].Expansion(table=((1.8e-05, ), ))
mdb.models['2DSPIRAL'].materials['GASKET'].gasketThicknessBehavior.setValues(
    unloadingTable=((0.0, 0.378378378, 0.643243243), (3.703703704, 0.481081081, 
    0.745945946), (8.888888889, 0.52972973, 0.794594595), (13.33333333, 
    0.551351351, 0.810810811), (17.77777778, 0.567567568, 0.827027027), (
    22.22222222, 0.578378378, 0.843243243), (28.14814815, 0.586486486, 
    0.854054054), (31.85185185, 0.594594595, 0.864864865), (36.2962963, 0.6, 
    0.875675676), (40.74074074, 0.605405405, 0.883783784), (45.18518519, 
    0.610810811, 0.891891892), (49.62962963, 0.0, 0.897297297), (55.55555556, 
    0.0, 0.902702703), (59.25925926, 0.0, 0.913513514), (65.18518519, 0.0, 
    0.927027027), (68.14814815, 0.0, 0.935135135), (72.59259259, 0.0, 
    0.940540541), (77.03703704, 0.0, 0.945945946), (80.0, 0.0, 0.956756757), (
    85.92592593, 0.0, 0.962162162), (88.88888889, 0.0, 0.967567568)))
mdb.models['2DSPIRAL'].materials['GASKET'].GasketTransverseShearElastic(table=(
    (68.966, ), ))
mdb.models['2DSPIRAL'].materials['GASKET'].GasketMembraneElastic(table=((
    18000.0, 0.3), ))
mdb.models['2DSPIRAL'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['2DSPIRAL'].rootAssembly.instances['Part-2-1'], ), size=11.0)
mdb.models['2DSPIRAL'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=CPS4, elemLibrary=STANDARD), ElemType(elemCode=CPS3, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['2DSPIRAL'].rootAssembly.instances['Part-2-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['2DSPIRAL'].rootAssembly.generateMesh(regions=(
    mdb.models['2DSPIRAL'].rootAssembly.instances['Part-2-1'], ))
mdb.models['2DSPIRAL'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['2DSPIRAL'].rootAssembly.instances['Part-3-1'], ), size=0.2)
mdb.models['2DSPIRAL'].rootAssembly.generateMesh(regions=(
    mdb.models['2DSPIRAL'].rootAssembly.instances['Part-3-1'], ))
mdb.models['2DSPIRAL'].rootAssembly.deleteMesh(regions=(
    mdb.models['2DSPIRAL'].rootAssembly.instances['Part-3-1'], ))
mdb.models['2DSPIRAL'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['2DSPIRAL'].rootAssembly.instances['Part-3-1'], ), size=0.5)
mdb.models['2DSPIRAL'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeValue=0.02, regions=(
    mdb.models['2DSPIRAL'].rootAssembly.instances['Part-3-1'], ), size=0.5)
mdb.models['2DSPIRAL'].rootAssembly.generateMesh(regions=(
    mdb.models['2DSPIRAL'].rootAssembly.instances['Part-3-1'], ))
mdb.models['2DSPIRAL'].StaticStep(name='Step-1', nlgeom=ON, previous='Initial')
mdb.models['2DSPIRAL'].ContactProperty('IntProp-1')
mdb.models['2DSPIRAL'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.3, ), ), temperatureDependency=OFF)
mdb.models['2DSPIRAL'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, clearanceAtZeroContactPressure=0.0, 
    constraintEnforcementMethod=PENALTY, contactStiffness=DEFAULT, 
    contactStiffnessScaleFactor=1.0, pressureOverclosure=HARD, 
    stiffnessBehavior=LINEAR)
mdb.models['2DSPIRAL'].rootAssembly.Surface(name='m_Surf-1', side1Edges=
    mdb.models['2DSPIRAL'].rootAssembly.instances['Part-2-1'].edges.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['2DSPIRAL'].rootAssembly.Surface(name='s_Surf-1', side1Edges=
    mdb.models['2DSPIRAL'].rootAssembly.instances['Part-3-1'].edges.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['2DSPIRAL'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    clearanceRegion=None, createStepName='Step-1', datumAxis=None, 
    initialClearance=OMIT, interactionProperty='IntProp-1', master=
    mdb.models['2DSPIRAL'].rootAssembly.surfaces['m_Surf-1'], name='Int-1', 
    slave=mdb.models['2DSPIRAL'].rootAssembly.surfaces['s_Surf-1'], sliding=
    SMALL, thickness=ON)
mdb.models['2DSPIRAL'].rootAssembly.Set(edges=
    mdb.models['2DSPIRAL'].rootAssembly.instances['Part-3-1'].edges.getSequenceFromMask(
    ('[#1 ]', ), ), name='Set-2')
mdb.models['2DSPIRAL'].YsymmBC(createStepName='Step-1', localCsys=None, name=
    'BC-1', region=mdb.models['2DSPIRAL'].rootAssembly.sets['Set-2'])
mdb.models['2DSPIRAL'].rootAssembly.Set(edges=
    mdb.models['2DSPIRAL'].rootAssembly.instances['Part-2-1'].edges.getSequenceFromMask(
    ('[#100 ]', ), ), name='Set-3')
mdb.models['2DSPIRAL'].XsymmBC(createStepName='Step-1', localCsys=None, name=
    'BC-2', region=mdb.models['2DSPIRAL'].rootAssembly.sets['Set-3'])
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='2DSPIRAL', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-5', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Job-5'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '542 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-5.odb', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-5'})
mdb.models['2DSPIRAL'].HomogeneousSolidSection(material='FLANGE', name=
    'Section-1', thickness=1.0)
mdb.models['2DSPIRAL'].parts['Part-2'].Set(faces=
    mdb.models['2DSPIRAL'].parts['Part-2'].faces.getSequenceFromMask(('[#1 ]', 
    ), ), name='Set-1')
mdb.models['2DSPIRAL'].parts['Part-2'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['2DSPIRAL'].parts['Part-2'].sets['Set-1'], sectionName=
    'Section-1', thicknessAssignment=FROM_SECTION)
mdb.models['2DSPIRAL'].HomogeneousSolidSection(material='GASKET', name=
    'Section-2', thickness=1.0)
mdb.models['2DSPIRAL'].parts['Part-3'].Set(faces=
    mdb.models['2DSPIRAL'].parts['Part-3'].faces.getSequenceFromMask(('[#1 ]', 
    ), ), name='Set-1')
mdb.models['2DSPIRAL'].parts['Part-3'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['2DSPIRAL'].parts['Part-3'].sets['Set-1'], sectionName=
    'Section-1', thicknessAssignment=FROM_SECTION)
mdb.models['2DSPIRAL'].rootAssembly.regenerate()
mdb.jobs['Job-5'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-5.odb', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 4164, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-5', 'memory': 9.0})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(JOB_COMPLETED, {'time': 'Sat Dec 01 11:07:28 2018', 
    'jobName': 'Job-5'})
mdb.models['2DSPIRAL'].rootAssembly.Surface(name='Surf-3', side1Edges=
    mdb.models['2DSPIRAL'].rootAssembly.instances['Part-2-1'].edges.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['2DSPIRAL'].Pressure(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, field='', magnitude=-310.0, name='Load-1', 
    region=mdb.models['2DSPIRAL'].rootAssembly.surfaces['Surf-3'])
mdb.models['2DSPIRAL'].loads['Load-1'].setValues(magnitude=310.0)
mdb.jobs['Job-5'].submit(consistencyChecking=OFF)
mdb.jobs['Job-5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-5.odb', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 30276, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-5', 'memory': 25.0})
mdb.jobs['Job-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 19 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 7, 'iterations': 8, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0625, 'attempts': 3, 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0625, 'step': 1, 
    'jobName': 'Job-5', 'severe': 7, 'iterations': 9, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.125, 'attempts': 1, 
    'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.125, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 15 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.125, 'attempts': ' 1U', 
    'timeIncrement': 0.09375, 'increment': 3, 'stepTime': 0.125, 'step': 1, 
    'jobName': 'Job-5', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.1484375, 'attempts': 2, 
    'timeIncrement': 0.0234375, 'increment': 3, 'stepTime': 0.1484375, 
    'step': 1, 'jobName': 'Job-5', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.18359375, 'attempts': 1, 
    'timeIncrement': 0.03515625, 'increment': 4, 'stepTime': 0.18359375, 
    'step': 1, 'jobName': 'Job-5', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 265 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.18359375, 'attempts': ' 1U', 
    'timeIncrement': 0.052734375, 'increment': 5, 'stepTime': 0.18359375, 
    'step': 1, 'jobName': 'Job-5', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.18359375, 'attempts': ' 2U', 
    'timeIncrement': 0.01318359375, 'increment': 5, 'stepTime': 0.18359375, 
    'step': 1, 'jobName': 'Job-5', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.1868896484375, 
    'attempts': 3, 'timeIncrement': 0.0032958984375, 'increment': 5, 
    'stepTime': 0.1868896484375, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.1868896484375, 
    'attempts': ' 1U', 'timeIncrement': 0.00494384765625, 'increment': 6, 
    'stepTime': 0.1868896484375, 'step': 1, 'jobName': 'Job-5', 'severe': 5, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.188125610351563, 
    'attempts': 2, 'timeIncrement': 0.0012359619140625, 'increment': 6, 
    'stepTime': 0.188125610351563, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.189979553222656, 
    'attempts': 1, 'timeIncrement': 0.00185394287109375, 'increment': 7, 
    'stepTime': 0.189979553222656, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 6 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.189979553222656, 
    'attempts': ' 1U', 'timeIncrement': 0.00278091430664063, 'increment': 8, 
    'stepTime': 0.189979553222656, 'step': 1, 'jobName': 'Job-5', 'severe': 1, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.190674781799316, 
    'attempts': 2, 'timeIncrement': 0.000695228576660156, 'increment': 8, 
    'stepTime': 0.190674781799316, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.190674781799316, 
    'attempts': ' 1U', 'timeIncrement': 0.00104284286499023, 'increment': 9, 
    'stepTime': 0.190674781799316, 'step': 1, 'jobName': 'Job-5', 'severe': 5, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.190935492515564, 
    'attempts': 2, 'timeIncrement': 0.000260710716247559, 'increment': 9, 
    'stepTime': 0.190935492515564, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.191326558589935, 
    'attempts': 1, 'timeIncrement': 0.000391066074371338, 'increment': 10, 
    'stepTime': 0.191326558589935, 'step': 1, 'jobName': 'Job-5', 'severe': 4, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.191326558589935, 
    'attempts': ' 1U', 'timeIncrement': 0.000586599111557007, 'increment': 11, 
    'stepTime': 0.191326558589935, 'step': 1, 'jobName': 'Job-5', 'severe': 5, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.191326558589935, 
    'attempts': ' 2U', 'timeIncrement': 0.000146649777889252, 'increment': 11, 
    'stepTime': 0.191326558589935, 'step': 1, 'jobName': 'Job-5', 'severe': 5, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 284 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.191326558589935, 
    'attempts': ' 3U', 'timeIncrement': 3.66624444723129e-05, 'increment': 11, 
    'stepTime': 0.191326558589935, 'step': 1, 'jobName': 'Job-5', 'severe': 5, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Time increment required is less than the minimum specified', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.191326558589935, 
    'attempts': ' 4U', 'timeIncrement': 1e-05, 'increment': 11, 
    'stepTime': 0.191326558589935, 'step': 1, 'jobName': 'Job-5', 'severe': 4, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.191326558589935, 
    'attempts': 5, 'timeIncrement': 1e-35, 'increment': 11, 
    'stepTime': 0.191326558589935, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-5'})
mdb.models['2DSPIRAL'].interactions['Int-1'].setValues(adjustMethod=NONE, 
    bondingSet=None, enforcement=SURFACE_TO_SURFACE, initialClearance=OMIT, 
    interferenceType=SHRINK_FIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    thickness=ON)
mdb.jobs['Job-5'].submit(consistencyChecking=OFF)
mdb.jobs['Job-5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-5.odb', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 5168, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-5', 'memory': 25.0})
mdb.jobs['Job-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 19 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 7, 'iterations': 8, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0625, 'attempts': 3, 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0625, 'step': 1, 
    'jobName': 'Job-5', 'severe': 7, 'iterations': 9, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.125, 'attempts': 1, 
    'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.125, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 15 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.125, 'attempts': ' 1U', 
    'timeIncrement': 0.09375, 'increment': 3, 'stepTime': 0.125, 'step': 1, 
    'jobName': 'Job-5', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.1484375, 'attempts': 2, 
    'timeIncrement': 0.0234375, 'increment': 3, 'stepTime': 0.1484375, 
    'step': 1, 'jobName': 'Job-5', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.18359375, 'attempts': 1, 
    'timeIncrement': 0.03515625, 'increment': 4, 'stepTime': 0.18359375, 
    'step': 1, 'jobName': 'Job-5', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 265 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.18359375, 'attempts': ' 1U', 
    'timeIncrement': 0.052734375, 'increment': 5, 'stepTime': 0.18359375, 
    'step': 1, 'jobName': 'Job-5', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.18359375, 'attempts': ' 2U', 
    'timeIncrement': 0.01318359375, 'increment': 5, 'stepTime': 0.18359375, 
    'step': 1, 'jobName': 'Job-5', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.1868896484375, 
    'attempts': 3, 'timeIncrement': 0.0032958984375, 'increment': 5, 
    'stepTime': 0.1868896484375, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.1868896484375, 
    'attempts': ' 1U', 'timeIncrement': 0.00494384765625, 'increment': 6, 
    'stepTime': 0.1868896484375, 'step': 1, 'jobName': 'Job-5', 'severe': 5, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.188125610351563, 
    'attempts': 2, 'timeIncrement': 0.0012359619140625, 'increment': 6, 
    'stepTime': 0.188125610351563, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.189979553222656, 
    'attempts': 1, 'timeIncrement': 0.00185394287109375, 'increment': 7, 
    'stepTime': 0.189979553222656, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 6 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.189979553222656, 
    'attempts': ' 1U', 'timeIncrement': 0.00278091430664063, 'increment': 8, 
    'stepTime': 0.189979553222656, 'step': 1, 'jobName': 'Job-5', 'severe': 1, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.190674781799316, 
    'attempts': 2, 'timeIncrement': 0.000695228576660156, 'increment': 8, 
    'stepTime': 0.190674781799316, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.190674781799316, 
    'attempts': ' 1U', 'timeIncrement': 0.00104284286499023, 'increment': 9, 
    'stepTime': 0.190674781799316, 'step': 1, 'jobName': 'Job-5', 'severe': 5, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.190935492515564, 
    'attempts': 2, 'timeIncrement': 0.000260710716247559, 'increment': 9, 
    'stepTime': 0.190935492515564, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.191326558589935, 
    'attempts': 1, 'timeIncrement': 0.000391066074371338, 'increment': 10, 
    'stepTime': 0.191326558589935, 'step': 1, 'jobName': 'Job-5', 'severe': 4, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.191326558589935, 
    'attempts': ' 1U', 'timeIncrement': 0.000586599111557007, 'increment': 11, 
    'stepTime': 0.191326558589935, 'step': 1, 'jobName': 'Job-5', 'severe': 5, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.191326558589935, 
    'attempts': ' 2U', 'timeIncrement': 0.000146649777889252, 'increment': 11, 
    'stepTime': 0.191326558589935, 'step': 1, 'jobName': 'Job-5', 'severe': 5, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 284 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.191326558589935, 
    'attempts': ' 3U', 'timeIncrement': 3.66624444723129e-05, 'increment': 11, 
    'stepTime': 0.191326558589935, 'step': 1, 'jobName': 'Job-5', 'severe': 5, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Time increment required is less than the minimum specified', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.191326558589935, 
    'attempts': ' 4U', 'timeIncrement': 1e-05, 'increment': 11, 
    'stepTime': 0.191326558589935, 'step': 1, 'jobName': 'Job-5', 'severe': 4, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.191326558589935, 
    'attempts': 5, 'timeIncrement': 1e-35, 'increment': 11, 
    'stepTime': 0.191326558589935, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-5'})
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['Part-1'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['Part-1'].features['Shell planar-1'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['Part-2'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['Part-2'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['Part-2'].features['Shell planar-1'])
mdb.models['2DSPIRAL'].sketches['__edit__'].FilletByRadius(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[14], curve2=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[9], nearPoint1=(
    191.059661865234, -334.525146484375), nearPoint2=(221.933471679688, 
    -294.285461425781), radius=25.0)
mdb.models['2DSPIRAL'].sketches['__edit__'].undo()
mdb.models['2DSPIRAL'].sketches['__edit__'].FilletByRadius(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[14], curve2=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[9], nearPoint1=(
    186.428619384766, -334.525146484375), nearPoint2=(224.2490234375, 
    -295.059326171875), radius=100.0)
mdb.models['2DSPIRAL'].parts['Part-2'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2DSPIRAL'].sketches['__edit__'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].parts['Part-2'].regenerate()
mdb.models['2DSPIRAL'].rootAssembly.regenerate()
mdb.models['2DSPIRAL'].rootAssembly.generateMesh(regions=(
    mdb.models['2DSPIRAL'].rootAssembly.instances['Part-2-1'], ))
mdb.jobs['Job-5'].submit(consistencyChecking=OFF)
mdb.jobs['Job-5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-5.odb', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 3804, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-5', 'memory': 25.0})
mdb.jobs['Job-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 1 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Job-5', 'severe': 5, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'Job-5', 'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.875, 'attempts': 1, 
    'timeIncrement': 0.375, 'increment': 3, 'stepTime': 0.875, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 73 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.875, 'attempts': ' 1U', 
    'timeIncrement': 0.125, 'increment': 4, 'stepTime': 0.875, 'step': 1, 
    'jobName': 'Job-5', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.875, 'attempts': ' 2U', 
    'timeIncrement': 0.03125, 'increment': 4, 'stepTime': 0.875, 'step': 1, 
    'jobName': 'Job-5', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.875, 'attempts': ' 3U', 
    'timeIncrement': 0.0078125, 'increment': 4, 'stepTime': 0.875, 'step': 1, 
    'jobName': 'Job-5', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 4 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.875, 'attempts': ' 4U', 
    'timeIncrement': 0.001953125, 'increment': 4, 'stepTime': 0.875, 'step': 1, 
    'jobName': 'Job-5', 'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.87548828125, 'attempts': 5, 
    'timeIncrement': 0.00048828125, 'increment': 4, 'stepTime': 0.87548828125, 
    'step': 1, 'jobName': 'Job-5', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.87548828125, 
    'attempts': ' 1U', 'timeIncrement': 0.000732421875, 'increment': 5, 
    'stepTime': 0.87548828125, 'step': 1, 'jobName': 'Job-5', 'severe': 4, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.87548828125, 
    'attempts': ' 2U', 'timeIncrement': 0.00018310546875, 'increment': 5, 
    'stepTime': 0.87548828125, 'step': 1, 'jobName': 'Job-5', 'severe': 4, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.87548828125, 
    'attempts': ' 3U', 'timeIncrement': 4.57763671875e-05, 'increment': 5, 
    'stepTime': 0.87548828125, 'step': 1, 'jobName': 'Job-5', 'severe': 4, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.87548828125, 
    'attempts': ' 4U', 'timeIncrement': 1.1444091796875e-05, 'increment': 5, 
    'stepTime': 0.87548828125, 'step': 1, 'jobName': 'Job-5', 'severe': 4, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Time increment required is less than the minimum specified', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.87548828125, 
    'attempts': ' 5U', 'timeIncrement': 1e-05, 'increment': 5, 
    'stepTime': 0.87548828125, 'step': 1, 'jobName': 'Job-5', 'severe': 4, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.87548828125, 'attempts': 6, 
    'timeIncrement': 1e-35, 'increment': 5, 'stepTime': 0.87548828125, 
    'step': 1, 'jobName': 'Job-5', 'severe': 5, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': -1})
mdb.jobs['Job-5']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-5'})
mdb.models['2DSPIRAL'].boundaryConditions['BC-1'].setValues(typeName=PINNED)
mdb.jobs['Job-5'].submit(consistencyChecking=OFF)
mdb.jobs['Job-5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-5.odb', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 26996, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-5', 'memory': 25.0})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Job-5', 'severe': 5, 'iterations': 6, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'Job-5', 'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.875, 'attempts': 1, 
    'timeIncrement': 0.375, 'increment': 3, 'stepTime': 0.875, 'step': 1, 
    'jobName': 'Job-5', 'severe': 3, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.125, 'increment': 4, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-5']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(JOB_COMPLETED, {'time': 'Sat Dec 01 11:25:03 2018', 
    'jobName': 'Job-5'})
mdb.Model(name='2DSPIRAL-2', objectToCopy=mdb.models['2DSPIRAL'])
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['Part-2'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['Part-2'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['Part-2'].features['Shell planar-1'])
mdb.models['2DSPIRAL'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].dimensions[0], ))
mdb.models['2DSPIRAL'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[19], ))
mdb.models['2DSPIRAL'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[14], ))
mdb.models['2DSPIRAL'].sketches['__edit__'].Line(point1=(241.5, -332.25), 
    point2=(79.5, -332.25))
mdb.models['2DSPIRAL'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[20])
mdb.models['2DSPIRAL'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[9], ))
mdb.models['2DSPIRAL'].sketches['__edit__'].Line(point1=(225.5, -112.25), 
    point2=(225.5, -364.75))
mdb.models['2DSPIRAL'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[21])
mdb.models['2DSPIRAL'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[8], entity2=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[21])
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[21], point1=(
    222.775604248047, -351.661865234375))
mdb.models['2DSPIRAL'].sketches['__edit__'].move(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[16], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[17], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[18], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[20]), vector=(0.0, 
    -100.0))
mdb.models['2DSPIRAL'].sketches['__edit__'].undo()
mdb.models['2DSPIRAL'].sketches['__edit__'].move(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[16], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[17], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[18]), vector=(0.0, 
    -100.0))
mdb.models['2DSPIRAL'].sketches['__edit__'].undo()
mdb.models['2DSPIRAL'].sketches['__edit__'].offset(distance=100.0, objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[18], ), side=LEFT)
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[17], point1=(
    243.072967529297, -412.59375))
mdb.models['2DSPIRAL'].sketches['__edit__'].Line(point1=(241.5, -332.25), 
    point2=(241.5, -532.25))
mdb.models['2DSPIRAL'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[24])
mdb.models['2DSPIRAL'].sketches['__edit__'].Line(point1=(79.5, -432.25), 
    point2=(79.5, -532.25))
mdb.models['2DSPIRAL'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[25])
mdb.models['2DSPIRAL'].sketches['__edit__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[16], 
    entity2=mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[25])
mdb.models['2DSPIRAL'].sketches['__edit__'].offset(distance=15.9, objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[24], ), side=RIGHT)
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[26], point1=(
    221.690704345703, -485.328125))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[20], point1=(
    145.325531005859, -335.265625))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[16], point1=(
    78.8878479003906, -375.078125))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[28], point1=(
    233.909149169922, -331.4375))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[18], point1=(
    230.090881347656, -431.734375))
mdb.models['2DSPIRAL'].sketches['__edit__'].FilletByRadius(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[27], curve2=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[30], nearPoint1=(
    220.927062988281, -396.515625), nearPoint2=(185.799102783203, -430.96875), 
    radius=90.0)
mdb.models['2DSPIRAL'].sketches['__edit__'].move(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[4], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[5], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[6], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[7], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[8], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[11], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[22], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[23], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[24], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[25], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[27], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[29], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[30], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[31]), vector=(146.0, 
    0.0))
mdb.models['2DSPIRAL'].sketches['__edit__'].Line(point1=(225.5, -112.25), 
    point2=(225.5, -192.656890869141))
mdb.models['2DSPIRAL'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[32])
mdb.models['2DSPIRAL'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[32], ))
mdb.models['2DSPIRAL'].sketches['__edit__'].offset(distance=0.1, objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[25], ), side=LEFT)
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[25], point1=(
    225.47998046875, -432.816101074219))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[30], point1=(
    225.512161254883, -432.246063232422))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[23], point1=(
    225.532989501953, -532.32666015625))
mdb.models['2DSPIRAL'].sketches['__edit__'].retrieveSketch(sketch=
    mdb.models['2DSPIRAL'].sketches['SPIRAL-5'])
mdb.models['2DSPIRAL'].sketches['__edit__'].move(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[4], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[5], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[6], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[7], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[8], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[11], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[22], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[24], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[27], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[29], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[31], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[33], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[34], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[35], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[38], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[39], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[40], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[41]), vector=(0.0, 
    -2.25))
mdb.models['2DSPIRAL'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[38], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[39], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[40]))
mdb.models['2DSPIRAL'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[8], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[41]))
mdb.models['2DSPIRAL'].sketches['__edit__'].Line(point1=(371.5, -114.5), 
    point2=(416.0, -114.5))
mdb.models['2DSPIRAL'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[42])
mdb.models['2DSPIRAL'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[22], entity2=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[42])
mdb.models['2DSPIRAL'].sketches['__edit__'].retrieveSketch(sketch=
    mdb.models['2DSPIRAL'].sketches['SPIRAL-5'])
mdb.models['2DSPIRAL'].sketches['__edit__'].copyMirror(mirrorLine=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[48], objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[45], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[47], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[48], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[42]))
mdb.models['2DSPIRAL'].sketches['__edit__'].undo()
mdb.models['2DSPIRAL'].sketches['__edit__'].copyMirror(mirrorLine=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[48], objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[42], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[45], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[46], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[47], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[48]))
mdb.models['2DSPIRAL'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[49], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[42]))
mdb.models['2DSPIRAL'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[47], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[48], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[52], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[53], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[45], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[48], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[50], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[53], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].constraints[139]))
mdb.models['2DSPIRAL'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[46], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[51]))
mdb.models['2DSPIRAL'].sketches['__edit__'].Line(point1=(371.5, -114.5), 
    point2=(416.0, -114.5))
mdb.models['2DSPIRAL'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[54])
mdb.models['2DSPIRAL'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[22], entity2=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[54])
mdb.models['2DSPIRAL'].parts['Part-2'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2DSPIRAL'].sketches['__edit__'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].parts['Part-2'].regenerate()
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['Part-2'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['Part-2'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['Part-2'].features['Shell planar-1'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['Part-3'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['Part-3'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['Part-3'].features['Shell planar-1'])
mdb.models['2DSPIRAL'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[4], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[5], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[6], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[7]))
mdb.models['2DSPIRAL'].sketches['__edit__'].sketchOptions.setValues(gridOrigin=
    (173.0, -1.125))
mdb.models['2DSPIRAL'].sketches['__edit__'].retrieveSketch(sketch=
    mdb.models['2DSPIRAL'].sketches['SPIRAL-5'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['Part-3'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['Part-3'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['Part-3'].features['Shell planar-1'])
mdb.models['2DSPIRAL'].sketches['__edit__'].retrieveSketch(sketch=
    mdb.models['2DSPIRAL'].sketches['FLANGE-5'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['Part-1'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['Part-1'].features['Shell planar-1'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['Part-2'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['Part-2'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['Part-2'].features['Shell planar-1'])
mdb.models['2DSPIRAL'].ConstrainedSketch(name='RFFLG-4', objectToCopy=
    mdb.models['2DSPIRAL'].sketches['__edit__'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['2DSPIRAL'].sketches['__profile__'].sketchOptions.setValues(
    gridOrigin=(378.050003051758, -324.5))
mdb.models['2DSPIRAL'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['2DSPIRAL'].sketches['RFFLG-4'])
mdb.models['2DSPIRAL'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['2DSPIRAL'].sketches['SPIRAL-5'])
mdb.models['2DSPIRAL'].Part(dimensionality=TWO_D_PLANAR, name='GASKET', type=
    DEFORMABLE_BODY)
mdb.models['2DSPIRAL'].parts['GASKET'].BaseShell(sketch=
    mdb.models['2DSPIRAL'].sketches['__profile__'])
del mdb.models['2DSPIRAL'].sketches['__profile__']
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['GASKET'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['GASKET'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['GASKET'].features['Shell planar-1'])
mdb.models['2DSPIRAL'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[4], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[6], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[7], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[8], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[9], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[10], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[11], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[12], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[13], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[14], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[15], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[16], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[17], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[4], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[5], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[6], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[7], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[8], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[9], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[17], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].dimensions[0], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].constraints[16], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].constraints[23], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].constraints[34], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].constraints[35], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].constraints[34], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].constraints[35]))
mdb.models['2DSPIRAL'].parts['GASKET'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2DSPIRAL'].sketches['__edit__'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].parts['GASKET'].regenerate()
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['GASKET'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['GASKET'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['GASKET'].features['Shell planar-1'])
mdb.models['2DSPIRAL'].sketches['__edit__'].copyMirror(mirrorLine=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[23], objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[21], ))
mdb.models['2DSPIRAL'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[22], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[23], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[20]))
mdb.models['2DSPIRAL'].sketches['__edit__'].Line(point1=(540.050003051758, 
    -322.25), point2=(540.050003051758, -326.75))
mdb.models['2DSPIRAL'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[25])
mdb.models['2DSPIRAL'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[24], entity2=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[25])
mdb.models['2DSPIRAL'].sketches['__edit__'].Line(point1=(562.050003051758, 
    -322.25), point2=(562.050003051758, -326.75))
mdb.models['2DSPIRAL'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[26])
mdb.models['2DSPIRAL'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[24], entity2=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[26])
mdb.models['2DSPIRAL'].parts['GASKET'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2DSPIRAL'].sketches['__edit__'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].parts['GASKET'].regenerate()
mdb.models['2DSPIRAL'].rootAssembly.regenerate()
mdb.models['2DSPIRAL'].rootAssembly.features['Part-3-1'].suppress()
mdb.models['2DSPIRAL'].rootAssembly.generateMesh(regions=(
    mdb.models['2DSPIRAL'].rootAssembly.instances['Part-2-1'], ))
mdb.models['2DSPIRAL'].rootAssembly.Instance(dependent=OFF, name='GASKET-1', 
    part=mdb.models['2DSPIRAL'].parts['GASKET'])
mdb.models['2DSPIRAL'].rootAssembly.deleteFeatures(('Part-1-1', 'Part-2-1', 
    'Part-3-1'))
mdb.models['2DSPIRAL'].rootAssembly.deleteSets(setNames=('Set-2', 'Set-3'))
mdb.models['2DSPIRAL'].rootAssembly.deleteSurfaces(surfaceNames=('Surf-3', 
    'm_Surf-1', 's_Surf-1'))
del mdb.models['2DSPIRAL'].loads['Load-1']
del mdb.models['2DSPIRAL'].boundaryConditions['BC-2']
del mdb.models['2DSPIRAL'].boundaryConditions['BC-1']
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['Part-2'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['Part-2'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['Part-2'].features['Shell planar-1'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].parts.changeKey(fromName='Part-2', toName='FLGRF')
del mdb.models['2DSPIRAL'].rootAssembly.features['Datum csys-1']
del mdb.models['2DSPIRAL'].rootAssembly.features['GASKET-1']
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['FLGRF'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['FLGRF'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['FLGRF'].features['Shell planar-1'])
mdb.models['2DSPIRAL'].sketches['__edit__'].FixedConstraint(entity=
    mdb.models['2DSPIRAL'].sketches['__edit__'].vertices[34])
mdb.models['2DSPIRAL'].sketches['__edit__'].ConstructionLine(point1=(225.6, 
    -434.5), point2=(225.6, -343.948638916016))
mdb.models['2DSPIRAL'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[55])
mdb.models['2DSPIRAL'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['2DSPIRAL'].sketches['__edit__'].vertices[34], 
    entity2=mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[55])
mdb.models['2DSPIRAL'].parts['FLGRF'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2DSPIRAL'].sketches['__edit__'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].parts['FLGRF'].regenerate()
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['GASKET'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['GASKET'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['GASKET'].features['Shell planar-1'])
mdb.models['2DSPIRAL'].sketches['__edit__'].ConstructionLine(point1=(
    378.050003051758, -218.25), point2=(378.050003051757, -260.75))
mdb.models['2DSPIRAL'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[27])
mdb.models['2DSPIRAL'].sketches['__edit__'].FixedConstraint(entity=
    mdb.models['2DSPIRAL'].sketches['__edit__'].vertices[18])
mdb.models['2DSPIRAL'].parts['GASKET'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2DSPIRAL'].sketches['__edit__'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].parts['GASKET'].regenerate()
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['GASKET'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['GASKET'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['GASKET'].features['Shell planar-1'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['GASKET'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['GASKET'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['GASKET'].features['Shell planar-1'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['GASKET'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['GASKET'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['GASKET'].features['Shell planar-1'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['FLGRF'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['FLGRF'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['FLGRF'].features['Shell planar-1'])
mdb.models['2DSPIRAL'].sketches['__edit__'].offset(distance=0.1, objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[33], ), side=RIGHT)
mdb.models['2DSPIRAL'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[34], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[33], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[34], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].constraints[145], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].constraints[147]))
mdb.models['2DSPIRAL'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[35], ))
mdb.models['2DSPIRAL'].sketches['__edit__'].Line(point1=(281.600002344327, 
    -434.5), point2=(225.5, -434.5))
mdb.models['2DSPIRAL'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[57])
mdb.models['2DSPIRAL'].sketches['__edit__'].Line(point1=(387.5, -534.5), 
    point2=(225.5, -534.5))
mdb.models['2DSPIRAL'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[58])
mdb.models['2DSPIRAL'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[24], entity2=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[58])
mdb.models['2DSPIRAL'].parts['FLGRF'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2DSPIRAL'].sketches['__edit__'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].parts['FLGRF'].regenerate()
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['FLGRF'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['FLGRF'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['FLGRF'].features['Shell planar-1'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['2DSPIRAL'].rootAssembly.Instance(dependent=OFF, name='FLGRF-1', 
    part=mdb.models['2DSPIRAL'].parts['FLGRF'])
mdb.models['2DSPIRAL'].rootAssembly.Instance(dependent=OFF, name='GASKET-1', 
    part=mdb.models['2DSPIRAL'].parts['GASKET'])
mdb.models['2DSPIRAL'].rootAssembly.translate(instanceList=('GASKET-1', ), 
    vector=(-378.050003, 324.5, 0.0))
mdb.models['2DSPIRAL'].rootAssembly.translate(instanceList=('FLGRF-1', ), 
    vector=(-225.5, 112.25, 0.0))
mdb.models['2DSPIRAL'].rootAssembly.Instance(dependent=OFF, name='FLGRF-2', 
    part=mdb.models['2DSPIRAL'].parts['FLGRF'])
mdb.models['2DSPIRAL'].rootAssembly.rotate(angle=180.0, axisDirection=(0.0, 
    0.0, 1.0), axisPoint=(371.5, -114.5, 0.0), instanceList=('FLGRF-2', ))
del mdb.models['2DSPIRAL'].rootAssembly.features['FLGRF-2']
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['FLGRF'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['FLGRF'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['FLGRF'].features['Shell planar-1'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['2DSPIRAL'].sketches['__profile__'].sketchOptions.setValues(
    gridOrigin=(378.050003051758, -324.5))
mdb.models['2DSPIRAL'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['2DSPIRAL'].sketches['RFFLG-4'])
mdb.models['2DSPIRAL'].sketches['__profile__'].mirror(mirrorLine=
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[17], objectList=(
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[4], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[5], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[6], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[7], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[8], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[9], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[10], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[11], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[12], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[13], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[14], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[15], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[16], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[17]))
mdb.models['2DSPIRAL'].sketches['__profile__'].move(objectList=(
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[4], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[5], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[6], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[7], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[8], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[9], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[10], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[11], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[12], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[13], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[14], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[15], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[16], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[17]), vector=(
    -13.799996948242, -66.25))
mdb.models['2DSPIRAL'].sketches['__profile__'].move(objectList=(
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[4], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[5], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[6], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[7], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[8], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[9], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[10], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[11], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[12], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[13], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[14], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[15], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[16], 
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[17]), vector=(
    166.25, -141.5))
mdb.models['2DSPIRAL'].Part(dimensionality=TWO_D_PLANAR, name='FLGMIRROR', 
    type=DEFORMABLE_BODY)
mdb.models['2DSPIRAL'].parts['FLGMIRROR'].BaseShell(sketch=
    mdb.models['2DSPIRAL'].sketches['__profile__'])
del mdb.models['2DSPIRAL'].sketches['__profile__']
mdb.models['2DSPIRAL'].parts['FLGMIRROR'].Set(faces=
    mdb.models['2DSPIRAL'].parts['FLGMIRROR'].faces.getSequenceFromMask((
    '[#1 ]', ), ), name='Set-1')
mdb.models['2DSPIRAL'].parts['FLGMIRROR'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['2DSPIRAL'].parts['FLGMIRROR'].sets['Set-1'], sectionName=
    'Section-1', thicknessAssignment=FROM_SECTION)
mdb.models['2DSPIRAL'].sections.changeKey(fromName='Section-1', toName='FLG')
mdb.models['2DSPIRAL'].sections.changeKey(fromName='Section-2', toName='GAS')
mdb.models['2DSPIRAL'].parts['FLGMIRROR'].sectionAssignments[0].setValues(
    sectionName='FLG')
mdb.models['2DSPIRAL'].parts['FLGRF'].sectionAssignments[0].setValues(
    sectionName='FLG')
mdb.models['2DSPIRAL'].rootAssembly.Instance(dependent=OFF, name='FLGMIRROR-1', 
    part=mdb.models['2DSPIRAL'].parts['FLGMIRROR'])
mdb.models['2DSPIRAL'].rootAssembly.translate(instanceList=('FLGMIRROR-1', ), 
    vector=(-378.050003, 324.5, 0.0))
mdb.models['2DSPIRAL'].rootAssembly.Set(edges=
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGRF-1'].edges.getSequenceFromMask(
    mask=('[#800 ]', ), )+\
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGMIRROR-1'].edges.getSequenceFromMask(
    mask=('[#8 ]', ), ), name='Set-2')
mdb.models['2DSPIRAL'].XsymmBC(createStepName='Step-1', localCsys=None, name=
    'BC-1', region=mdb.models['2DSPIRAL'].rootAssembly.sets['Set-2'])
mdb.models['2DSPIRAL'].rootAssembly.Surface(name='Surf-1', side1Edges=
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGRF-1'].edges.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['2DSPIRAL'].Pressure(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, field='', magnitude=310.0, name='Load-1', region=
    mdb.models['2DSPIRAL'].rootAssembly.surfaces['Surf-1'])
mdb.models['2DSPIRAL'].rootAssembly.Surface(name='Surf-2', side1Edges=
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGMIRROR-1'].edges.getSequenceFromMask(
    ('[#2000 ]', ), ))
mdb.models['2DSPIRAL'].Pressure(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, field='', magnitude=-310.0, name='Load-2', 
    region=mdb.models['2DSPIRAL'].rootAssembly.surfaces['Surf-2'])
mdb.models['2DSPIRAL'].loads['Load-2'].setValues(magnitude=310.0)
mdb.models['2DSPIRAL'].parts['GASKET'].Set(faces=
    mdb.models['2DSPIRAL'].parts['GASKET'].faces.getSequenceFromMask(('[#1 ]', 
    ), ), name='Set-1')
mdb.models['2DSPIRAL'].parts['GASKET'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['2DSPIRAL'].parts['GASKET'].sets['Set-1'], sectionName='GAS', 
    thicknessAssignment=FROM_SECTION)
mdb.models['2DSPIRAL'].rootAssembly.regenerate()
mdb.models['2DSPIRAL'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGRF-1'], ), size=11.0)
mdb.models['2DSPIRAL'].rootAssembly.generateMesh(regions=(
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGRF-1'], ))
mdb.models['2DSPIRAL'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGMIRROR-1'], ), size=11.0)
mdb.models['2DSPIRAL'].rootAssembly.generateMesh(regions=(
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGMIRROR-1'], ))
mdb.models['2DSPIRAL'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=CPS4, elemLibrary=STANDARD), ElemType(elemCode=CPS3, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGMIRROR-1'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGRF-1'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), ), ))
mdb.models['2DSPIRAL'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['2DSPIRAL'].rootAssembly.instances['GASKET-1'], ), size=1.0)
mdb.models['2DSPIRAL'].rootAssembly.generateMesh(regions=(
    mdb.models['2DSPIRAL'].rootAssembly.instances['GASKET-1'], ))
del mdb.models['2DSPIRAL'].interactions['Int-1']
mdb.models['2DSPIRAL'].rootAssembly.Surface(name='m_Surf-3', side1Edges=
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGRF-1'].edges.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['2DSPIRAL'].rootAssembly.Surface(name='s_Surf-3', side1Edges=
    mdb.models['2DSPIRAL'].rootAssembly.instances['GASKET-1'].edges.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['2DSPIRAL'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    clearanceRegion=None, createStepName='Step-1', datumAxis=None, 
    initialClearance=OMIT, interactionProperty='IntProp-1', master=
    mdb.models['2DSPIRAL'].rootAssembly.surfaces['m_Surf-3'], name='Int-1', 
    slave=mdb.models['2DSPIRAL'].rootAssembly.surfaces['s_Surf-3'], sliding=
    SMALL, thickness=ON)
mdb.models['2DSPIRAL'].rootAssembly.Surface(name='m_Surf-5', side1Edges=
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGMIRROR-1'].edges.getSequenceFromMask(
    ('[#200 ]', ), ))
mdb.models['2DSPIRAL'].rootAssembly.Set(faces=
    mdb.models['2DSPIRAL'].rootAssembly.instances['GASKET-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), name='s_Set-4')
mdb.models['2DSPIRAL'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    clearanceRegion=None, createStepName='Step-1', datumAxis=None, 
    initialClearance=OMIT, interactionProperty='IntProp-1', master=
    mdb.models['2DSPIRAL'].rootAssembly.surfaces['m_Surf-5'], name='Int-2', 
    slave=mdb.models['2DSPIRAL'].rootAssembly.sets['s_Set-4'], sliding=FINITE, 
    thickness=ON)
mdb.models['2DSPIRAL'].interactions['Int-2'].setValues(adjustMethod=NONE, 
    bondingSet=None, enforcement=SURFACE_TO_SURFACE, initialClearance=OMIT, 
    sliding=SMALL, supplementaryContact=SELECTIVE, thickness=ON)
mdb.jobs['Job-5'].submit(consistencyChecking=OFF)
mdb.jobs['Job-5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-5.odb', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 32624, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-5', 'memory': 26.0})
mdb.jobs['Job-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 38 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 26 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 8, 'iterations': 16, 'phase': STANDARD_PHASE, 
    'equilibrium': 8})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.015625, 'attempts': 4, 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.015625, 'step': 1, 
    'jobName': 'Job-5', 'severe': 5, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.03125, 'attempts': 1, 
    'timeIncrement': 0.015625, 'increment': 2, 'stepTime': 0.03125, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 5})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.03125, 'attempts': ' 1U', 
    'timeIncrement': 0.015625, 'increment': 3, 'stepTime': 0.03125, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 8, 'phase': STANDARD_PHASE, 
    'equilibrium': 8})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.03125, 'attempts': ' 2U', 
    'timeIncrement': 0.00390625, 'increment': 3, 'stepTime': 0.03125, 
    'step': 1, 'jobName': 'Job-5', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0322265625, 'attempts': 3, 
    'timeIncrement': 0.0009765625, 'increment': 3, 'stepTime': 0.0322265625, 
    'step': 1, 'jobName': 'Job-5', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.033203125, 'attempts': 1, 
    'timeIncrement': 0.0009765625, 'increment': 4, 'stepTime': 0.033203125, 
    'step': 1, 'jobName': 'Job-5', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.03466796875, 'attempts': 1, 
    'timeIncrement': 0.00146484375, 'increment': 5, 'stepTime': 0.03466796875, 
    'step': 1, 'jobName': 'Job-5', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.036865234375, 'attempts': 1, 
    'timeIncrement': 0.002197265625, 'increment': 6, 
    'stepTime': 0.036865234375, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0401611328125, 
    'attempts': 1, 'timeIncrement': 0.0032958984375, 'increment': 7, 
    'stepTime': 0.0401611328125, 'step': 1, 'jobName': 'Job-5', 'severe': 1, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.04510498046875, 
    'attempts': 1, 'timeIncrement': 0.00494384765625, 'increment': 8, 
    'stepTime': 0.04510498046875, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.04510498046875, 
    'attempts': ' 1U', 'timeIncrement': 0.007415771484375, 'increment': 9, 
    'stepTime': 0.04510498046875, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0469589233398438, 
    'attempts': 2, 'timeIncrement': 0.00185394287109375, 'increment': 9, 
    'stepTime': 0.0469589233398438, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0497398376464844, 
    'attempts': 1, 'timeIncrement': 0.00278091430664063, 'increment': 10, 
    'stepTime': 0.0497398376464844, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0497398376464844, 
    'attempts': ' 1U', 'timeIncrement': 0.00417137145996094, 'increment': 11, 
    'stepTime': 0.0497398376464844, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0507826805114746, 
    'attempts': 2, 'timeIncrement': 0.00104284286499023, 'increment': 11, 
    'stepTime': 0.0507826805114746, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.05234694480896, 
    'attempts': 1, 'timeIncrement': 0.00156426429748535, 'increment': 12, 
    'stepTime': 0.05234694480896, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.054693341255188, 
    'attempts': 1, 'timeIncrement': 0.00234639644622803, 'increment': 13, 
    'stepTime': 0.054693341255188, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.05821293592453, 
    'attempts': 1, 'timeIncrement': 0.00351959466934204, 'increment': 14, 
    'stepTime': 0.05821293592453, 'step': 1, 'jobName': 'Job-5', 'severe': 1, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.05821293592453, 
    'attempts': ' 1U', 'timeIncrement': 0.00527939200401306, 'increment': 15, 
    'stepTime': 0.05821293592453, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0595327839255333, 
    'attempts': 2, 'timeIncrement': 0.00131984800100327, 'increment': 15, 
    'stepTime': 0.0595327839255333, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0615125559270382, 
    'attempts': 1, 'timeIncrement': 0.0019797720015049, 'increment': 16, 
    'stepTime': 0.0615125559270382, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0615125559270382, 
    'attempts': ' 1U', 'timeIncrement': 0.00296965800225735, 'increment': 17, 
    'stepTime': 0.0615125559270382, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0622549704276025, 
    'attempts': 2, 'timeIncrement': 0.000742414500564337, 'increment': 17, 
    'stepTime': 0.0622549704276025, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0622549704276025, 
    'attempts': ' 1U', 'timeIncrement': 0.00111362175084651, 'increment': 18, 
    'stepTime': 0.0622549704276025, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0622549704276025, 
    'attempts': ' 2U', 'timeIncrement': 0.000278405437711626, 'increment': 18, 
    'stepTime': 0.0622549704276025, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0622549704276025, 
    'attempts': ' 3U', 'timeIncrement': 6.96013594279066e-05, 'increment': 18, 
    'stepTime': 0.0622549704276025, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0622549704276025, 
    'attempts': ' 4U', 'timeIncrement': 1.74003398569766e-05, 'increment': 18, 
    'stepTime': 0.0622549704276025, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['Job-5']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Time increment required is less than the minimum specified', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0622549704276025, 
    'attempts': ' 5U', 'timeIncrement': 1e-05, 'increment': 18, 
    'stepTime': 0.0622549704276025, 'step': 1, 'jobName': 'Job-5', 'severe': 8, 
    'iterations': 10, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-5']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0622549704276025, 
    'attempts': 6, 'timeIncrement': 1e-35, 'increment': 18, 
    'stepTime': 0.0622549704276025, 'step': 1, 'jobName': 'Job-5', 'severe': 9, 
    'iterations': 10, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-5'})
mdb.models['2DSPIRAL'].loads['Load-1'].setValues(magnitude=31.0)
mdb.models['2DSPIRAL'].loads['Load-2'].setValues(magnitude=31.0)
mdb.jobs['Job-5'].submit(consistencyChecking=OFF)
mdb.jobs['Job-5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-5.odb', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 37856, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-5', 'memory': 26.0})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 5, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Job-5', 'severe': 5, 'iterations': 8, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.25, 'attempts': ' 1U', 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 8, 'phase': STANDARD_PHASE, 
    'equilibrium': 8})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.3125, 'attempts': 2, 
    'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.3125, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.40625, 'attempts': 1, 
    'timeIncrement': 0.09375, 'increment': 3, 'stepTime': 0.40625, 'step': 1, 
    'jobName': 'Job-5', 'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.40625, 'attempts': ' 1U', 
    'timeIncrement': 0.140625, 'increment': 4, 'stepTime': 0.40625, 'step': 1, 
    'jobName': 'Job-5', 'severe': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.40625, 'attempts': ' 2U', 
    'timeIncrement': 0.03515625, 'increment': 4, 'stepTime': 0.40625, 
    'step': 1, 'jobName': 'Job-5', 'severe': 1, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.40625, 'attempts': ' 3U', 
    'timeIncrement': 0.0087890625, 'increment': 4, 'stepTime': 0.40625, 
    'step': 1, 'jobName': 'Job-5', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.40625, 'attempts': ' 4U', 
    'timeIncrement': 0.002197265625, 'increment': 4, 'stepTime': 0.40625, 
    'step': 1, 'jobName': 'Job-5', 'severe': 2, 'iterations': 15, 
    'phase': STANDARD_PHASE, 'equilibrium': 13})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.40625, 'attempts': ' 5U', 
    'timeIncrement': 0.00054931640625, 'increment': 4, 'stepTime': 0.40625, 
    'step': 1, 'jobName': 'Job-5', 'severe': 7, 'iterations': 12, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-5']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.40625, 'attempts': 6, 
    'timeIncrement': 1e-35, 'increment': 4, 'stepTime': 0.40625, 'step': 1, 
    'jobName': 'Job-5', 'severe': 7, 'iterations': 12, 'phase': STANDARD_PHASE, 
    'equilibrium': 5})
mdb.jobs['Job-5']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-5'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['2DSPIRAL'].loads['Load-1'].setValues(magnitude=3.0)
mdb.models['2DSPIRAL'].loads['Load-2'].setValues(magnitude=3.0)
mdb.jobs['Job-5'].submit(consistencyChecking=OFF)
mdb.jobs['Job-5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-5.odb', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 23164, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-5', 'memory': 26.0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 5, 'iterations': 6, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-5']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(JOB_COMPLETED, {'time': 'Sat Dec 01 12:22:50 2018', 
    'jobName': 'Job-5'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['2DSPIRAL'].ConstrainedSketch(gridSpacing=26.04, name='__profile__', 
    sheetSize=1041.65, transform=
    mdb.models['2DSPIRAL'].parts['FLGMIRROR'].MakeSketchTransform(
    sketchPlane=mdb.models['2DSPIRAL'].parts['FLGMIRROR'].faces[0], 
    sketchPlaneSide=SIDE1, sketchOrientation=RIGHT, origin=(525.408589, 
    -103.397142, 0.0)))
mdb.models['2DSPIRAL'].parts['FLGMIRROR'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__profile__'])
mdb.models['2DSPIRAL'].sketches['__profile__'].Line(point1=(-147.358585948242, 
    101.147142), point2=(-147.358585948242, -227.85))
mdb.models['2DSPIRAL'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[16])
mdb.models['2DSPIRAL'].sketches['__profile__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[5], 
    entity2=mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[16])
mdb.models['2DSPIRAL'].sketches['__profile__'].delete(objectList=(
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[16], ))
mdb.models['2DSPIRAL'].sketches['__profile__'].undo()
mdb.models['2DSPIRAL'].sketches['__profile__'].offset(distance=266.7, 
    objectList=(mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[16], ), 
    side=LEFT)
mdb.models['2DSPIRAL'].sketches['__profile__'].offset(distance=19.05, 
    objectList=(mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[17], ), 
    side=LEFT)
mdb.models['2DSPIRAL'].sketches['__profile__'].offset(distance=19.05, 
    objectList=(mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[17], ), 
    side=RIGHT)
mdb.models['2DSPIRAL'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[19], point1=(
    96.6657518203125, 19.9080367753906))
mdb.models['2DSPIRAL'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[18], point1=(
    144.943400746094, -21.5076126386719))
mdb.models['2DSPIRAL'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[21], point1=(
    140.345561390625, -224.751112394531))
mdb.models['2DSPIRAL'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[20], point1=(
    102.796183949219, -219.382399015625))
mdb.models['2DSPIRAL'].sketches['__profile__'].delete(objectList=(
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[17], ))
mdb.models['2DSPIRAL'].sketches['__profile__'].delete(objectList=(
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[16], ))
mdb.models['2DSPIRAL'].sketches['__profile__'].offset(distance=8.0, objectList=
    (mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[23], ), side=
    RIGHT)
mdb.models['2DSPIRAL'].sketches['__profile__'].offset(distance=8.0, objectList=
    (mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[22], ), side=LEFT)
mdb.models['2DSPIRAL'].ConstrainedSketch(name='BOLTLOAD', objectToCopy=
    mdb.models['2DSPIRAL'].sketches['__profile__'])
mdb.models['2DSPIRAL'].parts['FLGMIRROR'].PartitionFaceBySketch(faces=
    mdb.models['2DSPIRAL'].parts['FLGMIRROR'].faces.getSequenceFromMask((
    '[#1 ]', ), ), sketch=mdb.models['2DSPIRAL'].sketches['__profile__'])
del mdb.models['2DSPIRAL'].sketches['__profile__']
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['FLGRF'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['FLGRF'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['FLGRF'].features['Shell planar-1'])
mdb.models['2DSPIRAL'].sketches['__edit__'].retrieveSketch(sketch=
    mdb.models['2DSPIRAL'].sketches['BOLTLOAD'])
mdb.models['2DSPIRAL'].sketches['__edit__'].undo()
mdb.models['2DSPIRAL'].sketches['__edit__'].Line(point1=(225.6, -97.25), 
    point2=(225.6, -249.204040527344))
mdb.models['2DSPIRAL'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[59])
mdb.models['2DSPIRAL'].sketches['__edit__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[55], 
    entity2=mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[59])
mdb.models['2DSPIRAL'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['2DSPIRAL'].sketches['__edit__'].vertices[52], 
    entity2=mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[55])
mdb.models['2DSPIRAL'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['2DSPIRAL'].sketches['__edit__'].vertices[53], 
    entity2=mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[55])
mdb.models['2DSPIRAL'].sketches['__edit__'].offset(distance=266.7, objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[59], ), side=LEFT)
mdb.models['2DSPIRAL'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[59], ))
mdb.models['2DSPIRAL'].sketches['__edit__'].offset(distance=19.05, objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[60], ), side=LEFT)
mdb.models['2DSPIRAL'].sketches['__edit__'].offset(distance=19.05, objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[60], ), side=RIGHT)
mdb.models['2DSPIRAL'].sketches['__edit__'].offset(distance=8.0, objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[62], ), side=RIGHT)
mdb.models['2DSPIRAL'].sketches['__edit__'].offset(distance=8.0, objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[61], ), side=LEFT)
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[63], point1=(
    463.692840576172, -239.540405273438))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[62], point1=(
    471.739166259766, -239.540405273438))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[60], point1=(
    489.440948486328, -237.929809570313))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[67], point1=(
    491.050262451172, -176.726654052734))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[68], point1=(
    487.831695556641, -104.249298095703))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[66], point1=(
    475.762237548828, -106.665191650391))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[65], point1=(
    462.083648681641, -107.470520019531))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[61], point1=(
    511.970550537109, -103.443969726563))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[64], point1=(
    515.99365234375, -103.443969726563))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[71], point1=(
    517.602905273438, -234.708587646484))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[72], point1=(
    519.212158203125, -233.903259277344))
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].ConstrainedSketch(gridSpacing=30.43, name='__profile__', 
    sheetSize=1217.36, transform=
    mdb.models['2DSPIRAL'].parts['FLGRF'].MakeSketchTransform(
    sketchPlane=mdb.models['2DSPIRAL'].parts['FLGRF'].faces[0], 
    sketchPlaneSide=SIDE1, sketchOrientation=RIGHT, origin=(372.919559, 
    -333.392875, 0.0)))
mdb.models['2DSPIRAL'].parts['FLGRF'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__profile__'])
mdb.models['2DSPIRAL'].sketches['__profile__'].Line(point1=(-147.419559, 
    -101.107125), point2=(-147.419559, 220.617499999935))
mdb.models['2DSPIRAL'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[16])
mdb.models['2DSPIRAL'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[12], entity2=
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[16])
mdb.models['2DSPIRAL'].sketches['__profile__'].offset(distance=266.7, 
    objectList=(mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[16], ), 
    side=RIGHT)
mdb.models['2DSPIRAL'].sketches['__profile__'].offset(distance=19.0, 
    objectList=(mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[17], ), 
    side=RIGHT)
mdb.models['2DSPIRAL'].sketches['__profile__'].undo()
mdb.models['2DSPIRAL'].sketches['__profile__'].offset(distance=19.05, 
    objectList=(mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[17], ), 
    side=RIGHT)
mdb.models['2DSPIRAL'].sketches['__profile__'].offset(distance=19.05, 
    objectList=(mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[17], ), 
    side=LEFT)
mdb.models['2DSPIRAL'].sketches['__profile__'].offset(distance=8.0, objectList=
    (mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[19], ), side=LEFT)
mdb.models['2DSPIRAL'].sketches['__profile__'].offset(distance=8.0, objectList=
    (mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[18], ), side=
    RIGHT)
mdb.models['2DSPIRAL'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[20], point1=(
    88.9916043300781, -46.7114645996094))
mdb.models['2DSPIRAL'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[19], point1=(
    97.4210782070313, -46.7114645996094))
mdb.models['2DSPIRAL'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[17], point1=(
    118.87780428125, -46.7114645996094))
mdb.models['2DSPIRAL'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[24], point1=(
    118.111507894531, 184.142463012695))
mdb.models['2DSPIRAL'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[25], point1=(
    118.111507894531, 217.121588989258))
mdb.models['2DSPIRAL'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[22], point1=(
    96.6547818203125, 217.121588989258))
mdb.models['2DSPIRAL'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[23], point1=(
    96.6547818203125, 219.422461791992))
mdb.models['2DSPIRAL'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[18], point1=(
    135.736691, 217.888556762695))
mdb.models['2DSPIRAL'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[21], point1=(
    142.633541585938, 217.888556762695))
mdb.models['2DSPIRAL'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[28], point1=(
    135.736691, 115.116370483398))
mdb.models['2DSPIRAL'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__profile__'].geometry[29], point1=(
    144.166073324219, 110.51462487793))
mdb.models['2DSPIRAL'].parts['FLGRF'].PartitionFaceBySketch(faces=
    mdb.models['2DSPIRAL'].parts['FLGRF'].faces.getSequenceFromMask(('[#1 ]', 
    ), ), sketch=mdb.models['2DSPIRAL'].sketches['__profile__'])
del mdb.models['2DSPIRAL'].sketches['__profile__']
mdb.models['2DSPIRAL'].rootAssembly.regenerate()
mdb.models['2DSPIRAL'].rootAssembly.generateMesh(regions=(
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGRF-1'], ))
mdb.models['2DSPIRAL'].rootAssembly.generateMesh(regions=(
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGMIRROR-1'], ))
mdb.models['2DSPIRAL'].rootAssembly.Surface(name='Surf-6', side1Edges=
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGMIRROR-1'].edges.getSequenceFromMask(
    ('[#2000040 ]', ), ))
mdb.models['2DSPIRAL'].loads['Load-1'].setValues(magnitude=310.0, region=
    mdb.models['2DSPIRAL'].rootAssembly.surfaces['Surf-6'])
mdb.models['2DSPIRAL'].rootAssembly.Surface(name='Surf-7', side1Edges=
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGRF-1'].edges.getSequenceFromMask(
    ('[#440000 ]', ), ))
mdb.models['2DSPIRAL'].loads['Load-2'].setValues(magnitude=310.0, region=
    mdb.models['2DSPIRAL'].rootAssembly.surfaces['Surf-7'])
mdb.jobs['Job-5'].submit(consistencyChecking=OFF)
mdb.jobs['Job-5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-5.odb', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 23824, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-5', 'memory': 26.0})
mdb.jobs['Job-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 2 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 11, 'iterations': 11, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 6, 'iterations': 6, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.015625, 'attempts': 4, 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.015625, 'step': 1, 
    'jobName': 'Job-5', 'severe': 8, 'iterations': 10, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.03125, 'attempts': 1, 
    'timeIncrement': 0.015625, 'increment': 2, 'stepTime': 0.03125, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0546875, 'attempts': 1, 
    'timeIncrement': 0.0234375, 'increment': 3, 'stepTime': 0.0546875, 
    'step': 1, 'jobName': 'Job-5', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.08984375, 'attempts': 1, 
    'timeIncrement': 0.03515625, 'increment': 4, 'stepTime': 0.08984375, 
    'step': 1, 'jobName': 'Job-5', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.142578125, 'attempts': 1, 
    'timeIncrement': 0.052734375, 'increment': 5, 'stepTime': 0.142578125, 
    'step': 1, 'jobName': 'Job-5', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.142578125, 
    'attempts': ' 1U', 'timeIncrement': 0.0791015625, 'increment': 6, 
    'stepTime': 0.142578125, 'step': 1, 'jobName': 'Job-5', 'severe': 1, 
    'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.162353515625, 'attempts': 2, 
    'timeIncrement': 0.019775390625, 'increment': 6, 
    'stepTime': 0.162353515625, 'step': 1, 'jobName': 'Job-5', 'severe': 1, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.162353515625, 
    'attempts': ' 1U', 'timeIncrement': 0.0296630859375, 'increment': 7, 
    'stepTime': 0.162353515625, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.169769287109375, 
    'attempts': 2, 'timeIncrement': 0.007415771484375, 'increment': 7, 
    'stepTime': 0.169769287109375, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.180892944335938, 
    'attempts': 1, 'timeIncrement': 0.0111236572265625, 'increment': 8, 
    'stepTime': 0.180892944335938, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.180892944335938, 
    'attempts': ' 1U', 'timeIncrement': 0.0166854858398438, 'increment': 9, 
    'stepTime': 0.180892944335938, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.185064315795898, 
    'attempts': 2, 'timeIncrement': 0.00417137145996094, 'increment': 9, 
    'stepTime': 0.185064315795898, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.19132137298584, 
    'attempts': 1, 'timeIncrement': 0.00625705718994141, 'increment': 10, 
    'stepTime': 0.19132137298584, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.19132137298584, 
    'attempts': ' 1U', 'timeIncrement': 0.00938558578491211, 'increment': 11, 
    'stepTime': 0.19132137298584, 'step': 1, 'jobName': 'Job-5', 'severe': 1, 
    'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.193667769432068, 
    'attempts': 2, 'timeIncrement': 0.00234639644622803, 'increment': 11, 
    'stepTime': 0.193667769432068, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.19718736410141, 
    'attempts': 1, 'timeIncrement': 0.00351959466934204, 'increment': 12, 
    'stepTime': 0.19718736410141, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.202466756105423, 
    'attempts': 1, 'timeIncrement': 0.00527939200401306, 'increment': 13, 
    'stepTime': 0.202466756105423, 'step': 1, 'jobName': 'Job-5', 'severe': 1, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.210385844111443, 
    'attempts': 1, 'timeIncrement': 0.00791908800601959, 'increment': 14, 
    'stepTime': 0.210385844111443, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.210385844111443, 
    'attempts': ' 1U', 'timeIncrement': 0.0118786320090294, 'increment': 15, 
    'stepTime': 0.210385844111443, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.210385844111443, 
    'attempts': ' 2U', 'timeIncrement': 0.00296965800225735, 'increment': 15, 
    'stepTime': 0.210385844111443, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.210385844111443, 
    'attempts': ' 3U', 'timeIncrement': 0.000742414500564337, 'increment': 15, 
    'stepTime': 0.210385844111443, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.210385844111443, 
    'attempts': ' 4U', 'timeIncrement': 0.000185603625141084, 'increment': 15, 
    'stepTime': 0.210385844111443, 'step': 1, 'jobName': 'Job-5', 'severe': 2, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.210385844111443, 
    'attempts': ' 5U', 'timeIncrement': 4.6400906285271e-05, 'increment': 15, 
    'stepTime': 0.210385844111443, 'step': 1, 'jobName': 'Job-5', 'severe': 2, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-5']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.210385844111443, 
    'attempts': 6, 'timeIncrement': 1e-35, 'increment': 15, 
    'stepTime': 0.210385844111443, 'step': 1, 'jobName': 'Job-5', 'severe': 2, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-5']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-5'})
mdb.models['2DSPIRAL'].loads['Load-1'].setValues(magnitude=154.0)
mdb.models['2DSPIRAL'].loads['Load-2'].setValues(magnitude=154.0)
mdb.jobs['Job-5'].submit(consistencyChecking=OFF)
mdb.jobs['Job-5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-5.odb', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 29028, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-5', 'memory': 26.0})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 6, 'iterations': 6, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Job-5', 'severe': 7, 'iterations': 9, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.25, 'attempts': ' 1U', 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Job-5', 'severe': 1, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'equilibrium': 6})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.25, 'attempts': ' 2U', 
    'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Job-5', 'severe': 1, 'iterations': 8, 'phase': STANDARD_PHASE, 
    'equilibrium': 7})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.265625, 'attempts': 3, 
    'timeIncrement': 0.015625, 'increment': 2, 'stepTime': 0.265625, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.2890625, 'attempts': 1, 
    'timeIncrement': 0.0234375, 'increment': 3, 'stepTime': 0.2890625, 
    'step': 1, 'jobName': 'Job-5', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.2890625, 'attempts': ' 1U', 
    'timeIncrement': 0.03515625, 'increment': 4, 'stepTime': 0.2890625, 
    'step': 1, 'jobName': 'Job-5', 'severe': 1, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.2890625, 'attempts': ' 2U', 
    'timeIncrement': 0.0087890625, 'increment': 4, 'stepTime': 0.2890625, 
    'step': 1, 'jobName': 'Job-5', 'severe': 1, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.2890625, 'attempts': ' 3U', 
    'timeIncrement': 0.002197265625, 'increment': 4, 'stepTime': 0.2890625, 
    'step': 1, 'jobName': 'Job-5', 'severe': 1, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.2890625, 'attempts': ' 4U', 
    'timeIncrement': 0.00054931640625, 'increment': 4, 'stepTime': 0.2890625, 
    'step': 1, 'jobName': 'Job-5', 'severe': 1, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.2890625, 'attempts': ' 5U', 
    'timeIncrement': 0.0001373291015625, 'increment': 4, 'stepTime': 0.2890625, 
    'step': 1, 'jobName': 'Job-5', 'severe': 1, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-5']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.2890625, 'attempts': 6, 
    'timeIncrement': 1e-35, 'increment': 4, 'stepTime': 0.2890625, 'step': 1, 
    'jobName': 'Job-5', 'severe': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job-5']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-5'})
mdb.models['2DSPIRAL'].rootAssembly.Set(edges=
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGRF-1'].edges.getSequenceFromMask(
    ('[#400 ]', ), ), name='Set-5')
mdb.models['2DSPIRAL'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-2', region=mdb.models['2DSPIRAL'].rootAssembly.sets['Set-5'], u1=0.0, 
    u2=0.0, ur3=UNSET)
del mdb.models['2DSPIRAL'].boundaryConditions['BC-2']
mdb.models['2DSPIRAL'].rootAssembly.Set(name='Set-4', nodes=
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGRF-1'].nodes.getSequenceFromMask(
    mask=('[#80000 #0:2 #7ffe00 ]', ), ))
mdb.models['2DSPIRAL'].rootAssembly.sets.changeKey(fromName='Set-4', toName=
    'PINNED')
mdb.models['2DSPIRAL'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-2', region=mdb.models['2DSPIRAL'].rootAssembly.sets['PINNED'], u1=0.0, 
    u2=0.0, ur3=UNSET)
mdb.jobs['Job-5'].submit(consistencyChecking=OFF)
mdb.jobs['Job-5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-5.odb', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 9952, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-5', 'memory': 26.0})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 6, 'iterations': 6, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Job-5', 'severe': 7, 'iterations': 9, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'Job-5', 'severe': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.5, 'attempts': ' 1U', 
    'timeIncrement': 0.375, 'increment': 3, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'Job-5', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.59375, 'attempts': 2, 
    'timeIncrement': 0.09375, 'increment': 3, 'stepTime': 0.59375, 'step': 1, 
    'jobName': 'Job-5', 'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.59375, 'attempts': ' 1U', 
    'timeIncrement': 0.140625, 'increment': 4, 'stepTime': 0.59375, 'step': 1, 
    'jobName': 'Job-5', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.62890625, 'attempts': 2, 
    'timeIncrement': 0.03515625, 'increment': 4, 'stepTime': 0.62890625, 
    'step': 1, 'jobName': 'Job-5', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.62890625, 'attempts': ' 1U', 
    'timeIncrement': 0.052734375, 'increment': 5, 'stepTime': 0.62890625, 
    'step': 1, 'jobName': 'Job-5', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.64208984375, 'attempts': 2, 
    'timeIncrement': 0.01318359375, 'increment': 5, 'stepTime': 0.64208984375, 
    'step': 1, 'jobName': 'Job-5', 'severe': 1, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 2 of 1 nodes. The nodes have been identified in node set WarnNodeSolvProbZeroPiv_2_1_6_1_1.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.64208984375, 
    'attempts': ' 1U', 'timeIncrement': 0.019775390625, 'increment': 6, 
    'stepTime': 0.64208984375, 'step': 1, 'jobName': 'Job-5', 'severe': 3, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.64703369140625, 
    'attempts': 2, 'timeIncrement': 0.00494384765625, 'increment': 6, 
    'stepTime': 0.64703369140625, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing D.O.F. 2 of 1 nodes. The nodes have been identified in node set WarnNodeSolvProbZeroPiv_2_1_7_1_1.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.64703369140625, 
    'attempts': ' 1U', 'timeIncrement': 0.007415771484375, 'increment': 7, 
    'stepTime': 0.64703369140625, 'step': 1, 'jobName': 'Job-5', 'severe': 3, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.648887634277344, 
    'attempts': 2, 'timeIncrement': 0.00185394287109375, 'increment': 7, 
    'stepTime': 0.648887634277344, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.648887634277344, 
    'attempts': ' 1U', 'timeIncrement': 0.00278091430664063, 'increment': 8, 
    'stepTime': 0.648887634277344, 'step': 1, 'jobName': 'Job-5', 'severe': 5, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.649582862854004, 
    'attempts': 2, 'timeIncrement': 0.000695228576660156, 'increment': 8, 
    'stepTime': 0.649582862854004, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.649582862854004, 
    'attempts': ' 1U', 'timeIncrement': 0.00104284286499023, 'increment': 9, 
    'stepTime': 0.649582862854004, 'step': 1, 'jobName': 'Job-5', 'severe': 5, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.649843573570251, 
    'attempts': 2, 'timeIncrement': 0.000260710716247559, 'increment': 9, 
    'stepTime': 0.649843573570251, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.649843573570251, 
    'attempts': ' 1U', 'timeIncrement': 0.000391066074371338, 'increment': 10, 
    'stepTime': 0.649843573570251, 'step': 1, 'jobName': 'Job-5', 'severe': 5, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.649941340088844, 
    'attempts': 2, 'timeIncrement': 9.77665185928345e-05, 'increment': 10, 
    'stepTime': 0.649941340088844, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.649941340088844, 
    'attempts': ' 1U', 'timeIncrement': 0.000146649777889252, 'increment': 11, 
    'stepTime': 0.649941340088844, 'step': 1, 'jobName': 'Job-5', 'severe': 4, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.649978002533317, 
    'attempts': 2, 'timeIncrement': 3.66624444723129e-05, 'increment': 11, 
    'stepTime': 0.649978002533317, 'step': 1, 'jobName': 'Job-5', 'severe': 3, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.649978002533317, 
    'attempts': ' 1U', 'timeIncrement': 5.49936667084694e-05, 'increment': 12, 
    'stepTime': 0.649978002533317, 'step': 1, 'jobName': 'Job-5', 'severe': 4, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.649978002533317, 
    'attempts': ' 2U', 'timeIncrement': 1.37484166771173e-05, 'increment': 12, 
    'stepTime': 0.649978002533317, 'step': 1, 'jobName': 'Job-5', 'severe': 4, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Time increment required is less than the minimum specified', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.649978002533317, 
    'attempts': ' 3U', 'timeIncrement': 1e-05, 'increment': 12, 
    'stepTime': 0.649978002533317, 'step': 1, 'jobName': 'Job-5', 'severe': 5, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.649978002533317, 
    'attempts': 4, 'timeIncrement': 1e-35, 'increment': 12, 
    'stepTime': 0.649978002533317, 'step': 1, 'jobName': 'Job-5', 'severe': 0, 
    'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-5'})
mdb.models.changeKey(fromName='2D MODEL RTJ', toName='x2D MODEL RTJ')
mdb.models['Model-RF'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RF'].parts['FLANGE'].features['Solid revolve-1'].sketch)
mdb.models['Model-RF'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RF'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RF'].parts['FLANGE'].features['Solid revolve-1'])
del mdb.models['Model-RF'].sketches['__edit__']
mdb.models['Model-RF'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RF'].parts['FLANGE'].features['Cut extrude-1'].sketch)
mdb.models['Model-RF'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RF'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RF'].parts['FLANGE'].features['Cut extrude-1'])
del mdb.models['Model-RF'].sketches['__edit__']
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['FLGMIRROR'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['FLGMIRROR'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['FLGMIRROR'].features['Shell planar-1'])
mdb.models['2DSPIRAL'].sketches['__edit__'].FilletByRadius(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[16], curve2=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[10], nearPoint1=(
    471.522644042969, 93.8021240234375), nearPoint2=(533.677368164063, 
    52.7219848632813), radius=90.0)
mdb.models['2DSPIRAL'].sketches['__edit__'].undo()
mdb.models['2DSPIRAL'].sketches['__edit__'].FilletByRadius(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[16], curve2=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[10], nearPoint1=(
    462.140808105469, 99.6707153320313), nearPoint2=(541.886596679688, 
    56.2431640625), radius=120.0)
mdb.models['2DSPIRAL'].sketches['__edit__'].undo()
mdb.models['2DSPIRAL'].sketches['__edit__'].FilletByRadius(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[16], curve2=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[10], nearPoint1=(
    468.004455566406, 94.975830078125), nearPoint2=(538.368347167969, 
    59.7642822265625), radius=106.0)
mdb.models['2DSPIRAL'].parts['FLGMIRROR'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2DSPIRAL'].sketches['__edit__'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].parts['FLGMIRROR'].regenerate()
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['FLGRF'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['FLGRF'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['FLGRF'].features['Shell planar-1'])
mdb.models['2DSPIRAL'].sketches['__edit__'].FilletByRadius(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[58], curve2=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[24], nearPoint1=(
    301.050170898438, -529.980163574219), nearPoint2=(382.4111328125, 
    -489.756042480469), radius=106.0)
mdb.models['2DSPIRAL'].parts['FLGRF'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2DSPIRAL'].sketches['__edit__'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].parts['FLGRF'].regenerate()
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['FLGMIRROR'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['FLGMIRROR'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['FLGMIRROR'].features['Shell planar-1'])
mdb.models['2DSPIRAL'].sketches['__edit__'].offset(distance=16.0, objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[13], ), side=RIGHT)
mdb.models['2DSPIRAL'].sketches['__edit__'].offset(distance=16.0, objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[15], ), side=RIGHT)
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[14], point1=(
    373.748077392578, 48.439208984375))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[16], point1=(
    400.805114746094, 93.9825134277344))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[18], point1=(
    454.919219970703, 93.9825134277344))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[10], point1=(
    539.779968261719, -47.5709686279297))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[19], point1=(
    540.231323242188, -92.0528030395508))
mdb.models['2DSPIRAL'].parts['FLGMIRROR'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2DSPIRAL'].sketches['__edit__'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].parts['FLGMIRROR'].regenerate()
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['FLGMIRROR'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['FLGMIRROR'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['FLGMIRROR'].features['Shell planar-1'])
mdb.models['2DSPIRAL'].sketches['__edit__'].FilletByRadius(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[22], curve2=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[8], nearPoint1=(
    539.670043945313, -96.9085311889648), nearPoint2=(541.78662109375, 
    -108.848266601563), radius=6.0)
mdb.models['2DSPIRAL'].sketches['__edit__'].undo()
mdb.models['2DSPIRAL'].sketches['__edit__'].FilletByRadius(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[22], curve2=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[8], nearPoint1=(
    540.824523925781, -95.9456405639648), nearPoint2=(541.59423828125, 
    -107.307662963867), radius=15.0)
mdb.models['2DSPIRAL'].sketches['__edit__'].undo()
mdb.models['2DSPIRAL'].sketches['__edit__'].FilletByRadius(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[22], curve2=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[8], nearPoint1=(
    540.247314453125, -98.641716003418), nearPoint2=(540.824523925781, 
    -106.344772338867), radius=25.0)
mdb.models['2DSPIRAL'].sketches['__edit__'].undo()
mdb.models['2DSPIRAL'].sketches['__edit__'].FilletByRadius(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[22], curve2=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[8], nearPoint1=(
    539.285217285156, -97.1011047363281), nearPoint2=(541.016967773438, 
    -105.189315795898), radius=40.0)
mdb.models['2DSPIRAL'].parts['FLGMIRROR'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2DSPIRAL'].sketches['__edit__'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].parts['FLGMIRROR'].regenerate()
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['FLGRF'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['FLGRF'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['FLGRF'].features['Shell planar-1'])
mdb.models['2DSPIRAL'].sketches['__edit__'].FilletByRadius(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[24], curve2=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[11], nearPoint1=(
    387.144104003906, -346.572052001953), nearPoint2=(390.219604492188, 
    -328.813781738281), radius=40.0)
mdb.models['2DSPIRAL'].parts['FLGRF'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2DSPIRAL'].sketches['__edit__'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].parts['FLGRF'].regenerate()
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['FLGMIRROR'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['FLGMIRROR'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['FLGMIRROR'].features['Shell planar-1'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['FLGRF'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['FLGRF'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['FLGRF'].features['Shell planar-1'])
mdb.models['2DSPIRAL'].sketches['__edit__'].offset(distance=16.0, objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[31], ), side=LEFT)
mdb.models['2DSPIRAL'].sketches['__edit__'].offset(distance=16.0, objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[57], ), side=LEFT)
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[56], point1=(
    224.280166625977, -492.309234619141))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[59], point1=(
    335.957611083984, -518.966003417969))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[24], point1=(
    388.291839599609, -422.627532958984))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[61], point1=(
    387.725250244141, -344.840576171875))
mdb.models['2DSPIRAL'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[58], ))
mdb.models['2DSPIRAL'].parts['FLGRF'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2DSPIRAL'].sketches['__edit__'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].parts['FLGRF'].regenerate()
mdb.models['2DSPIRAL'].parts['FLGRF'].regenerate()
mdb.models['2DSPIRAL'].rootAssembly.regenerate()
mdb.models['2DSPIRAL'].rootAssembly.generateMesh(regions=(
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGMIRROR-1'], ))
mdb.models['2DSPIRAL'].rootAssembly.generateMesh(regions=(
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGMIRROR-1'], 
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGRF-1']))
mdb.models['2DSPIRAL'].rootAssembly.Set(edges=
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGRF-1'].edges.getSequenceFromMask(
    mask=('[#200 ]', ), )+\
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGMIRROR-1'].edges.getSequenceFromMask(
    mask=('[#20000 ]', ), ), name='Set-7')
mdb.models['2DSPIRAL'].boundaryConditions['BC-1'].setValues(region=
    mdb.models['2DSPIRAL'].rootAssembly.sets['Set-7'])
del mdb.models['2DSPIRAL'].rootAssembly.sets['PINNED']
mdb.models['2DSPIRAL'].boundaryConditions['BC-2'].suppress()
del mdb.models['2DSPIRAL'].boundaryConditions['BC-2']
mdb.models['2DSPIRAL'].boundaryConditions['BC-1'].setValues(typeName=PINNED)
mdb.jobs['Job-5'].submit(consistencyChecking=OFF)
mdb.jobs['Job-5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-5.odb', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 36544, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-5', 'memory': 25.0})
mdb.jobs['Job-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 14 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 7, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0625, 'attempts': 3, 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0625, 'step': 1, 
    'jobName': 'Job-5', 'severe': 9, 'iterations': 11, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.125, 'attempts': 1, 
    'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.125, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.21875, 'attempts': 1, 
    'timeIncrement': 0.09375, 'increment': 3, 'stepTime': 0.21875, 'step': 1, 
    'jobName': 'Job-5', 'severe': 5, 'iterations': 16, 'phase': STANDARD_PHASE, 
    'equilibrium': 11})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.21875, 'attempts': ' 1U', 
    'timeIncrement': 0.09375, 'increment': 4, 'stepTime': 0.21875, 'step': 1, 
    'jobName': 'Job-5', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.21875, 'attempts': ' 2U', 
    'timeIncrement': 0.0234375, 'increment': 4, 'stepTime': 0.21875, 'step': 1, 
    'jobName': 'Job-5', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.21875, 'attempts': ' 3U', 
    'timeIncrement': 0.005859375, 'increment': 4, 'stepTime': 0.21875, 
    'step': 1, 'jobName': 'Job-5', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.22021484375, 'attempts': 4, 
    'timeIncrement': 0.00146484375, 'increment': 4, 'stepTime': 0.22021484375, 
    'step': 1, 'jobName': 'Job-5', 'severe': 7, 'iterations': 10, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.2216796875, 'attempts': 1, 
    'timeIncrement': 0.00146484375, 'increment': 5, 'stepTime': 0.2216796875, 
    'step': 1, 'jobName': 'Job-5', 'severe': 4, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.2216796875, 
    'attempts': ' 1U', 'timeIncrement': 0.002197265625, 'increment': 6, 
    'stepTime': 0.2216796875, 'step': 1, 'jobName': 'Job-5', 'severe': 7, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.2216796875, 
    'attempts': ' 2U', 'timeIncrement': 0.00054931640625, 'increment': 6, 
    'stepTime': 0.2216796875, 'step': 1, 'jobName': 'Job-5', 'severe': 7, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 2 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.2216796875, 
    'attempts': ' 3U', 'timeIncrement': 0.0001373291015625, 'increment': 6, 
    'stepTime': 0.2216796875, 'step': 1, 'jobName': 'Job-5', 'severe': 7, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 2 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.2216796875, 
    'attempts': ' 4U', 'timeIncrement': 3.4332275390625e-05, 'increment': 6, 
    'stepTime': 0.2216796875, 'step': 1, 'jobName': 'Job-5', 'severe': 7, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 2 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Time increment required is less than the minimum specified', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.2216796875, 
    'attempts': ' 5U', 'timeIncrement': 1e-05, 'increment': 6, 
    'stepTime': 0.2216796875, 'step': 1, 'jobName': 'Job-5', 'severe': 6, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 2 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.2216796875, 
    'attempts': ' 6U', 'timeIncrement': 1e-35, 'increment': 6, 
    'stepTime': 0.2216796875, 'step': 1, 'jobName': 'Job-5', 'severe': 7, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-5'})
mdb.models['2DSPIRAL'].rootAssembly.Set(edges=
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGRF-1'].edges.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGMIRROR-1'].edges.getSequenceFromMask(
    mask=('[#400000 ]', ), ), name='Set-8')
mdb.models['2DSPIRAL'].XsymmBC(createStepName='Step-1', localCsys=None, name=
    'BC-2', region=mdb.models['2DSPIRAL'].rootAssembly.sets['Set-8'])
mdb.jobs['Job-5'].submit(consistencyChecking=OFF)
mdb.jobs['Job-5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-5.odb', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 25340, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-5', 'memory': 25.0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-5']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(JOB_COMPLETED, {'time': 'Sat Dec 01 14:39:05 2018', 
    'jobName': 'Job-5'})
mdb.models['2DSPIRAL'].boundaryConditions['BC-2'].suppress()
mdb.models['2DSPIRAL'].rootAssembly.Set(edges=
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGRF-1'].edges.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGMIRROR-1'].edges.getSequenceFromMask(
    mask=('[#400000 ]', ), ), name='Set-9')
mdb.models['2DSPIRAL'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-3', region=mdb.models['2DSPIRAL'].rootAssembly.sets['Set-9'], u1=0.0, 
    u2=UNSET, ur3=UNSET)
mdb.jobs['Job-5'].submit(consistencyChecking=OFF)
mdb.jobs['Job-5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-5.odb', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 33296, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-5', 'memory': 25.0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-5']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(JOB_COMPLETED, {'time': 'Sat Dec 01 14:42:05 2018', 
    'jobName': 'Job-5'})
mdb.models['2DSPIRAL'].boundaryConditions['BC-3'].setValues(u1=UNSET, ur3=0.0)
mdb.jobs['Job-5'].submit(consistencyChecking=OFF)
mdb.jobs['Job-5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-5.odb', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 32268, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-5', 'memory': 25.0})
mdb.jobs['Job-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 14 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 7, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0625, 'attempts': 3, 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0625, 'step': 1, 
    'jobName': 'Job-5', 'severe': 9, 'iterations': 11, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.125, 'attempts': 1, 
    'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.125, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.21875, 'attempts': 1, 
    'timeIncrement': 0.09375, 'increment': 3, 'stepTime': 0.21875, 'step': 1, 
    'jobName': 'Job-5', 'severe': 5, 'iterations': 16, 'phase': STANDARD_PHASE, 
    'equilibrium': 11})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.21875, 'attempts': ' 1U', 
    'timeIncrement': 0.09375, 'increment': 4, 'stepTime': 0.21875, 'step': 1, 
    'jobName': 'Job-5', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.21875, 'attempts': ' 2U', 
    'timeIncrement': 0.0234375, 'increment': 4, 'stepTime': 0.21875, 'step': 1, 
    'jobName': 'Job-5', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.21875, 'attempts': ' 3U', 
    'timeIncrement': 0.005859375, 'increment': 4, 'stepTime': 0.21875, 
    'step': 1, 'jobName': 'Job-5', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.22021484375, 'attempts': 4, 
    'timeIncrement': 0.00146484375, 'increment': 4, 'stepTime': 0.22021484375, 
    'step': 1, 'jobName': 'Job-5', 'severe': 7, 'iterations': 10, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.2216796875, 'attempts': 1, 
    'timeIncrement': 0.00146484375, 'increment': 5, 'stepTime': 0.2216796875, 
    'step': 1, 'jobName': 'Job-5', 'severe': 4, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.2216796875, 
    'attempts': ' 1U', 'timeIncrement': 0.002197265625, 'increment': 6, 
    'stepTime': 0.2216796875, 'step': 1, 'jobName': 'Job-5', 'severe': 7, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.2216796875, 
    'attempts': ' 2U', 'timeIncrement': 0.00054931640625, 'increment': 6, 
    'stepTime': 0.2216796875, 'step': 1, 'jobName': 'Job-5', 'severe': 7, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 2 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.2216796875, 
    'attempts': ' 3U', 'timeIncrement': 0.0001373291015625, 'increment': 6, 
    'stepTime': 0.2216796875, 'step': 1, 'jobName': 'Job-5', 'severe': 7, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 2 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.2216796875, 
    'attempts': ' 4U', 'timeIncrement': 3.4332275390625e-05, 'increment': 6, 
    'stepTime': 0.2216796875, 'step': 1, 'jobName': 'Job-5', 'severe': 7, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 2 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Time increment required is less than the minimum specified', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.2216796875, 
    'attempts': ' 5U', 'timeIncrement': 1e-05, 'increment': 6, 
    'stepTime': 0.2216796875, 'step': 1, 'jobName': 'Job-5', 'severe': 6, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-5']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 2 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.2216796875, 
    'attempts': ' 6U', 'timeIncrement': 1e-35, 'increment': 6, 
    'stepTime': 0.2216796875, 'step': 1, 'jobName': 'Job-5', 'severe': 7, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-5']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-5'})
mdb.models['2DSPIRAL'].boundaryConditions['BC-3'].setValues(u1=2.0, ur3=UNSET)
mdb.jobs['Job-5'].submit(consistencyChecking=OFF)
mdb.jobs['Job-5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-5.odb', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 14972, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-5', 'memory': 25.0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-5']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(JOB_COMPLETED, {'time': 'Sat Dec 01 14:49:57 2018', 
    'jobName': 'Job-5'})
mdb.models['2DSPIRAL'].boundaryConditions['BC-3'].setValues(u1=1.0)
mdb.jobs['Job-5'].submit(consistencyChecking=OFF)
mdb.jobs['Job-5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-5.odb', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 23220, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-5', 'memory': 25.0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-5']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(JOB_COMPLETED, {'time': 'Sat Dec 01 14:51:43 2018', 
    'jobName': 'Job-5'})
mdb.models['2DSPIRAL'].boundaryConditions['BC-3'].setValues(u1=0.0, ur3=0.0)
mdb.jobs['Job-5'].submit(consistencyChecking=OFF)
mdb.jobs['Job-5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-5.odb', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 29232, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-5', 'memory': 25.0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-5']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(JOB_COMPLETED, {'time': 'Sat Dec 01 14:53:34 2018', 
    'jobName': 'Job-5'})
mdb.models['2DSPIRAL'].loads['Load-1'].setValues(magnitude=310.3)
mdb.models['2DSPIRAL'].loads['Load-2'].setValues(magnitude=310.3)
mdb.jobs['Job-5'].submit(consistencyChecking=OFF)
mdb.jobs['Job-5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-5.odb', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 29844, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-5', 'memory': 25.0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-5']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(JOB_COMPLETED, {'time': 'Sat Dec 01 14:55:32 2018', 
    'jobName': 'Job-5'})
mdb.Model(name='2DSPIRAL-1', objectToCopy=mdb.models['2DSPIRAL'])
mdb.models['2DSPIRAL'].boundaryConditions['BC-3'].setValues(ur3=UNSET)
mdb.jobs['Job-5'].submit(consistencyChecking=OFF)
mdb.jobs['Job-5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-5.odb', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 32312, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-5', 'memory': 25.0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-5']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(JOB_COMPLETED, {'time': 'Sat Dec 01 14:59:19 2018', 
    'jobName': 'Job-5'})
mdb.models['2DSPIRAL'].boundaryConditions['BC-3'].setValues(ur3=0.0)
mdb.jobs['Job-5'].submit(consistencyChecking=OFF)
mdb.jobs['Job-5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-5.odb', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 34312, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-5', 'memory': 25.0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-5']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(JOB_COMPLETED, {'time': 'Sat Dec 01 15:01:16 2018', 
    'jobName': 'Job-5'})
mdb.models['2DSPIRAL-2'].loads['Load-1'].setValues(magnitude=318.0)
mdb.jobs['Job-5'].submit(consistencyChecking=OFF)
mdb.jobs['Job-5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-5.odb', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 31928, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-5', 'memory': 25.0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-5']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(JOB_COMPLETED, {'time': 'Sat Dec 01 15:02:55 2018', 
    'jobName': 'Job-5'})
mdb.models['2DSPIRAL-2'].loads['Load-1'].setValues(magnitude=310.0)
mdb.models['2DSPIRAL'].loads['Load-2'].setValues(magnitude=320.3)
mdb.models['2DSPIRAL'].loads['Load-1'].setValues(magnitude=320.3)
mdb.jobs['Job-5'].submit(consistencyChecking=OFF)
mdb.jobs['Job-5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-5.odb', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 12516, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-5', 'memory': 25.0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-5']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(JOB_COMPLETED, {'time': 'Sat Dec 01 15:04:28 2018', 
    'jobName': 'Job-5'})
mdb.models['2DSPIRAL'].loads['Load-1'].setValues(magnitude=310.3)
mdb.models['2DSPIRAL'].loads['Load-2'].setValues(magnitude=310.3)
mdb.jobs['Job-5'].submit(consistencyChecking=OFF)
mdb.jobs['Job-5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-5.odb', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 36520, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-5', 'memory': 25.0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-5']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(JOB_COMPLETED, {'time': 'Sat Dec 01 15:05:18 2018', 
    'jobName': 'Job-5'})
del mdb.models['2DSPIRAL-2']
mdb.models['2DSPIRAL-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].features['Shell planar-1'])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[13], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[23]))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[11], ))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].Line(point1=(539.950003051758, 
    -87.6467402854054), point2=(495.550003051758, -87.6467402854052))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[25])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[22], entity2=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[25])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].Line(point1=(524.050003051758, 
    -102.25), point2=(524.050003051758, -80.75))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[26])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[12], entity2=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[26])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[25], point1=(
    499.031494140625, -88.0135955810547))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[26], point1=(
    523.391662597656, -81.662353515625))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[15], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[20], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[21]))
mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2DSPIRAL-1'].sketches['__edit__'])
del mdb.models['2DSPIRAL-1'].sketches['__edit__']
mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].regenerate()
mdb.models['2DSPIRAL-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL-1'].parts['FLGRF'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL-1'].parts['FLGRF'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL-1'].parts['FLGRF'].features['Shell planar-1'])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].Line(point1=(387.5, 
    -349.103259714595), point2=(358.0, -349.103259714594))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[66])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[64], entity2=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[66])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[31], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[65]))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[27], ))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].Line(point1=(371.5, -334.5), 
    point2=(371.5, -365.950653076172))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[67])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[22], 
    entity2=mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[67])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[66], point1=(
    363.032897949219, -349.979675292969))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[67], point1=(
    371.339599609375, -360.262359619141))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[57], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[62], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[63], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].constraints[152]))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[22], point1=(
    368.323791503906, -270.914794921875))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[69], point1=(
    370.262817382813, -340.777709960938))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].Line(point1=(371.5, -114.5), 
    point2=(371.5, -349.103259714594))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[70])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[54], entity2=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[70])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[29], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[70]))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].Line(point1=(371.5, -114.5), 
    point2=(371.5, -349.103259714594))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[71])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[54], entity2=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[71])
mdb.models['2DSPIRAL-1'].parts['FLGRF'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2DSPIRAL-1'].sketches['__edit__'])
del mdb.models['2DSPIRAL-1'].sketches['__edit__']
mdb.models['2DSPIRAL-1'].parts['FLGRF'].regenerate()
mdb.models['2DSPIRAL-1'].rootAssembly.regenerate()
mdb.models['2DSPIRAL-1'].rootAssembly.generateMesh(regions=(
    mdb.models['2DSPIRAL-1'].rootAssembly.instances['FLGRF-1'], 
    mdb.models['2DSPIRAL-1'].rootAssembly.instances['FLGMIRROR-1']))
mdb.models['2DSPIRAL-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['2DSPIRAL-1'].rootAssembly.instances['FLGMIRROR-1'], 
    mdb.models['2DSPIRAL-1'].rootAssembly.instances['FLGRF-1']))
mdb.models['2DSPIRAL-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['2DSPIRAL-1'].rootAssembly.instances['FLGMIRROR-1'], 
    mdb.models['2DSPIRAL-1'].rootAssembly.instances['FLGRF-1']), size=5.0)
mdb.models['2DSPIRAL-1'].rootAssembly.generateMesh(regions=(
    mdb.models['2DSPIRAL-1'].rootAssembly.instances['FLGMIRROR-1'], 
    mdb.models['2DSPIRAL-1'].rootAssembly.instances['FLGRF-1']))
mdb.models['2DSPIRAL-1'].rootAssembly.Set(name='Set-10', nodes=
    mdb.models['2DSPIRAL-1'].rootAssembly.instances['FLGRF-1'].nodes.getSequenceFromMask(
    mask=('[#4000 #0:4 #30000 ]', ), ))
mdb.models['2DSPIRAL-1'].rootAssembly.sets.changeKey(fromName='Set-10', toName=
    'bottomedge')
mdb.models['2DSPIRAL-1'].rootAssembly.Set(name='Set-10', nodes=
    mdb.models['2DSPIRAL-1'].rootAssembly.instances['FLGMIRROR-1'].nodes.getSequenceFromMask(
    mask=('[#2000 #0:3 #600000 ]', ), ))
mdb.models['2DSPIRAL-1'].rootAssembly.sets.changeKey(fromName='Set-10', toName=
    'top edge')
mdb.models['2DSPIRAL-1'].rootAssembly.Set(edges=
    mdb.models['2DSPIRAL-1'].rootAssembly.instances['FLGMIRROR-1'].edges.getSequenceFromMask(
    ('[#50000 ]', ), ), name='Set-9')
mdb.models['2DSPIRAL-1'].rootAssembly.Set(edges=
    mdb.models['2DSPIRAL-1'].rootAssembly.instances['FLGMIRROR-1'].edges.getSequenceFromMask(
    mask=('[#50000 ]', ), )+\
    mdb.models['2DSPIRAL-1'].rootAssembly.instances['FLGRF-1'].edges.getSequenceFromMask(
    mask=('[#10 ]', ), ), name='Set-9')
mdb.models['2DSPIRAL-1'].boundaryConditions['BC-1'].setValues(region=
    mdb.models['2DSPIRAL-1'].rootAssembly.sets['top edge'])
mdb.models['2DSPIRAL-1'].BoundaryCondition(name='BC-1-Copy', objectToCopy=
    mdb.models['2DSPIRAL-1'].boundaryConditions['BC-1'], toStepName='Step-1')
del mdb.models['2DSPIRAL-1'].boundaryConditions['BC-2']
mdb.models['2DSPIRAL-1'].boundaryConditions.changeKey(fromName='BC-1-Copy', 
    toName='topedge')
mdb.models['2DSPIRAL-1'].boundaryConditions.changeKey(fromName='BC-1', toName=
    'bottomedge')
mdb.models['2DSPIRAL-1'].boundaryConditions.changeKey(fromName='bottomedge', 
    toName='toppin')
mdb.models['2DSPIRAL-1'].boundaryConditions['topedge'].setValues(region=
    mdb.models['2DSPIRAL-1'].rootAssembly.sets['bottomedge'])
mdb.models['2DSPIRAL-1'].boundaryConditions.changeKey(fromName='topedge', 
    toName='bottompin')
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='2DSPIRAL-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-9', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Job-9'].submit(consistencyChecking=OFF)
mdb.jobs['Job-9']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-9.odb', 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 30372, 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-9', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-9']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-9', 'memory': 29.0})
mdb.jobs['Job-9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-9', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-9']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(JOB_COMPLETED, {'time': 'Sat Dec 01 15:18:54 2018', 
    'jobName': 'Job-9'})
mdb.models['2DSPIRAL-1'].boundaryConditions['BC-3'].setValues(ur3=UNSET)
mdb.models['2DSPIRAL-1'].boundaryConditions['bottompin'].setValues(typeName=
    YSYMM)
mdb.models['2DSPIRAL-1'].boundaryConditions['toppin'].setValues(typeName=YSYMM)
mdb.jobs['Job-9'].submit(consistencyChecking=OFF)
mdb.jobs['Job-9']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-9.odb', 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 35548, 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-9', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-9']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-9', 'memory': 29.0})
mdb.jobs['Job-9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-9', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-9']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(JOB_COMPLETED, {'time': 'Sat Dec 01 15:20:38 2018', 
    'jobName': 'Job-9'})
mdb.models['2DSPIRAL-1'].boundaryConditions['toppin'].suppress()
mdb.jobs['Job-9'].submit(consistencyChecking=OFF)
mdb.jobs['Job-9']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-9.odb', 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 37596, 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-9', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-9']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-9', 'memory': 29.0})
mdb.jobs['Job-9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-9', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-9']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(JOB_COMPLETED, {'time': 'Sat Dec 01 15:21:36 2018', 
    'jobName': 'Job-9'})
mdb.models['2DSPIRAL-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].features['Shell planar-1'])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].FilletByRadius(curve1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[8], curve2=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[4], nearPoint1=(
    583.050659179688, -226.082473754883), nearPoint2=(593.179138183594, 
    -236.219482421875), radius=13.0)
mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2DSPIRAL-1'].sketches['__edit__'])
del mdb.models['2DSPIRAL-1'].sketches['__edit__']
mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].regenerate()
mdb.models['2DSPIRAL-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL-1'].parts['FLGRF'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL-1'].parts['FLGRF'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL-1'].parts['FLGRF'].features['Shell planar-1'])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].FilletByRadius(curve1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[11], curve2=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[4], nearPoint1=(
    432.371307373047, -210.20588684082), nearPoint2=(445.675445556641, 
    -200.060882568359), radius=13.0)
mdb.models['2DSPIRAL-1'].parts['FLGRF'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2DSPIRAL-1'].sketches['__edit__'])
del mdb.models['2DSPIRAL-1'].sketches['__edit__']
mdb.models['2DSPIRAL-1'].parts['FLGRF'].regenerate()
mdb.models['2DSPIRAL-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].features['Shell planar-1'])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].offset(distance=207.0, 
    objectList=(mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[17], ), 
    side=LEFT)
mdb.models['2DSPIRAL-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[9], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[28]))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[12], ))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[8], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[22], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[24], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].dimensions[2], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].constraints[60], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].constraints[61]))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].Line(point1=(539.950003051758, 
    -87.6467402854054), point2=(539.950003051758, -122.0))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[31])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[27], entity2=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[31])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].Line(point1=(524.050003051758, 
    -87.6467402854053), point2=(523.950003051758, -322.25))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[30], point1=(
    530.368408203125, -116.197647094727))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[34], point1=(
    551.492492675781, -115.351959228516))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].undo()
mdb.models['2DSPIRAL-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[31], point1=(
    539.662963867188, -118.311828613281))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].Line(point1=(378.050003051758, 
    -324.5), point2=(378.050003051757, -74.5))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[36])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].offset(distance=209.5, 
    objectList=(mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[36], ), 
    side=RIGHT)
mdb.models['2DSPIRAL-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[34], ))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[36], ))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[29], ))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[4], ))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].Line(point1=(682.950003051758, 
    -236.85), point2=(575.550003051758, -236.85))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[38])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[5], entity2=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[38])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[38], point1=(
    580.677124023438, -235.981201171875))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].Line(point1=(539.950003051758, 
    -115.25), point2=(587.550003051758, -236.85))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[37], ))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].FilletByRadius(curve1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[40], curve2=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[39], nearPoint1=(
    580.677124023438, -222.445892333984), nearPoint2=(594.201049804688, 
    -235.651062011719), radius=13.0)
mdb.models['2DSPIRAL-1'].sketches['__edit__'].FilletByRadius(curve1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[35], curve2=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[40], nearPoint1=(
    540.105285644531, -111.192291259766), nearPoint2=(540.765014648438, 
    -118.455139160156), radius=30.0)
mdb.models['2DSPIRAL-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[33], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].dimensions[5]))
mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2DSPIRAL-1'].sketches['__edit__'])
del mdb.models['2DSPIRAL-1'].sketches['__edit__']
mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].regenerate()
#* FeatureError: Regeneration failed
mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].backup()
mdb.models['2DSPIRAL-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL-1'].parts['FLGRF'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL-1'].parts['FLGRF'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL-1'].parts['FLGRF'].features['Shell planar-1'])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].Line(point1=(225.5, -112.25), 
    point2=(225.6, -326.035766601563))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].vertices[75], entity2=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[55])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].offset(distance=209.5, 
    objectList=(mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[73], ), 
    side=LEFT)
mdb.models['2DSPIRAL-1'].sketches['__edit__'].offset(distance=207.0, 
    objectList=(mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[54], ), 
    side=RIGHT)
mdb.models['2DSPIRAL-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[11], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[4], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[11], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[72], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].constraints[210], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].constraints[210]))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].Line(point1=(530.5, -199.9), 
    point2=(399.713653564453, -199.9))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[76])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[5], entity2=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[76])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[76], point1=(
    402.681427001953, -198.756896972656))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].dimensions[3], ))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[60], ))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[64], ))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].offset(distance=16.0, objectList=
    (mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[71], ), side=LEFT)
mdb.models['2DSPIRAL-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[78], point1=(
    384.865295410156, -294.934387207031))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[75], point1=(
    381.885406494141, -321.776092529297))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[80], point1=(
    397.281616210938, -322.273132324219))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].Line(point1=(435.041021906669, 
    -199.9), point2=(387.5, -321.5))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[74], ))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].FilletByRadius(curve1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[79], curve2=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[81], nearPoint1=(
    384.865295410156, -332.711608886719), nearPoint2=(388.838500976563, 
    -313.822998046875), radius=30.0)
mdb.models['2DSPIRAL-1'].sketches['__edit__'].FilletByRadius(curve1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[81], curve2=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[77], nearPoint1=(
    427.577331542969, -217.888717651367), nearPoint2=(447.443389892578, 
    -199.000091552734), radius=13.0)
mdb.models['2DSPIRAL-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[73], ))
mdb.models['2DSPIRAL-1'].parts['FLGRF'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2DSPIRAL-1'].sketches['__edit__'])
del mdb.models['2DSPIRAL-1'].sketches['__edit__']
mdb.models['2DSPIRAL-1'].parts['FLGRF'].regenerate()
#* FeatureError: Regeneration failed
mdb.models['2DSPIRAL-1'].parts['FLGRF'].backup()
mdb.models['2DSPIRAL-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].features['Partition face-1'].sketch)
mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].features['Partition face-1'])
del mdb.models['2DSPIRAL-1'].sketches['__edit__']
mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].regenerate()
mdb.models['2DSPIRAL-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].features['Partition face-1'].sketch)
mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].features['Partition face-1'])
del mdb.models['2DSPIRAL-1'].sketches['__edit__']
mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].regenerate()
mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].features['Partition face-1'].suppress(
    )
mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].features['Partition face-1'].resume(
    )
#* FeatureError: Regeneration failed
mdb.models['2DSPIRAL-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].features['Partition face-1'].sketch)
mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].features['Partition face-1'])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].Line(point1=(92.291414051758, 
    -133.452858), point2=(92.2914140517583, -84.63))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[37])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[24], 
    entity2=mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[37])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].Line(point1=(100.291414051758, 
    -133.452858), point2=(100.291414051758, -91.14))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[38])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[23], 
    entity2=mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[38])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].Line(point1=(138.391414051758, 
    -133.452858), point2=(138.391414051758, -91.14))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[39])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[22], 
    entity2=mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[39])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].Line(point1=(146.391414051758, 
    -133.452858), point2=(146.391414051758, -97.65))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[40])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[25], 
    entity2=mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[40])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[25], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[22], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[23], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[24]))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].Line(point1=(92.291414051758, 
    -133.452858), point2=(92.291414051758, -212.852857999985))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[41])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[37], 
    entity2=mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[41])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].vertices[51], entity2=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[26])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].Line(point1=(100.291414051758, 
    -133.452858), point2=(100.291414051758, -212.852857999985))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[42])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[38], 
    entity2=mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[42])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].vertices[52], entity2=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[26])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].vertices[34], entity2=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].vertices[35], midpoint=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].vertices[52])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].Line(point1=(138.391414051758, 
    -133.452858), point2=(138.391414051758, -212.852857999985))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[43])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[39], 
    entity2=mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[43])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].vertices[53], entity2=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[26])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].Line(point1=(146.391414051758, 
    -133.452858), point2=(146.391414051758, -212.852857999985))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[44])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[40], 
    entity2=mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[44])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].vertices[54], entity2=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[26])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[37], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[38], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[39], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[40], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].constraints[132], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].constraints[136], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].constraints[140], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].constraints[144], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].constraints[149], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].constraints[154], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].constraints[160], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].constraints[165]))
mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].features['Partition face-1'].setValues(
    sketch=mdb.models['2DSPIRAL-1'].sketches['__edit__'])
del mdb.models['2DSPIRAL-1'].sketches['__edit__']
mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].regenerate()
#* FeatureError: Regeneration failed
mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].backup()
mdb.models['2DSPIRAL-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].features['Partition face-1'].sketch)
mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].features['Partition face-1'])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].Line(point1=(146.391414051758, 
    -133.452858), point2=(157.541414051758, -133.452858))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[56])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[44], entity2=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[56])
mdb.models['2DSPIRAL-1'].ConstrainedSketch(name='topcut', objectToCopy=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'])
mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].features['Partition face-1'].setValues(
    sketch=mdb.models['2DSPIRAL-1'].sketches['__edit__'])
del mdb.models['2DSPIRAL-1'].sketches['__edit__']
mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].regenerate()
#* FeatureError: Regeneration failed
mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].backup()
del mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].features['Partition face-1']
mdb.models['2DSPIRAL-1'].ConstrainedSketch(gridSpacing=31.97, name=
    '__profile__', sheetSize=1278.96, transform=
    mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].MakeSketchTransform(
    sketchPlane=mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].faces[0], 
    sketchPlaneSide=SIDE1, sketchOrientation=RIGHT, origin=(585.66799, 
    -249.413219, 0.0)))
mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL-1'].sketches['__profile__'])
mdb.models['2DSPIRAL-1'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['2DSPIRAL-1'].sketches['topcut'])
mdb.models['2DSPIRAL-1'].sketches['__profile__'].move(objectList=(
    mdb.models['2DSPIRAL-1'].sketches['__profile__'].geometry[15], 
    mdb.models['2DSPIRAL-1'].sketches['__profile__'].geometry[16], 
    mdb.models['2DSPIRAL-1'].sketches['__profile__'].geometry[17], 
    mdb.models['2DSPIRAL-1'].sketches['__profile__'].geometry[18], 
    mdb.models['2DSPIRAL-1'].sketches['__profile__'].geometry[19]), vector=(
    -60.259401, 146.016077))
mdb.models['2DSPIRAL-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['2DSPIRAL-1'].sketches['__profile__'].constraints[65], ))
mdb.models['2DSPIRAL-1'].sketches['__profile__'].undo()
mdb.models['2DSPIRAL-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['2DSPIRAL-1'].sketches['__profile__'].geometry[4], 
    mdb.models['2DSPIRAL-1'].sketches['__profile__'].geometry[19]))
mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].PartitionFaceBySketch(faces=
    mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].faces.getSequenceFromMask((
    '[#1 ]', ), ), sketch=mdb.models['2DSPIRAL-1'].sketches['__profile__'])
del mdb.models['2DSPIRAL-1'].sketches['__profile__']
mdb.models['2DSPIRAL-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL-1'].parts['FLGRF'].features['Partition face-1'].sketch)
mdb.models['2DSPIRAL-1'].parts['FLGRF'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL-1'].parts['FLGRF'].features['Partition face-1'])
del mdb.models['2DSPIRAL-1'].sketches['__edit__']
mdb.models['2DSPIRAL-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL-1'].parts['FLGRF'].features['Partition face-1'].sketch)
mdb.models['2DSPIRAL-1'].parts['FLGRF'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL-1'].parts['FLGRF'].features['Partition face-1'])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[16], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[12], 
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[13]))
mdb.models['2DSPIRAL-1'].parts['FLGRF'].features['Partition face-1'].setValues(
    sketch=mdb.models['2DSPIRAL-1'].sketches['__edit__'])
del mdb.models['2DSPIRAL-1'].sketches['__edit__']
mdb.models['2DSPIRAL-1'].parts['FLGRF'].regenerate()
#* FeatureError: Regeneration failed
mdb.models['2DSPIRAL-1'].parts['FLGRF'].backup()
mdb.models['2DSPIRAL-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL-1'].parts['FLGRF'].features['Partition face-1'].sketch)
mdb.models['2DSPIRAL-1'].parts['FLGRF'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL-1'].parts['FLGRF'].features['Partition face-1'])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].Line(point1=(146.330441, 
    212.892875), point2=(157.580441, 212.892875))
mdb.models['2DSPIRAL-1'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[54])
mdb.models['2DSPIRAL-1'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[31], entity2=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'].geometry[54])
mdb.models['2DSPIRAL-1'].ConstrainedSketch(name='bottomcut', objectToCopy=
    mdb.models['2DSPIRAL-1'].sketches['__edit__'])
mdb.models['2DSPIRAL-1'].parts['FLGRF'].features['Partition face-1'].setValues(
    sketch=mdb.models['2DSPIRAL-1'].sketches['__edit__'])
del mdb.models['2DSPIRAL-1'].sketches['__edit__']
del mdb.models['2DSPIRAL-1'].parts['FLGRF'].features['Partition face-1']
mdb.models['2DSPIRAL-1'].ConstrainedSketch(gridSpacing=22.88, name=
    '__profile__', sheetSize=915.53, transform=
    mdb.models['2DSPIRAL-1'].parts['FLGRF'].MakeSketchTransform(
    sketchPlane=mdb.models['2DSPIRAL-1'].parts['FLGRF'].faces[0], 
    sketchPlaneSide=SIDE1, sketchOrientation=RIGHT, origin=(433.180935, 
    -187.380178, 0.0)))
mdb.models['2DSPIRAL-1'].parts['FLGRF'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL-1'].sketches['__profile__'])
mdb.models['2DSPIRAL-1'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['2DSPIRAL-1'].sketches['bottomcut'])
mdb.models['2DSPIRAL-1'].sketches['__profile__'].copyMove(objectList=(
    mdb.models['2DSPIRAL-1'].sketches['__profile__'].geometry[15], 
    mdb.models['2DSPIRAL-1'].sketches['__profile__'].geometry[16], 
    mdb.models['2DSPIRAL-1'].sketches['__profile__'].geometry[17], 
    mdb.models['2DSPIRAL-1'].sketches['__profile__'].geometry[18]), vector=(
    -60.261376, -146.012697))
mdb.models['2DSPIRAL-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['2DSPIRAL-1'].sketches['__profile__'].geometry[15], 
    mdb.models['2DSPIRAL-1'].sketches['__profile__'].geometry[16], 
    mdb.models['2DSPIRAL-1'].sketches['__profile__'].geometry[17], 
    mdb.models['2DSPIRAL-1'].sketches['__profile__'].geometry[18], 
    mdb.models['2DSPIRAL-1'].sketches['__profile__'].geometry[19], 
    mdb.models['2DSPIRAL-1'].sketches['__profile__'].constraints[60], 
    mdb.models['2DSPIRAL-1'].sketches['__profile__'].constraints[61]))
mdb.models['2DSPIRAL-1'].parts['FLGRF'].PartitionFaceBySketch(faces=
    mdb.models['2DSPIRAL-1'].parts['FLGRF'].faces.getSequenceFromMask(('[#1 ]', 
    ), ), sketch=mdb.models['2DSPIRAL-1'].sketches['__profile__'])
del mdb.models['2DSPIRAL-1'].sketches['__profile__']
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['2DSPIRAL-1'].parts['FLGRF'].regenerate()
mdb.models['2DSPIRAL-1'].rootAssembly.regenerate()
mdb.models['2DSPIRAL-1'].rootAssembly.generateMesh(regions=(
    mdb.models['2DSPIRAL-1'].rootAssembly.instances['FLGRF-1'], 
    mdb.models['2DSPIRAL-1'].rootAssembly.instances['FLGMIRROR-1']))
mdb.models['2DSPIRAL-1'].rootAssembly.Set(name='bottomedge', nodes=
    mdb.models['2DSPIRAL-1'].rootAssembly.instances['FLGRF-1'].nodes.getSequenceFromMask(
    mask=('[#4000 #0:4 #60000 ]', ), ))
mdb.models['2DSPIRAL-1'].rootAssembly.Set(name='top edge', nodes=
    mdb.models['2DSPIRAL-1'].rootAssembly.instances['FLGMIRROR-1'].nodes.getSequenceFromMask(
    mask=('[#4000 #0:3 #60000 ]', ), ))
mdb.jobs['Job-9'].submit(consistencyChecking=OFF)
mdb.jobs['Job-9']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-9'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-9']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'SURFACE DEFINITION ASSEMBLY_SURF-6 NOT FOUND.', 
    'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'SURFACE DEFINITION ASSEMBLY_SURF-7 NOT FOUND.', 
    'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '1602 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SURFACE ASSEMBLY_SURF-6 HAS NOT BEEN LOCATED', 
    'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SURFACE ASSEMBLY_SURF-7 HAS NOT BEEN LOCATED', 
    'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-9.odb', 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-9'})
mdb.models['2DSPIRAL-1'].rootAssembly.Set(edges=
    mdb.models['2DSPIRAL-1'].rootAssembly.instances['FLGMIRROR-1'].edges.getSequenceFromMask(
    ('[#80 ]', ), ), name='Set-9')
mdb.models['2DSPIRAL-1'].boundaryConditions['bottompin'].setValues(typeName=
    ZASYMM)
mdb.models['2DSPIRAL-1'].rootAssembly.Set(edges=
    mdb.models['2DSPIRAL-1'].rootAssembly.instances['FLGMIRROR-1'].edges.getSequenceFromMask(
    mask=('[#80 ]', ), )+\
    mdb.models['2DSPIRAL-1'].rootAssembly.instances['FLGRF-1'].edges.getSequenceFromMask(
    mask=('[#10 ]', ), ), name='Set-9')
mdb.models['2DSPIRAL-1'].rootAssembly.Set(edges=
    mdb.models['2DSPIRAL-1'].rootAssembly.instances['FLGRF-1'].edges.getSequenceFromMask(
    ('[#88000 ]', ), ), name='Set-7')
mdb.models['2DSPIRAL-1'].rootAssembly.Set(edges=
    mdb.models['2DSPIRAL-1'].rootAssembly.instances['FLGMIRROR-1'].edges.getSequenceFromMask(
    ('[#402000 ]', ), ), name='Set-5')
mdb.models['2DSPIRAL-1'].rootAssembly.Set(edges=
    mdb.models['2DSPIRAL-1'].rootAssembly.instances['FLGMIRROR-1'].edges.getSequenceFromMask(
    ('[#402000 ]', ), ), name='Set-8')
mdb.models['2DSPIRAL-1'].rootAssembly.Surface(name='Surf-8', side1Edges=
    mdb.models['2DSPIRAL-1'].rootAssembly.instances['FLGMIRROR-1'].edges.getSequenceFromMask(
    ('[#402000 ]', ), ))
mdb.models['2DSPIRAL-1'].loads['Load-1'].setValues(region=
    mdb.models['2DSPIRAL-1'].rootAssembly.surfaces['Surf-8'])
mdb.models['2DSPIRAL-1'].rootAssembly.Surface(name='Surf-9', side1Edges=
    mdb.models['2DSPIRAL-1'].rootAssembly.instances['FLGRF-1'].edges.getSequenceFromMask(
    ('[#88000 ]', ), ))
mdb.models['2DSPIRAL-1'].loads['Load-2'].setValues(region=
    mdb.models['2DSPIRAL-1'].rootAssembly.surfaces['Surf-9'])
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-9'].submit(consistencyChecking=OFF)
mdb.jobs['Job-9']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '1602 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-9.odb', 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-9'})
mdb.models['2DSPIRAL-1'].rootAssembly.Surface(name='m_Surf-5', side1Edges=
    mdb.models['2DSPIRAL-1'].rootAssembly.instances['FLGMIRROR-1'].edges.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['2DSPIRAL-1'].rootAssembly.Surface(name='s_Surf-3', side1Edges=
    mdb.models['2DSPIRAL-1'].rootAssembly.instances['GASKET-1'].edges.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['2DSPIRAL-1'].rootAssembly.Surface(name='Surf-10', side1Edges=
    mdb.models['2DSPIRAL-1'].rootAssembly.instances['GASKET-1'].edges.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['2DSPIRAL-1'].rootAssembly.surfaces.changeKey(fromName='Surf-10', 
    toName='Surf-10b')
mdb.jobs['Job-9'].submit(consistencyChecking=OFF)
mdb.jobs['Job-9']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '1602 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-9.odb', 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-9'})
mdb.models['2DSPIRAL-1'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=CPS4, elemLibrary=STANDARD), ElemType(elemCode=CPS3, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['2DSPIRAL-1'].rootAssembly.instances['FLGMIRROR-1'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['2DSPIRAL-1'].rootAssembly.instances['FLGRF-1'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), ), ))
mdb.jobs['Job-9'].submit(consistencyChecking=OFF)
mdb.jobs['Job-9']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '1602 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-9.odb', 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-9'})
mdb.models['2DSPIRAL-1'].parts['FLGRF'].Set(faces=
    mdb.models['2DSPIRAL-1'].parts['FLGRF'].faces.getSequenceFromMask((
    '[#1f ]', ), ), name='Set-2')
mdb.models['2DSPIRAL-1'].parts['FLGRF'].sectionAssignments[0].setValues(region=
    mdb.models['2DSPIRAL-1'].parts['FLGRF'].sets['Set-2'])
mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].Set(faces=
    mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].faces.getSequenceFromMask((
    '[#1f ]', ), ), name='Set-2')
mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].sectionAssignments[0].setValues(
    region=mdb.models['2DSPIRAL-1'].parts['FLGMIRROR'].sets['Set-2'])
mdb.models['2DSPIRAL-1'].rootAssembly.regenerate()
mdb.models['2DSPIRAL-1'].interactions['Int-1'].setValues(adjustMethod=NONE, 
    bondingSet=None, enforcement=NODE_TO_SURFACE, initialClearance=OMIT, 
    sliding=SMALL, smooth=0.2, supplementaryContact=SELECTIVE, 
    surfaceSmoothing=NONE, thickness=ON)
mdb.models['2DSPIRAL-1'].rootAssembly.Set(edges=
    mdb.models['2DSPIRAL-1'].rootAssembly.instances['GASKET-1'].edges.getSequenceFromMask(
    ('[#8 ]', ), ), name='s_Set-12')
mdb.models['2DSPIRAL-1'].interactions['Int-2'].setValues(adjustMethod=NONE, 
    bondingSet=None, enforcement=NODE_TO_SURFACE, initialClearance=OMIT, slave=
    mdb.models['2DSPIRAL-1'].rootAssembly.sets['s_Set-12'], sliding=SMALL, 
    smooth=0.2, supplementaryContact=SELECTIVE, surfaceSmoothing=NONE, 
    thickness=ON)
mdb.jobs['Job-9'].submit(consistencyChecking=OFF)
mdb.jobs['Job-9']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-9.odb', 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 22256, 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-9', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-9']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-9', 'memory': 28.0})
mdb.jobs['Job-9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-9', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-9']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-9'})
mdb.jobs['Job-9']._Message(JOB_COMPLETED, {'time': 'Sat Dec 01 16:00:58 2018', 
    'jobName': 'Job-9'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['FLGMIRROR'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['FLGMIRROR'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['FLGMIRROR'].features['Shell planar-1'])
mdb.models['2DSPIRAL'].sketches['__edit__'].offset(distance=207.0, objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[17], ), side=LEFT)
mdb.models['2DSPIRAL'].sketches['__edit__'].offset(distance=16.0, objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[9], ), side=RIGHT)
mdb.models['2DSPIRAL'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[8], ))
mdb.models['2DSPIRAL'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[24], ))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[26], point1=(
    540.396789550781, -151.171691894531))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[25], point1=(
    559.001708984375, -114.861633300781))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[27], point1=(
    541.327026367188, -107.413421630859))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[22], point1=(
    540.164245605469, -94.3790435791016))
mdb.models['2DSPIRAL'].sketches['__edit__'].Line(point1=(539.950003051758, 
    -87.6467402854054), point2=(539.950003051758, -115.25))
mdb.models['2DSPIRAL'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[29])
mdb.models['2DSPIRAL'].sketches['__edit__'].Line(point1=(539.950003051758, 
    -115.25), point2=(587.450003051758, -236.85))
mdb.models['2DSPIRAL'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[28], ))
mdb.models['2DSPIRAL'].parts['FLGMIRROR'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2DSPIRAL'].sketches['__edit__'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].parts['FLGMIRROR'].regenerate()
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['FLGMIRROR'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['FLGMIRROR'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['FLGMIRROR'].features['Shell planar-1'])
mdb.models['2DSPIRAL'].sketches['__edit__'].FilletByRadius(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[4], curve2=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[30], nearPoint1=(
    593.71533203125, -237.787826538086), nearPoint2=(582.9208984375, 
    -228.28076171875), radius=13.0)
mdb.models['2DSPIRAL'].sketches['__edit__'].FilletByRadius(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[30], curve2=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[29], nearPoint1=(
    542.333984375, -124.567329406738), nearPoint2=(541.902221679688, 
    -108.146034240723), radius=30.0)
mdb.models['2DSPIRAL'].parts['FLGMIRROR'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2DSPIRAL'].sketches['__edit__'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].parts['FLGMIRROR'].regenerate()
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['FLGRF'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['FLGRF'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['FLGRF'].features['Shell planar-1'])
mdb.models['2DSPIRAL'].sketches['__edit__'].offset(distance=207.0, objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[54], ), side=RIGHT)
mdb.models['2DSPIRAL'].sketches['__edit__'].offset(distance=16.0, objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[22], ), side=LEFT)
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[66], point1=(
    412.494995117188, -322.344635009766))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[11], point1=(
    407.218963623047, -284.975036621094))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[68], point1=(
    391.390808105469, -321.938415527344))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[67], point1=(
    390.984985351563, -323.563201904297))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[69], point1=(
    391.796661376953, -322.344635009766))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[60], point1=(
    390.984985351563, -329.249877929688))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[64], point1=(
    387.332336425781, -343.872741699219))
mdb.models['2DSPIRAL'].sketches['__edit__'].Line(point1=(387.5, 
    -349.103259714595), point2=(387.5, -321.5))
mdb.models['2DSPIRAL'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[72])
mdb.models['2DSPIRAL'].sketches['__edit__'].Line(point1=(387.5, -321.5), 
    point2=(435.0, -199.9))
mdb.models['2DSPIRAL'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[71], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[70]))
mdb.models['2DSPIRAL'].parts['FLGRF'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2DSPIRAL'].sketches['__edit__'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].parts['FLGRF'].regenerate()
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['FLGRF'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['FLGRF'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['FLGRF'].features['Shell planar-1'])
mdb.models['2DSPIRAL'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[22], 
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[27]))
mdb.models['2DSPIRAL'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[29], ))
mdb.models['2DSPIRAL'].sketches['__edit__'].Line(point1=(371.5, -114.5), 
    point2=(371.6, -344.500002344225))
mdb.models['2DSPIRAL'].sketches['__edit__'].FilletByRadius(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[72], curve2=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[73], nearPoint1=(
    381.547241210938, -334.828369140625), nearPoint2=(390.218292236328, 
    -308.00439453125), radius=30.0)
mdb.models['2DSPIRAL'].sketches['__edit__'].FilletByRadius(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[73], curve2=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[4], nearPoint1=(
    428.0556640625, -219.642959594727), nearPoint2=(454.06884765625, 
    -199.919418334961), radius=13.0)
mdb.models['2DSPIRAL'].parts['FLGRF'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2DSPIRAL'].sketches['__edit__'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].parts['FLGRF'].regenerate()
mdb.models['2DSPIRAL'].parts['FLGRF'].regenerate()
mdb.models['2DSPIRAL'].rootAssembly.regenerate()
mdb.models['2DSPIRAL'].rootAssembly.Set(edges=
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGMIRROR-1'].edges.getSequenceFromMask(
    mask=('[#800000 ]', ), )+\
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGRF-1'].edges.getSequenceFromMask(
    mask=('[#10 ]', ), ), name='Set-10')
mdb.models['2DSPIRAL'].boundaryConditions['BC-3'].setValues(region=
    mdb.models['2DSPIRAL'].rootAssembly.sets['Set-10'])
mdb.models['2DSPIRAL-1'].rootAssembly.Surface(name='m_Surf-11', side1Edges=
    mdb.models['2DSPIRAL-1'].rootAssembly.instances['FLGMIRROR-1'].edges.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['2DSPIRAL-1'].rootAssembly.Set(edges=
    mdb.models['2DSPIRAL-1'].rootAssembly.instances['GASKET-1'].edges.getSequenceFromMask(
    ('[#8 ]', ), ), name='s_Set-13')
mdb.models['2DSPIRAL-1'].interactions['Int-2'].setValues(adjustMethod=NONE, 
    bondingSet=None, enforcement=NODE_TO_SURFACE, initialClearance=OMIT, 
    master=mdb.models['2DSPIRAL-1'].rootAssembly.surfaces['m_Surf-11'], slave=
    mdb.models['2DSPIRAL-1'].rootAssembly.sets['s_Set-13'], sliding=SMALL, 
    smooth=0.2, supplementaryContact=SELECTIVE, thickness=ON)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['2DSPIRAL'].rootAssembly.deleteMesh(regions=(
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGRF-1'], 
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGMIRROR-1']))
mdb.models['2DSPIRAL'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGRF-1'], 
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGMIRROR-1']), size=5.0)
mdb.models['2DSPIRAL'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=CPS4, elemLibrary=STANDARD), ElemType(elemCode=CPS3, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGRF-1'].faces.getSequenceFromMask(
    mask=('[#1f ]', ), )+\
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGMIRROR-1'].faces.getSequenceFromMask(
    mask=('[#1f ]', ), ), ))
mdb.models['2DSPIRAL'].rootAssembly.generateMesh(regions=(
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGRF-1'], 
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGMIRROR-1']))
mdb.jobs['Job-5'].submit(consistencyChecking=OFF)
mdb.jobs['Job-5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-5.odb', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 36100, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-5', 'memory': 30.0})
mdb.jobs['Job-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-5', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-5']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-5'})
mdb.jobs['Job-5']._Message(JOB_COMPLETED, {'time': 'Sat Dec 01 16:20:08 2018', 
    'jobName': 'Job-5'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['2D MODEL RTJ-Copy']
del mdb.models['Model-RF']
del mdb.models['Model-RTJ']
del mdb.models['x2D MODEL RTJ']
del mdb.jobs['2dmodelrtj']
del mdb.jobs['FLANGERTJ']
del mdb.jobs['FlangeRF']
del mdb.jobs['Job-4']
mdb.jobs.changeKey(fromName='Job-5', toName='TWODWITHCAP')
mdb.jobs.changeKey(fromName='Job-9', toName='TWODRFWOCAP')
mdb.jobs.changeKey(fromName='TWODWITHCAP', toName='TWODRFWITHCAP')
mdb.jobs['TWODRFWITHCAP'].submit(consistencyChecking=OFF)
mdb.jobs['TWODRFWITHCAP']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\TWODRFWITHCAP.odb', 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 8308, 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWODRFWITHCAP', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['TWODRFWITHCAP']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'TWODRFWITHCAP', 'memory': 30.0})
mdb.jobs['TWODRFWITHCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'TWODRFWITHCAP', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['TWODRFWITHCAP']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 01 16:41:40 2018', 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWOCAP'].submit(consistencyChecking=OFF)
mdb.jobs['TWODRFWOCAP']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\TWODRFWOCAP.odb', 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 29472, 
    'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWODRFWOCAP', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['TWODRFWOCAP']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'TWODRFWOCAP', 'memory': 28.0})
mdb.jobs['TWODRFWOCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'TWODRFWOCAP', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['TWODRFWOCAP']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 01 16:42:01 2018', 'jobName': 'TWODRFWOCAP'})
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['FLGMIRROR'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['FLGMIRROR'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['FLGMIRROR'].features['Shell planar-1'])
mdb.models['2DSPIRAL'].sketches['__edit__'].dimensions[3].setValues(value=16)
mdb.models['2DSPIRAL'].sketches['__edit__'].undo()
mdb.models['2DSPIRAL'].sketches['__edit__'].Line(point1=(378.050003051758, 
    -324.5), point2=(378.050003051758, -312.268859863281))
mdb.models['2DSPIRAL'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[33])
mdb.models['2DSPIRAL'].sketches['__edit__'].undo()
mdb.models['2DSPIRAL'].sketches['__edit__'].Line(point1=(378.050003051758, 
    -324.5), point2=(378.050003051758, -39.5))
mdb.models['2DSPIRAL'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[33])
mdb.models['2DSPIRAL'].sketches['__edit__'].offset(distance=209.5, objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[33], ), side=RIGHT)
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[30], point1=(
    560.302185058594, -176.814300537109))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[31], point1=(
    584.837524414063, -233.784210205078))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[35], point1=(
    592.57568359375, -236.348480224609))
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[4], point1=(
    603.98779296875, -235.940551757813))
mdb.models['2DSPIRAL'].sketches['__edit__'].Line(point1=(682.950003051758, 
    -236.85), point2=(558.050003051758, -236.85))
mdb.models['2DSPIRAL'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[36])
mdb.models['2DSPIRAL'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[5], entity2=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[36])
mdb.models['2DSPIRAL'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[36], point1=(
    566.490966796875, -235.124725341797))
mdb.models['2DSPIRAL'].sketches['__edit__'].Line(point1=(542.006281401785, 
    -120.514072576069), point2=(587.550003051758, -236.85))
mdb.models['2DSPIRAL'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[34], ))
mdb.models['2DSPIRAL'].sketches['__edit__'].FilletByRadius(curve1=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[38], curve2=
    mdb.models['2DSPIRAL'].sketches['__edit__'].geometry[37], nearPoint1=(
    577.495483398438, -215.136810302734), nearPoint2=(603.98779296875, 
    -236.348480224609), radius=23.0)
mdb.models['2DSPIRAL'].sketches['__edit__'].dimensions[5].setValues(value=30)
mdb.models['2DSPIRAL'].sketches['__edit__'].undo()
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].boundaryConditions['BC-1'].setValues(typeName=XSYMM)
mdb.jobs['TWODRFWITHCAP'].submit(consistencyChecking=OFF)
mdb.jobs['TWODRFWITHCAP']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\TWODRFWITHCAP.odb', 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 3776, 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWODRFWITHCAP', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['TWODRFWITHCAP']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'TWODRFWITHCAP', 'memory': 30.0})
mdb.jobs['TWODRFWITHCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'TWODRFWITHCAP', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['TWODRFWITHCAP']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 01 16:52:25 2018', 'jobName': 'TWODRFWITHCAP'})
mdb.models['2DSPIRAL'].rootAssembly.deleteMesh(regions=(
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGMIRROR-1'], 
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGRF-1']))
mdb.models['2DSPIRAL'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGMIRROR-1'], 
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGRF-1']), size=2.0)
mdb.models['2DSPIRAL'].rootAssembly.generateMesh(regions=(
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGRF-1'], 
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGMIRROR-1']))
mdb.jobs['TWODRFWITHCAP'].submit(consistencyChecking=OFF)
mdb.jobs['TWODRFWITHCAP']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\TWODRFWITHCAP.odb', 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 36112, 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWODRFWITHCAP', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['TWODRFWITHCAP']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'TWODRFWITHCAP', 'memory': 79.0})
mdb.jobs['TWODRFWITHCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'TWODRFWITHCAP', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['TWODRFWITHCAP']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 01 16:56:37 2018', 'jobName': 'TWODRFWITHCAP'})
mdb.models['2DSPIRAL'].rootAssembly.deleteMesh(regions=(
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGMIRROR-1'], 
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGRF-1']))
mdb.models['2DSPIRAL'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGMIRROR-1'], 
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGRF-1']), size=11.5)
mdb.jobs['TWODRFWITHCAP'].submit(consistencyChecking=OFF)
mdb.jobs['TWODRFWITHCAP']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'in keyword *BOUNDARY, file "TWODRFWITHCAP.inp", line 341: Unknown assembly node set SET-7', 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'in keyword *BOUNDARY, file "TWODRFWITHCAP.inp", line 344: Unknown assembly node set SET-10', 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'in keyword *BOUNDARY, file "TWODRFWITHCAP.inp", line 344: Unknown assembly node set SET-10', 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(INTERRUPTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'TWODRFWITHCAP'})
mdb.models['2DSPIRAL'].rootAssembly.generateMesh(regions=(
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGMIRROR-1'], 
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGRF-1']))
mdb.jobs['TWODRFWITHCAP'].submit(consistencyChecking=OFF)
mdb.jobs['TWODRFWITHCAP']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\TWODRFWITHCAP.odb', 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 32936, 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWODRFWITHCAP', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['TWODRFWITHCAP']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'TWODRFWITHCAP', 'memory': 25.0})
mdb.jobs['TWODRFWITHCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'TWODRFWITHCAP', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['TWODRFWITHCAP']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 01 17:00:47 2018', 'jobName': 'TWODRFWITHCAP'})
mdb.models['2DSPIRAL'].boundaryConditions['BC-1'].suppress()
mdb.models['2DSPIRAL'].boundaryConditions['BC-3'].suppress()
mdb.models['2DSPIRAL'].boundaryConditions['BC-3'].resume()
mdb.models['2DSPIRAL'].boundaryConditions['BC-3'].suppress()
mdb.models['2DSPIRAL'].boundaryConditions['BC-1'].resume()
mdb.models['2DSPIRAL'].rootAssembly.Set(edges=
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGMIRROR-1'].edges.getSequenceFromMask(
    mask=('[#800000 ]', ), )+\
    mdb.models['2DSPIRAL'].rootAssembly.instances['FLGRF-1'].edges.getSequenceFromMask(
    mask=('[#10 ]', ), ), name='Set-11')
mdb.models['2DSPIRAL'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-4', region=mdb.models['2DSPIRAL'].rootAssembly.sets['Set-11'], u1=0.0, 
    u2=UNSET, ur3=UNSET)
mdb.jobs['TWODRFWITHCAP'].submit(consistencyChecking=OFF)
mdb.jobs['TWODRFWITHCAP']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\TWODRFWITHCAP.odb', 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 36280, 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWODRFWITHCAP', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['TWODRFWITHCAP']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'TWODRFWITHCAP', 'memory': 25.0})
mdb.jobs['TWODRFWITHCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'TWODRFWITHCAP', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['TWODRFWITHCAP']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 01 17:04:19 2018', 'jobName': 'TWODRFWITHCAP'})
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['FLGMIRROR'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['FLGMIRROR'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['FLGMIRROR'].features['Shell planar-1'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['FLGRF'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['FLGRF'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['FLGRF'].features['Shell planar-1'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['FLGRF'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['FLGRF'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['FLGRF'].features['Shell planar-1'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.models['2DSPIRAL'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL'].parts['FLGRF'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL'].parts['FLGRF'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL'].parts['FLGRF'].features['Shell planar-1'])
del mdb.models['2DSPIRAL'].sketches['__edit__']
mdb.jobs['TWODRFWITHCAP'].submit(consistencyChecking=OFF)
mdb.jobs['TWODRFWITHCAP']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\TWODRFWITHCAP.odb', 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 29912, 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWODRFWITHCAP', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['TWODRFWITHCAP']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'TWODRFWITHCAP', 'memory': 25.0})
mdb.jobs['TWODRFWITHCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'TWODRFWITHCAP', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['TWODRFWITHCAP']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 01 17:12:12 2018', 'jobName': 'TWODRFWITHCAP'})
mdb.models['2DSPIRAL'].boundaryConditions.delete(('BC-3', 'BC-2'))
mdb.models['2DSPIRAL'].boundaryConditions.changeKey(fromName='BC-1', toName=
    'cap')
mdb.models['2DSPIRAL'].boundaryConditions.changeKey(fromName='BC-4', toName=
    'wall')
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(name='2DSPIRAL-try', objectToCopy=mdb.models['2DSPIRAL'])
mdb.models['2DSPIRAL-try'].Material(name='GASKET-1', objectToCopy=
    mdb.models['2DSPIRAL-try'].materials['GASKET'])
del mdb.models['2DSPIRAL-try'].materials['GASKET-1'].gasketThicknessBehavior
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='2DSPIRAL-try', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='try', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['try'].submit(consistencyChecking=OFF)
mdb.jobs['try']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'try'})
mdb.jobs['try']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'try'})
mdb.jobs['try']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'try'})
mdb.jobs['try']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\try.odb', 'jobName': 'try'})
mdb.jobs['try']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'try'})
mdb.jobs['try']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 18108, 'jobName': 'try'})
mdb.jobs['try']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'try'})
mdb.jobs['try']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'try'})
mdb.jobs['try']._Message(STATUS, {'totalTime': 0.0, 'increment': 0, 
    'attempts': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 0.0, 'step': 1, 'jobName': 'try', 
    'severe': 0, 'equilibrium': 0})
mdb.jobs['try']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'memory': 25.0, 'jobName': 'try'})
mdb.jobs['try']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'try'})
mdb.jobs['try']._Message(STATUS, {'totalTime': 1.0, 'increment': 1, 
    'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 1.0, 'step': 1, 'jobName': 'try', 
    'severe': 0, 'equilibrium': 2})
mdb.jobs['try']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'try'})
mdb.jobs['try']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'try'})
mdb.jobs['try']._Message(JOB_COMPLETED, {'jobName': 'try', 
    'time': 'Sat Dec 01 17:19:50 2018'})
del mdb.models['2DSPIRAL-try'].parts['GASKET'].sectionAssignments[0]
mdb.models['2DSPIRAL-try'].HomogeneousSolidSection(material='GASKET-1', name=
    'GAS-1', thickness=1.0)
mdb.models['2DSPIRAL-try'].parts['GASKET'].Set(faces=
    mdb.models['2DSPIRAL-try'].parts['GASKET'].faces.getSequenceFromMask((
    '[#1 ]', ), ), name='Set-2')
mdb.models['2DSPIRAL-try'].parts['GASKET'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['2DSPIRAL-try'].parts['GASKET'].sets['Set-2'], sectionName=
    'GAS-1', thicknessAssignment=FROM_SECTION)
mdb.models['2DSPIRAL-try'].rootAssembly.regenerate()
mdb.jobs['try'].submit(consistencyChecking=OFF)
mdb.jobs['try']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'try'})
mdb.jobs['try']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'try'})
mdb.jobs['try']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'try'})
mdb.jobs['try']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\try.odb', 'jobName': 'try'})
mdb.jobs['try']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'try'})
mdb.jobs['try']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 6116, 'jobName': 'try'})
mdb.jobs['try']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'try'})
mdb.jobs['try']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'try'})
mdb.jobs['try']._Message(STATUS, {'totalTime': 0.0, 'increment': 0, 
    'attempts': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 0.0, 'step': 1, 'jobName': 'try', 
    'severe': 0, 'equilibrium': 0})
mdb.jobs['try']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'memory': 25.0, 'jobName': 'try'})
mdb.jobs['try']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'try'})
mdb.jobs['try']._Message(STATUS, {'totalTime': 1.0, 'increment': 1, 
    'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 1.0, 'step': 1, 'jobName': 'try', 
    'severe': 0, 'equilibrium': 2})
mdb.jobs['try']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'try'})
mdb.jobs['try']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'try'})
mdb.jobs['try']._Message(JOB_COMPLETED, {'jobName': 'try', 
    'time': 'Sat Dec 01 17:22:05 2018'})
mdb.jobs.changeKey(fromName='try', toName='TWODRFWOGASMATPROPERTIES')
mdb.jobs['TWODRFWOGASMATPROPERTIES'].submit(consistencyChecking=OFF)
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\Temp\\TWODRFWOGASMATPROPERTIES.odb', 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-V42I55M', 'handle': 37156, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STATUS, {'totalTime': 0.0, 
    'increment': 0, 'attempts': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWODRFWOGASMATPROPERTIES', 'severe': 0, 'equilibrium': 0})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'memory': 25.0, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STATUS, {'totalTime': 1.0, 
    'increment': 1, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'TWODRFWOGASMATPROPERTIES', 'severe': 0, 'equilibrium': 2})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(JOB_COMPLETED, {
    'jobName': 'TWODRFWOGASMATPROPERTIES', 'time': 'Sat Dec 01 17:24:21 2018'})
mdb.models['2DSPIRAL-try'].StaticStep(name='Step-2', previous='Step-1')
mdb.models['2DSPIRAL-try'].rootAssembly.Surface(name='Surf-8', side1Edges=
    mdb.models['2DSPIRAL-try'].rootAssembly.instances['FLGMIRROR-1'].edges.getSequenceFromMask(
    mask=('[#b80000 ]', ), )+\
    mdb.models['2DSPIRAL-try'].rootAssembly.instances['FLGRF-1'].edges.getSequenceFromMask(
    mask=('[#70 ]', ), ))
mdb.models['2DSPIRAL-try'].Pressure(amplitude=UNSET, createStepName='Step-2', 
    distributionType=UNIFORM, field='', magnitude=10.0, name='PRESSURE', 
    region=mdb.models['2DSPIRAL-try'].rootAssembly.surfaces['Surf-8'])
mdb.jobs['TWODRFWOGASMATPROPERTIES'].submit(consistencyChecking=OFF)
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\Temp\\TWODRFWOGASMATPROPERTIES.odb', 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-V42I55M', 'handle': 29844, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STATUS, {'totalTime': 0.0, 
    'increment': 0, 'attempts': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWODRFWOGASMATPROPERTIES', 'severe': 0, 'equilibrium': 0})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'memory': 25.0, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STATUS, {'totalTime': 1.0, 
    'increment': 1, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'TWODRFWOGASMATPROPERTIES', 'severe': 0, 'equilibrium': 2})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 2, 'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 1, 'frame': 0, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STATUS, {'totalTime': 1.0, 
    'increment': 0, 'attempts': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 0.0, 'step': 2, 
    'jobName': 'TWODRFWOGASMATPROPERTIES', 'severe': 0, 'equilibrium': 2})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'memory': 25.0, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 1, 'frame': 1, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STATUS, {'totalTime': 2.0, 
    'increment': 1, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'TWODRFWOGASMATPROPERTIES', 'severe': 0, 'equilibrium': 2})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(JOB_COMPLETED, {
    'jobName': 'TWODRFWOGASMATPROPERTIES', 'time': 'Sat Dec 01 17:27:36 2018'})
del mdb.models['2DSPIRAL-try'].parts['GASKET'].sectionAssignments[0]
mdb.models['2DSPIRAL-try'].parts['GASKET'].Set(faces=
    mdb.models['2DSPIRAL-try'].parts['GASKET'].faces.getSequenceFromMask((
    '[#1 ]', ), ), name='Set-3')
mdb.models['2DSPIRAL-try'].parts['GASKET'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['2DSPIRAL-try'].parts['GASKET'].sets['Set-3'], sectionName='GAS'
    , thicknessAssignment=FROM_SECTION)
mdb.models['2DSPIRAL-try'].rootAssembly.regenerate()
mdb.jobs['TWODRFWOGASMATPROPERTIES'].submit(consistencyChecking=OFF)
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\Temp\\TWODRFWOGASMATPROPERTIES.odb', 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-V42I55M', 'handle': 5876, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STATUS, {'totalTime': 0.0, 
    'increment': 0, 'attempts': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWODRFWOGASMATPROPERTIES', 'severe': 0, 'equilibrium': 0})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'memory': 25.0, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STATUS, {'totalTime': 1.0, 
    'increment': 1, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'TWODRFWOGASMATPROPERTIES', 'severe': 0, 'equilibrium': 2})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 2, 'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 1, 'frame': 0, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STATUS, {'totalTime': 1.0, 
    'increment': 0, 'attempts': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 0.0, 'step': 2, 
    'jobName': 'TWODRFWOGASMATPROPERTIES', 'severe': 0, 'equilibrium': 2})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'memory': 25.0, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 1, 'frame': 1, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STATUS, {'totalTime': 2.0, 
    'increment': 1, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'TWODRFWOGASMATPROPERTIES', 'severe': 0, 'equilibrium': 2})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(JOB_COMPLETED, {
    'jobName': 'TWODRFWOGASMATPROPERTIES', 'time': 'Sat Dec 01 17:30:12 2018'})
mdb.models['2DSPIRAL-try'].boundaryConditions['wall'].setValues(ur3=0.0)
mdb.models['2DSPIRAL-try'].boundaryConditions['cap'].setValues(typeName=PINNED)
mdb.jobs['TWODRFWOGASMATPROPERTIES'].submit(consistencyChecking=OFF)
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\Temp\\TWODRFWOGASMATPROPERTIES.odb', 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-V42I55M', 'handle': 27776, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STATUS, {'totalTime': 0.0, 
    'increment': 0, 'attempts': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWODRFWOGASMATPROPERTIES', 'severe': 0, 'equilibrium': 0})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'memory': 25.0, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STATUS, {'totalTime': 1.0, 
    'increment': 1, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'TWODRFWOGASMATPROPERTIES', 'severe': 0, 'equilibrium': 2})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 2, 'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 1, 'frame': 0, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STATUS, {'totalTime': 1.0, 
    'increment': 0, 'attempts': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 0.0, 'step': 2, 
    'jobName': 'TWODRFWOGASMATPROPERTIES', 'severe': 0, 'equilibrium': 2})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'memory': 25.0, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 1, 'frame': 1, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STATUS, {'totalTime': 2.0, 
    'increment': 1, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'TWODRFWOGASMATPROPERTIES', 'severe': 0, 'equilibrium': 2})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(JOB_COMPLETED, {
    'jobName': 'TWODRFWOGASMATPROPERTIES', 'time': 'Sat Dec 01 17:31:41 2018'})
mdb.models['2DSPIRAL-1'].boundaryConditions['BC-3'].setValues(ur3=0.0)
mdb.models['2DSPIRAL-1'].boundaryConditions.changeKey(fromName='BC-3', toName=
    'WALL')
mdb.models['2DSPIRAL-1'].boundaryConditions['bottompin'].setValues(typeName=
    YASYMM)
mdb.models['2DSPIRAL-1'].boundaryConditions['bottompin'].setValues(typeName=
    PINNED)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['TWODRFWOCAP'].submit(consistencyChecking=OFF)
mdb.jobs['TWODRFWOCAP']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\TWODRFWOCAP.odb', 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 23060, 
    'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWODRFWOCAP', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['TWODRFWOCAP']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'TWODRFWOCAP', 'memory': 28.0})
mdb.jobs['TWODRFWOCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'TWODRFWOCAP', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['TWODRFWOCAP']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 01 17:38:18 2018', 'jobName': 'TWODRFWOCAP'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['2DSPIRAL'].boundaryConditions['cap'].setValues(typeName=PINNED)
mdb.models['2DSPIRAL'].boundaryConditions['wall'].setValues(ur3=0.0)
mdb.models['2DSPIRAL'].boundaryConditions['wall'].setValues(u1=UNSET, u2=0.0)
mdb.jobs['TWODRFWOCAP'].submit(consistencyChecking=OFF)
mdb.jobs['TWODRFWITHCAP'].submit(consistencyChecking=OFF)
mdb.jobs['TWODRFWOCAP']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\TWODRFWOCAP.odb', 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 7568, 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWODRFWOCAP', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['TWODRFWOCAP']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'TWODRFWOCAP', 'memory': 28.0})
mdb.jobs['TWODRFWOCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'TWODRFWOCAP', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['TWODRFWOCAP']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 01 17:41:48 2018', 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\TWODRFWITHCAP.odb', 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 28872, 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWODRFWITHCAP', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['TWODRFWITHCAP']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'TWODRFWITHCAP', 'memory': 25.0})
mdb.jobs['TWODRFWITHCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'TWODRFWITHCAP', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['TWODRFWITHCAP']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 01 17:41:56 2018', 'jobName': 'TWODRFWITHCAP'})
mdb.models['2DSPIRAL'].boundaryConditions['wall'].setValues(u1=0.0)
mdb.jobs['TWODRFWITHCAP'].submit(consistencyChecking=OFF)
mdb.jobs['TWODRFWITHCAP']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\TWODRFWITHCAP.odb', 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 6440, 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWODRFWITHCAP', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['TWODRFWITHCAP']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'TWODRFWITHCAP', 'memory': 25.0})
mdb.jobs['TWODRFWITHCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'TWODRFWITHCAP', 'severe': 1, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['TWODRFWITHCAP']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 01 17:44:42 2018', 'jobName': 'TWODRFWITHCAP'})
mdb.models['2DSPIRAL-try'].parts['GASKET'].sectionAssignments[0].setValues(
    sectionName='GAS-1')
mdb.jobs['TWODRFWOGASMATPROPERTIES'].submit(consistencyChecking=OFF)
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\Temp\\TWODRFWOGASMATPROPERTIES.odb', 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-V42I55M', 'handle': 23812, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': 0, 'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'TWODRFWOGASMATPROPERTIES', 'severe': 0, 
    'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'TWODRFWOGASMATPROPERTIES', 
    'memory': 25.0})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'TWODRFWOGASMATPROPERTIES', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 2, 'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 1, 'frame': 0, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 0, 'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 
    'step': 2, 'jobName': 'TWODRFWOGASMATPROPERTIES', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'TWODRFWOGASMATPROPERTIES', 
    'memory': 25.0})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 1, 'frame': 1, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(STATUS, {'totalTime': 2.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'TWODRFWOGASMATPROPERTIES', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.jobs['TWODRFWOGASMATPROPERTIES']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 01 17:50:46 2018', 'jobName': 'TWODRFWOGASMATPROPERTIES'})
mdb.models.changeKey(fromName='2DSPIRAL-try', toName='2DSPIRAL-WOGASKETPROP')
mdb.Model(name='2DSPIRAL-HALF', objectToCopy=mdb.models['2DSPIRAL'])
del mdb.models['2DSPIRAL-HALF'].steps['Step-1']
del mdb.models['2DSPIRAL-HALF'].rootAssembly.features['FLGMIRROR-1']
mdb.models['2DSPIRAL-HALF'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2DSPIRAL-HALF'].parts['GASKET'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL-HALF'].parts['GASKET'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['2DSPIRAL-HALF'].sketches['__edit__'], 
    upToFeature=
    mdb.models['2DSPIRAL-HALF'].parts['GASKET'].features['Shell planar-1'])
mdb.models['2DSPIRAL-HALF'].sketches['__edit__'].Line(point1=(540.050003051758, 
    -324.5), point2=(562.050003051758, -324.5))
mdb.models['2DSPIRAL-HALF'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2DSPIRAL-HALF'].sketches['__edit__'].geometry[28])
mdb.models['2DSPIRAL-HALF'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL-HALF'].sketches['__edit__'].geometry[25], entity2=
    mdb.models['2DSPIRAL-HALF'].sketches['__edit__'].geometry[28])
mdb.models['2DSPIRAL-HALF'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL-HALF'].sketches['__edit__'].vertices[22], entity2=
    mdb.models['2DSPIRAL-HALF'].sketches['__edit__'].geometry[25])
mdb.models['2DSPIRAL-HALF'].sketches['__edit__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL-HALF'].sketches['__edit__'].vertices[21], entity2=
    mdb.models['2DSPIRAL-HALF'].sketches['__edit__'].vertices[18], midpoint=
    mdb.models['2DSPIRAL-HALF'].sketches['__edit__'].vertices[22])
mdb.models['2DSPIRAL-HALF'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL-HALF'].sketches['__edit__'].vertices[23], entity2=
    mdb.models['2DSPIRAL-HALF'].sketches['__edit__'].geometry[26])
mdb.models['2DSPIRAL-HALF'].sketches['__edit__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL-HALF'].sketches['__edit__'].vertices[20], entity2=
    mdb.models['2DSPIRAL-HALF'].sketches['__edit__'].vertices[17], midpoint=
    mdb.models['2DSPIRAL-HALF'].sketches['__edit__'].vertices[23])
mdb.models['2DSPIRAL-HALF'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL-HALF'].sketches['__edit__'].geometry[25], point1=(
    539.981262207031, -323.157409667969))
mdb.models['2DSPIRAL-HALF'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL-HALF'].sketches['__edit__'].geometry[26], point1=(
    561.972290039063, -323.346221923828))
mdb.models['2DSPIRAL-HALF'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL-HALF'].sketches['__edit__'].geometry[24], point1=(
    559.440490722656, -322.150451660156))
mdb.models['2DSPIRAL-HALF'].parts['GASKET'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2DSPIRAL-HALF'].sketches['__edit__'])
del mdb.models['2DSPIRAL-HALF'].sketches['__edit__']
mdb.models['2DSPIRAL-HALF'].parts['GASKET'].regenerate()
mdb.models['2DSPIRAL-HALF'].rootAssembly.regenerate()
mdb.models['2DSPIRAL-HALF'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['2DSPIRAL-HALF'].rootAssembly.instances['GASKET-1'], ), size=
    0.2)
mdb.models['2DSPIRAL-HALF'].rootAssembly.generateMesh(regions=(
    mdb.models['2DSPIRAL-HALF'].rootAssembly.instances['GASKET-1'], ))
mdb.models['2DSPIRAL-HALF'].StaticStep(name='Step-1', previous='Initial')
mdb.models['2DSPIRAL-HALF'].rootAssembly.Set(edges=
    mdb.models['2DSPIRAL-HALF'].rootAssembly.instances['GASKET-1'].edges.getSequenceFromMask(
    ('[#8 ]', ), ), name='Set-12')
mdb.models['2DSPIRAL-HALF'].DisplacementBC(amplitude=UNSET, createStepName=
    'Step-1', distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None
    , name='BC-1', region=
    mdb.models['2DSPIRAL-HALF'].rootAssembly.sets['Set-12'], u1=UNSET, u2=0.0, 
    ur3=0.0)
mdb.models['2DSPIRAL-HALF'].rootAssembly.Set(edges=
    mdb.models['2DSPIRAL-HALF'].rootAssembly.instances['FLGRF-1'].edges.getSequenceFromMask(
    ('[#10 ]', ), ), name='Set-13')
mdb.models['2DSPIRAL-HALF'].DisplacementBC(amplitude=UNSET, createStepName=
    'Step-1', distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None
    , name='BC-2', region=
    mdb.models['2DSPIRAL-HALF'].rootAssembly.sets['Set-13'], u1=0.0, u2=UNSET, 
    ur3=0.0)
mdb.models['2DSPIRAL-HALF'].rootAssembly.Surface(name='Surf-8', side1Edges=
    mdb.models['2DSPIRAL-HALF'].rootAssembly.instances['FLGRF-1'].edges.getSequenceFromMask(
    ('[#880000 ]', ), ))
mdb.models['2DSPIRAL-HALF'].Pressure(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, field='', magnitude=310.3, name='Load-1', region=
    mdb.models['2DSPIRAL-HALF'].rootAssembly.surfaces['Surf-8'])
mdb.models['2DSPIRAL-HALF'].rootAssembly.Set(edges=
    mdb.models['2DSPIRAL-HALF'].rootAssembly.instances['FLGRF-1'].edges.getSequenceFromMask(
    ('[#80 ]', ), ), name='Set-14')
mdb.models['2DSPIRAL-HALF'].DisplacementBC(amplitude=UNSET, createStepName=
    'Step-1', distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None
    , name='BC-3', region=
    mdb.models['2DSPIRAL-HALF'].rootAssembly.sets['Set-14'], u1=0.0, u2=0.0, 
    ur3=0.0)
mdb.models['2DSPIRAL-HALF'].boundaryConditions['BC-3'].setValues(u2=UNSET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='2DSPIRAL-HALF', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='TWOHALFMODEL', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['TWOHALFMODEL'].submit(consistencyChecking=OFF)
mdb.jobs['TWOHALFMODEL']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\TWOHALFMODEL.odb', 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 35612, 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWOHALFMODEL', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['TWOHALFMODEL']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'TWOHALFMODEL', 'memory': 26.0})
mdb.jobs['TWOHALFMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWOHALFMODEL', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['TWOHALFMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWOHALFMODEL', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['TWOHALFMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWOHALFMODEL', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['TWOHALFMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWOHALFMODEL', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['TWOHALFMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWOHALFMODEL', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['TWOHALFMODEL']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'TWOHALFMODEL'})
mdb.models['2DSPIRAL-HALF'].parts['GASKET'].Set(faces=
    mdb.models['2DSPIRAL-HALF'].parts['GASKET'].faces.getSequenceFromMask((
    '[#1 ]', ), ), name='Set-2')
mdb.models['2DSPIRAL-HALF'].parts['GASKET'].sectionAssignments[0].setValues(
    region=mdb.models['2DSPIRAL-HALF'].parts['GASKET'].sets['Set-2'])
mdb.models['2DSPIRAL-HALF'].rootAssembly.regenerate()
mdb.models['2DSPIRAL-HALF'].rootAssembly.Surface(name='m_Surf-9', side1Edges=
    mdb.models['2DSPIRAL-HALF'].rootAssembly.instances['FLGRF-1'].edges.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['2DSPIRAL-HALF'].rootAssembly.Set(edges=
    mdb.models['2DSPIRAL-HALF'].rootAssembly.instances['GASKET-1'].edges.getSequenceFromMask(
    ('[#2 ]', ), ), name='s_Set-15')
mdb.models['2DSPIRAL-HALF'].SurfaceToSurfaceContactStd(adjustMethod=OVERCLOSED, 
    clearanceRegion=None, createStepName='Initial', datumAxis=None, 
    enforcement=NODE_TO_SURFACE, initialClearance=OMIT, interactionProperty=
    'IntProp-1', master=
    mdb.models['2DSPIRAL-HALF'].rootAssembly.surfaces['m_Surf-9'], name='Int-1'
    , slave=mdb.models['2DSPIRAL-HALF'].rootAssembly.sets['s_Set-15'], sliding=
    FINITE, smooth=0.2, surfaceSmoothing=NONE, thickness=OFF, tied=OFF)
mdb.jobs['TWOHALFMODEL'].submit(consistencyChecking=OFF)
mdb.jobs['TWOHALFMODEL']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\TWOHALFMODEL.odb', 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 34544, 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWOHALFMODEL', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['TWOHALFMODEL']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'TWOHALFMODEL', 'memory': 28.0})
mdb.jobs['TWOHALFMODEL']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'TWOHALFMODEL', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['TWOHALFMODEL']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 01 18:06:43 2018', 'jobName': 'TWOHALFMODEL'})
mdb.models['2DSPIRAL-HALF'].boundaryConditions['BC-1'].setValues(ur3=UNSET)
mdb.models['2DSPIRAL-HALF'].boundaryConditions['BC-2'].setValues(ur3=UNSET)
mdb.models['2DSPIRAL-HALF'].boundaryConditions['BC-3'].setValues(u2=0.0)
mdb.jobs['TWOHALFMODEL'].submit(consistencyChecking=OFF)
mdb.jobs['TWOHALFMODEL']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\TWOHALFMODEL.odb', 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 18216, 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWOHALFMODEL', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['TWOHALFMODEL']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'TWOHALFMODEL', 'memory': 28.0})
mdb.jobs['TWOHALFMODEL']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'TWOHALFMODEL', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['TWOHALFMODEL']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 01 18:10:44 2018', 'jobName': 'TWOHALFMODEL'})
mdb.models['2DSPIRAL-HALF'].rootAssembly.Set(edges=
    mdb.models['2DSPIRAL-HALF'].rootAssembly.instances['GASKET-1'].edges.getSequenceFromMask(
    ('[#8 ]', ), ), name='Set-16')
mdb.models['2DSPIRAL-HALF'].YsymmBC(createStepName='Step-1', localCsys=None, 
    name='BC-4', region=
    mdb.models['2DSPIRAL-HALF'].rootAssembly.sets['Set-16'])
mdb.models['2DSPIRAL-HALF'].boundaryConditions['BC-1'].suppress()
mdb.jobs['TWOHALFMODEL'].submit(consistencyChecking=OFF)
mdb.jobs['TWOHALFMODEL']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\TWOHALFMODEL.odb', 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 34204, 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWOHALFMODEL', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['TWOHALFMODEL']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'TWOHALFMODEL', 'memory': 28.0})
mdb.jobs['TWOHALFMODEL']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'TWOHALFMODEL', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['TWOHALFMODEL']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 01 18:13:54 2018', 'jobName': 'TWOHALFMODEL'})
mdb.models['2DSPIRAL-HALF'].rootAssembly.Set(edges=
    mdb.models['2DSPIRAL-HALF'].rootAssembly.instances['FLGRF-1'].edges.getSequenceFromMask(
    ('[#10 ]', ), ), name='Set-17')
mdb.models['2DSPIRAL-HALF'].XsymmBC(createStepName='Step-1', localCsys=None, 
    name='BC-5', region=
    mdb.models['2DSPIRAL-HALF'].rootAssembly.sets['Set-17'])
mdb.models['2DSPIRAL-HALF'].boundaryConditions['BC-5'].suppress()
mdb.models['2DSPIRAL-HALF'].boundaryConditions['BC-2'].suppress()
mdb.jobs['TWOHALFMODEL'].submit(consistencyChecking=OFF)
mdb.jobs['TWOHALFMODEL']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\TWOHALFMODEL.odb', 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 1180, 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWOHALFMODEL', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['TWOHALFMODEL']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'TWOHALFMODEL', 'memory': 28.0})
mdb.jobs['TWOHALFMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWOHALFMODEL', 'severe': 8, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['TWOHALFMODEL']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'TWOHALFMODEL', 'severe': 6, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['TWOHALFMODEL']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'TWOHALFMODEL', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['TWOHALFMODEL']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STATUS, {'totalTime': 0.875, 'attempts': 1, 
    'timeIncrement': 0.375, 'increment': 3, 'stepTime': 0.875, 'step': 1, 
    'jobName': 'TWOHALFMODEL', 'severe': 1, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['TWOHALFMODEL']._Message(STATUS, {'totalTime': 0.875, 
    'attempts': ' 1U', 'timeIncrement': 0.125, 'increment': 4, 
    'stepTime': 0.875, 'step': 1, 'jobName': 'TWOHALFMODEL', 'severe': 5, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['TWOHALFMODEL']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STATUS, {'totalTime': 0.90625, 'attempts': 2, 
    'timeIncrement': 0.03125, 'increment': 4, 'stepTime': 0.90625, 'step': 1, 
    'jobName': 'TWOHALFMODEL', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['TWOHALFMODEL']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STATUS, {'totalTime': 0.953125, 
    'attempts': 1, 'timeIncrement': 0.046875, 'increment': 5, 
    'stepTime': 0.953125, 'step': 1, 'jobName': 'TWOHALFMODEL', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['TWOHALFMODEL']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.046875, 'increment': 6, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'TWOHALFMODEL', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['TWOHALFMODEL']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 01 18:16:30 2018', 'jobName': 'TWOHALFMODEL'})
mdb.models['2DSPIRAL-HALF'].boundaryConditions['BC-5'].resume()
mdb.jobs['TWOHALFMODEL'].submit(consistencyChecking=OFF)
mdb.jobs['TWOHALFMODEL']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\TWOHALFMODEL.odb', 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 20128, 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWOHALFMODEL', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['TWOHALFMODEL']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'TWOHALFMODEL', 'memory': 28.0})
mdb.jobs['TWOHALFMODEL']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'TWOHALFMODEL', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['TWOHALFMODEL']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 01 18:17:40 2018', 'jobName': 'TWOHALFMODEL'})
mdb.models['2DSPIRAL-HALF'].rootAssembly.deleteMesh(regions=(
    mdb.models['2DSPIRAL-HALF'].rootAssembly.instances['GASKET-1'], ))
mdb.models['2DSPIRAL-HALF'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['2DSPIRAL-HALF'].rootAssembly.instances['GASKET-1'], ), size=
    0.5)
mdb.models['2DSPIRAL-HALF'].rootAssembly.generateMesh(regions=(
    mdb.models['2DSPIRAL-HALF'].rootAssembly.instances['GASKET-1'], ))
mdb.jobs['TWOHALFMODEL'].submit(consistencyChecking=OFF)
mdb.jobs['TWOHALFMODEL']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\TWOHALFMODEL.odb', 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 11716, 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWOHALFMODEL', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['TWOHALFMODEL']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'TWOHALFMODEL', 'memory': 25.0})
mdb.jobs['TWOHALFMODEL']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'TWOHALFMODEL', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['TWOHALFMODEL']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 01 18:19:35 2018', 'jobName': 'TWOHALFMODEL'})
mdb.Model(name='2DSPIRAL-HALFWOCAP', objectToCopy=mdb.models['2DSPIRAL-HALF'])
mdb.models['2DSPIRAL-HALFWOCAP'].ConstrainedSketch(name='__edit__', 
    objectToCopy=
    mdb.models['2DSPIRAL-HALFWOCAP'].parts['FLGRF'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL-HALFWOCAP'].parts['FLGRF'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'], upToFeature=
    mdb.models['2DSPIRAL-HALFWOCAP'].parts['FLGRF'].features['Shell planar-1'])
mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].geometry[31], 
    mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].geometry[57], 
    mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].geometry[62], 
    mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].geometry[63], 
    mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].geometry[65], 
    mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].dimensions[1], 
    mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].constraints[152]))
mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].Line(point1=(387.5, 
    -349.103259714595), point2=(334.25, -349.103259714595))
mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].geometry[77])
mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].geometry[72], 
    entity2=mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].geometry[77])
mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].geometry[74], ))
mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].Line(point1=(371.5, 
    -114.5), point2=(371.5, -373.5))
mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].geometry[78])
mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].geometry[54], 
    entity2=mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].geometry[78])
mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].geometry[77], point1=
    (350.108947753906, -348.397644042969))
mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].geometry[78], point1=
    (373.191162109375, -369.611022949219))
mdb.models['2DSPIRAL-HALFWOCAP'].parts['FLGRF'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'])
del mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__']
mdb.models['2DSPIRAL-HALFWOCAP'].parts['FLGRF'].regenerate()
mdb.models['2DSPIRAL-HALFWOCAP'].ConstrainedSketch(name='__edit__', 
    objectToCopy=
    mdb.models['2DSPIRAL-HALFWOCAP'].parts['FLGRF'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL-HALFWOCAP'].parts['FLGRF'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'], upToFeature=
    mdb.models['2DSPIRAL-HALFWOCAP'].parts['FLGRF'].features['Shell planar-1'])
mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].offset(distance=227.0, 
    objectList=(
    mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].geometry[54], ), 
    side=RIGHT)
mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].geometry[81], point1=
    (405.147369384766, -340.229400634766))
mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].geometry[72], point1=
    (387.470123291016, -346.559020996094))
mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].geometry[79], point1=
    (381.788177490234, -348.457885742188))
mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].geometry[80], point1=
    (372.949523925781, -348.457885742188))
mdb.models['2DSPIRAL-HALFWOCAP'].parts['FLGRF'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'])
del mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__']
mdb.models['2DSPIRAL-HALFWOCAP'].parts['FLGRF'].regenerate()
mdb.models['2DSPIRAL-HALFWOCAP'].ConstrainedSketch(name='__edit__', 
    objectToCopy=
    mdb.models['2DSPIRAL-HALFWOCAP'].parts['FLGRF'].features['Shell planar-1'].sketch)
mdb.models['2DSPIRAL-HALFWOCAP'].parts['FLGRF'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'], upToFeature=
    mdb.models['2DSPIRAL-HALFWOCAP'].parts['FLGRF'].features['Shell planar-1'])
mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].delete(objectList=(
    mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].geometry[73], 
    mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].geometry[75], 
    mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].geometry[83], 
    mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].dimensions[4], 
    mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].constraints[210]))
mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'].Line(point1=(
    431.769553838745, -208.169942172814), point2=(387.5, -341.5))
mdb.models['2DSPIRAL-HALFWOCAP'].parts['FLGRF'].features['Shell planar-1'].setValues(
    sketch=mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'])
del mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__']
mdb.models['2DSPIRAL-HALFWOCAP'].parts['FLGRF'].regenerate()
mdb.models['2DSPIRAL-HALFWOCAP'].ConstrainedSketch(name='__edit__', 
    objectToCopy=
    mdb.models['2DSPIRAL-HALFWOCAP'].parts['FLGRF'].features['Partition face-1'].sketch)
mdb.models['2DSPIRAL-HALFWOCAP'].parts['FLGRF'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__'], upToFeature=
    mdb.models['2DSPIRAL-HALFWOCAP'].parts['FLGRF'].features['Partition face-1'])
del mdb.models['2DSPIRAL-HALFWOCAP'].sketches['__edit__']
mdb.models['2DSPIRAL-HALFWOCAP'].parts['FLGRF'].regenerate()
mdb.models['2DSPIRAL-HALFWOCAP'].parts['FLGRF'].Set(faces=
    mdb.models['2DSPIRAL-HALFWOCAP'].parts['FLGRF'].faces.getSequenceFromMask((
    '[#1f ]', ), ), name='Set-2')
mdb.models['2DSPIRAL-HALFWOCAP'].parts['FLGRF'].sectionAssignments[0].setValues(
    region=mdb.models['2DSPIRAL-HALFWOCAP'].parts['FLGRF'].sets['Set-2'])
mdb.models['2DSPIRAL-HALFWOCAP'].rootAssembly.regenerate()
mdb.models['2DSPIRAL-HALFWOCAP'].rootAssembly.Surface(name='Surf-10', 
    side1Edges=
    mdb.models['2DSPIRAL-HALFWOCAP'].rootAssembly.instances['FLGRF-1'].edges.getSequenceFromMask(
    ('[#22000 ]', ), ))
mdb.models['2DSPIRAL-HALFWOCAP'].loads['Load-1'].setValues(region=
    mdb.models['2DSPIRAL-HALFWOCAP'].rootAssembly.surfaces['Surf-10'])
mdb.models['2DSPIRAL-HALFWOCAP'].rootAssembly.Set(edges=
    mdb.models['2DSPIRAL-HALFWOCAP'].rootAssembly.instances['FLGRF-1'].edges.getSequenceFromMask(
    ('[#20 ]', ), ), name='Set-18')
mdb.models['2DSPIRAL-HALFWOCAP'].boundaryConditions['BC-3'].setValues(region=
    mdb.models['2DSPIRAL-HALFWOCAP'].rootAssembly.sets['Set-18'])
mdb.models['2DSPIRAL-HALFWOCAP'].rootAssembly.Set(edges=
    mdb.models['2DSPIRAL-HALFWOCAP'].rootAssembly.instances['FLGRF-1'].edges.getSequenceFromMask(
    ('[#10 ]', ), ), name='Set-19')
mdb.models['2DSPIRAL-HALFWOCAP'].boundaryConditions['BC-5'].setValues(region=
    mdb.models['2DSPIRAL-HALFWOCAP'].rootAssembly.sets['Set-19'])
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='2DSPIRAL-WOGASKETPROP', 
    modelPrint=OFF, multiprocessingMode=DEFAULT, name='2DSPIRALWOCAP', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['2DSPIRALWOCAP'].submit(consistencyChecking=OFF)
mdb.jobs['2DSPIRALWOCAP']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': '2DSPIRALWOCAP'})
mdb.jobs['2DSPIRALWOCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': '2DSPIRALWOCAP'})
mdb.jobs['2DSPIRALWOCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': '2DSPIRALWOCAP'})
mdb.jobs['2DSPIRALWOCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': '2DSPIRALWOCAP'})
mdb.jobs['2DSPIRALWOCAP']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\2DSPIRALWOCAP.odb', 'jobName': '2DSPIRALWOCAP'})
mdb.jobs['2DSPIRALWOCAP']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '2DSPIRALWOCAP'})
mdb.jobs['2DSPIRALWOCAP']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 37220, 
    'jobName': '2DSPIRALWOCAP'})
mdb.jobs['2DSPIRALWOCAP']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': '2DSPIRALWOCAP'})
mdb.jobs['2DSPIRALWOCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': '2DSPIRALWOCAP'})
mdb.jobs['2DSPIRALWOCAP']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': '2DSPIRALWOCAP', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['2DSPIRALWOCAP']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': '2DSPIRALWOCAP', 'memory': 25.0})
mdb.jobs['2DSPIRALWOCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': '2DSPIRALWOCAP'})
mdb.jobs['2DSPIRALWOCAP']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': '2DSPIRALWOCAP', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['2DSPIRALWOCAP']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': '2DSPIRALWOCAP'})
mdb.jobs['2DSPIRALWOCAP']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': '2DSPIRALWOCAP'})
mdb.jobs['2DSPIRALWOCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 0, 'jobName': '2DSPIRALWOCAP'})
mdb.jobs['2DSPIRALWOCAP']._Message(STATUS, {'totalTime': 1.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 2, 
    'jobName': '2DSPIRALWOCAP', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['2DSPIRALWOCAP']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': '2DSPIRALWOCAP', 'memory': 25.0})
mdb.jobs['2DSPIRALWOCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 1, 'jobName': '2DSPIRALWOCAP'})
mdb.jobs['2DSPIRALWOCAP']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 2, 
    'jobName': '2DSPIRALWOCAP', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['2DSPIRALWOCAP']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 2, 'jobName': '2DSPIRALWOCAP'})
mdb.jobs['2DSPIRALWOCAP']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '2DSPIRALWOCAP'})
mdb.jobs['2DSPIRALWOCAP']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 01 18:28:58 2018', 'jobName': '2DSPIRALWOCAP'})
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='2DSPIRAL-HALFWOCAP', modelPrint=
    OFF, multiprocessingMode=DEFAULT, name='2DSPIRAL-HALFWOCAP', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
del mdb.jobs['2DSPIRALWOCAP']
mdb.models['2DSPIRAL-HALFWOCAP'].rootAssembly.Set(edges=
    mdb.models['2DSPIRAL-HALFWOCAP'].rootAssembly.instances['GASKET-1'].edges.getSequenceFromMask(
    ('[#8 ]', ), ), name='Set-20')
mdb.models['2DSPIRAL-HALFWOCAP'].boundaryConditions['BC-4'].setValues(region=
    mdb.models['2DSPIRAL-HALFWOCAP'].rootAssembly.sets['Set-20'])
mdb.models['2DSPIRAL-HALFWOCAP'].rootAssembly.Set(edges=
    mdb.models['2DSPIRAL-HALFWOCAP'].rootAssembly.instances['FLGRF-1'].edges.getSequenceFromMask(
    ('[#10 ]', ), ), name='Set-21')
mdb.models['2DSPIRAL-HALFWOCAP'].boundaryConditions['BC-5'].setValues(region=
    mdb.models['2DSPIRAL-HALFWOCAP'].rootAssembly.sets['Set-21'])
mdb.models['2DSPIRAL-HALFWOCAP'].rootAssembly.Surface(name='m_Surf-11', 
    side1Edges=
    mdb.models['2DSPIRAL-HALFWOCAP'].rootAssembly.instances['FLGRF-1'].edges.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['2DSPIRAL-HALFWOCAP'].rootAssembly.Set(edges=
    mdb.models['2DSPIRAL-HALFWOCAP'].rootAssembly.instances['GASKET-1'].edges.getSequenceFromMask(
    ('[#2 ]', ), ), name='s_Set-22')
mdb.models['2DSPIRAL-HALFWOCAP'].interactions['Int-1'].setValues(adjustMethod=
    OVERCLOSED, bondingSet=None, enforcement=NODE_TO_SURFACE, initialClearance=
    OMIT, master=
    mdb.models['2DSPIRAL-HALFWOCAP'].rootAssembly.surfaces['m_Surf-11'], slave=
    mdb.models['2DSPIRAL-HALFWOCAP'].rootAssembly.sets['s_Set-22'], sliding=
    FINITE, smooth=0.2, supplementaryContact=SELECTIVE, thickness=OFF, tied=
    OFF)
mdb.models['2DSPIRAL-HALFWOCAP'].rootAssembly.Surface(name='m_Surf-12', 
    side1Edges=
    mdb.models['2DSPIRAL-HALFWOCAP'].rootAssembly.instances['FLGRF-1'].edges.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['2DSPIRAL-HALFWOCAP'].rootAssembly.Set(edges=
    mdb.models['2DSPIRAL-HALFWOCAP'].rootAssembly.instances['GASKET-1'].edges.getSequenceFromMask(
    ('[#2 ]', ), ), name='s_Set-23')
mdb.models['2DSPIRAL-HALFWOCAP'].interactions['Int-1'].setValues(adjustMethod=
    OVERCLOSED, bondingSet=None, enforcement=NODE_TO_SURFACE, initialClearance=
    OMIT, master=
    mdb.models['2DSPIRAL-HALFWOCAP'].rootAssembly.surfaces['m_Surf-12'], slave=
    mdb.models['2DSPIRAL-HALFWOCAP'].rootAssembly.sets['s_Set-23'], sliding=
    SMALL, smooth=0.2, supplementaryContact=SELECTIVE, surfaceSmoothing=NONE, 
    thickness=ON, tied=OFF)
mdb.models['2DSPIRAL-HALFWOCAP'].rootAssembly.generateMesh(regions=(
    mdb.models['2DSPIRAL-HALFWOCAP'].rootAssembly.instances['FLGRF-1'], ))
mdb.jobs['2DSPIRAL-HALFWOCAP'].submit(consistencyChecking=OFF, datacheckJob=
    True)
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 
    'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_S_SET-23_CNS_-ASSEMBLY_M_SURF-12), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Abaqus IS UNABLE TO ESTIMATE AN AVERAGE INTERFACE ELEMENT LENGTH. THE WHOLE MODEL CHARACTERISTIC ELEMENT LENGTH IS USED INSTEAD.', 
    'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\2DSPIRAL-HALFWOCAP.odb', 
    'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 11872, 
    'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': 0, 'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 
    'step': 1, 'jobName': '2DSPIRAL-HALFWOCAP', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': '2DSPIRAL-HALFWOCAP', 'memory': 8.0})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 01 18:36:54 2018', 'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP'].submit(consistencyChecking=OFF)
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 
    'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_S_SET-23_CNS_-ASSEMBLY_M_SURF-12), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Abaqus IS UNABLE TO ESTIMATE AN AVERAGE INTERFACE ELEMENT LENGTH. THE WHOLE MODEL CHARACTERISTIC ELEMENT LENGTH IS USED INSTEAD.', 
    'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\2DSPIRAL-HALFWOCAP.odb', 
    'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 6028, 
    'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': 0, 'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 
    'step': 1, 'jobName': '2DSPIRAL-HALFWOCAP', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': '2DSPIRAL-HALFWOCAP', 'memory': 25.0})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': '2DSPIRAL-HALFWOCAP', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 01 18:37:17 2018', 'jobName': '2DSPIRAL-HALFWOCAP'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['2DSPIRAL-HALFWOCAP'].boundaryConditions['BC-3'].setValues(u2=UNSET, 
    ur3=UNSET)
mdb.models['2DSPIRAL-HALFWOCAP'].boundaryConditions['BC-3'].suppress()
mdb.jobs['2DSPIRAL-HALFWOCAP'].submit(consistencyChecking=OFF)
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 
    'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_S_SET-23_CNS_-ASSEMBLY_M_SURF-12), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Abaqus IS UNABLE TO ESTIMATE AN AVERAGE INTERFACE ELEMENT LENGTH. THE WHOLE MODEL CHARACTERISTIC ELEMENT LENGTH IS USED INSTEAD.', 
    'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\2DSPIRAL-HALFWOCAP.odb', 
    'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 19356, 
    'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': 0, 'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 
    'step': 1, 'jobName': '2DSPIRAL-HALFWOCAP', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': '2DSPIRAL-HALFWOCAP', 'memory': 25.0})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': '2DSPIRAL-HALFWOCAP', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 01 18:39:31 2018', 'jobName': '2DSPIRAL-HALFWOCAP'})
# Save by bijran on 2018_12_01-18.42.15; build 6.14-2 2014_08_22-22.00.46 134497
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['2DSPIRAL-WOGASKETPROP']
del mdb.jobs['TWODRFWOGASMATPROPERTIES']
# Save by bijran on 2018_12_01-18.42.52; build 6.14-2 2014_08_22-22.00.46 134497
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['2DSPIRAL-HALFWOCAP'].submit(consistencyChecking=OFF)
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 
    'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_S_SET-23_CNS_-ASSEMBLY_M_SURF-12), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Abaqus IS UNABLE TO ESTIMATE AN AVERAGE INTERFACE ELEMENT LENGTH. THE WHOLE MODEL CHARACTERISTIC ELEMENT LENGTH IS USED INSTEAD.', 
    'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\2DSPIRAL-HALFWOCAP.odb', 
    'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['TWODRFWITHCAP'].submit(consistencyChecking=OFF)
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 31712, 
    'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': 0, 'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 
    'step': 1, 'jobName': '2DSPIRAL-HALFWOCAP', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': '2DSPIRAL-HALFWOCAP', 'memory': 25.0})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': '2DSPIRAL-HALFWOCAP', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 01 18:43:32 2018', 'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['TWODRFWOCAP'].submit(consistencyChecking=OFF)
mdb.jobs['TWODRFWITHCAP']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\TWODRFWITHCAP.odb', 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 29516, 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWODRFWITHCAP', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['TWODRFWITHCAP']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'TWODRFWITHCAP', 'memory': 25.0})
mdb.jobs['TWODRFWITHCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'TWODRFWITHCAP', 'severe': 1, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['TWODRFWITHCAP']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWOHALFMODEL'].submit(consistencyChecking=OFF)
mdb.jobs['TWODRFWITHCAP']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 01 18:43:45 2018', 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWOCAP']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\TWODRFWOCAP.odb', 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 31108, 
    'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWODRFWOCAP', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['TWODRFWOCAP']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'TWODRFWOCAP', 'memory': 28.0})
mdb.jobs['TWODRFWOCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'TWODRFWOCAP', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['TWODRFWOCAP']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 01 18:43:54 2018', 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWOHALFMODEL']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\TWOHALFMODEL.odb', 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 2160, 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWOHALFMODEL', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['TWOHALFMODEL']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'TWOHALFMODEL', 'memory': 25.0})
mdb.jobs['TWOHALFMODEL']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'TWOHALFMODEL', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['TWOHALFMODEL']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 01 18:44:01 2018', 'jobName': 'TWOHALFMODEL'})
# Save by bijran on 2018_12_01-18.47.30; build 6.14-2 2014_08_22-22.00.46 134497
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['2DSPIRAL'].boundaryConditions['cap'].setValues(typeName=XSYMM)
mdb.models['2DSPIRAL'].boundaryConditions['wall'].setValues(u2=UNSET, ur3=
    UNSET)
mdb.models['2DSPIRAL-1'].boundaryConditions['WALL'].setValues(ur3=UNSET)
mdb.models['2DSPIRAL-1'].boundaryConditions['bottompin'].suppress()
mdb.jobs['2DSPIRAL-HALFWOCAP'].submit(consistencyChecking=OFF)
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 
    'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_S_SET-23_CNS_-ASSEMBLY_M_SURF-12), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Abaqus IS UNABLE TO ESTIMATE AN AVERAGE INTERFACE ELEMENT LENGTH. THE WHOLE MODEL CHARACTERISTIC ELEMENT LENGTH IS USED INSTEAD.', 
    'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\2DSPIRAL-HALFWOCAP.odb', 
    'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 31996, 
    'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': 0, 'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 
    'step': 1, 'jobName': '2DSPIRAL-HALFWOCAP', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': '2DSPIRAL-HALFWOCAP', 'memory': 25.0})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': '2DSPIRAL-HALFWOCAP', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['2DSPIRAL-HALFWOCAP']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 01 18:54:56 2018', 'jobName': '2DSPIRAL-HALFWOCAP'})
mdb.jobs['TWODRFWITHCAP'].submit(consistencyChecking=OFF)
mdb.jobs['TWODRFWOCAP'].submit(consistencyChecking=OFF)
mdb.jobs['TWODRFWITHCAP']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-4_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\TWODRFWITHCAP.odb', 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 33044, 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWODRFWITHCAP', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['TWODRFWITHCAP']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'TWODRFWITHCAP', 'memory': 25.0})
mdb.jobs['TWODRFWITHCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'TWODRFWITHCAP', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['TWODRFWITHCAP']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWITHCAP']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 01 18:55:19 2018', 'jobName': 'TWODRFWITHCAP'})
mdb.jobs['TWODRFWOCAP']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\TWODRFWOCAP.odb', 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWOHALFMODEL'].submit(consistencyChecking=OFF)
mdb.jobs['TWODRFWOCAP']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 34828, 
    'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWODRFWOCAP', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['TWODRFWOCAP']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'TWODRFWOCAP', 'memory': 28.0})
mdb.jobs['TWODRFWOCAP']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'TWODRFWOCAP', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['TWODRFWOCAP']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWODRFWOCAP']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 01 18:55:29 2018', 'jobName': 'TWODRFWOCAP'})
mdb.jobs['TWOHALFMODEL']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\TWOHALFMODEL.odb', 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 34268, 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'TWOHALFMODEL', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['TWOHALFMODEL']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'TWOHALFMODEL', 'memory': 25.0})
mdb.jobs['TWOHALFMODEL']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'TWOHALFMODEL', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['TWOHALFMODEL']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TWOHALFMODEL'})
mdb.jobs['TWOHALFMODEL']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 01 18:55:41 2018', 'jobName': 'TWOHALFMODEL'})
# Save by bijran on 2018_12_01-19.01.18; build 6.14-2 2014_08_22-22.00.46 134497
