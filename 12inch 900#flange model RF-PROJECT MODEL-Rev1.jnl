# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.openAcis('D:/MS PROGRAM/project/MODEL 12INCH 900#RF FLANGE/obj/hbolt.sat', 
    scaleFromFile=OFF)
mdb.models['Model-1'].ConstrainedSketchFromGeometryFile(geometryFile=mdb.acis, 
    name='hbolt')
mdb.models['Model-1'].ConstrainedSketch(name='__sweep__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__sweep__'].sketchOptions.setValues(gridOrigin=
    (13.5, 0.0))
mdb.models['Model-1'].sketches['__sweep__'].retrieveSketch(sketch=
    mdb.models['Model-1'].sketches['hbolt'])
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0, 
    transform=(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 27.0, 87.4, 0.0))
mdb.models['Model-1'].sketches['__profile__'].ConstructionLine(point1=(-100.0, 
    0.0), point2=(100.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].ConstructionLine(point1=(0.0, 
    -100.0), point2=(0.0, 100.0))
del mdb.models['Model-1'].sketches['__profile__']
del mdb.models['Model-1'].sketches['__sweep__']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].ConstructionLine(point1=(0.0, 
    -100.0), point2=(0.0, 100.0))
mdb.models['Model-1'].sketches['__profile__'].FixedConstraint(entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['Model-1'].sketches['hbolt'])
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='BOLT', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['BOLT'].BaseSolidRevolve(angle=180.0, 
    flipRevolveDirection=OFF, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['BOLT'].features['Solid revolve-1'].sketch)
mdb.models['Model-1'].parts['BOLT'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['BOLT'].features['Solid revolve-1'])
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(0.0, 0.0), point2=(
    46.25, 0.0))
mdb.models['Model-1'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__edit__'].geometry[13])
mdb.models['Model-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[7], point1=(
    0.172988891601563, -101.34156036377))
mdb.models['Model-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[11], point1=(
    18.2157287597656, -75.0297546386719))
mdb.models['Model-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[9], point1=(
    28.8773345947266, -97.230339050293))
mdb.models['Model-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[10], point1=(
    23.1364898681641, -89.0079040527344))
mdb.models['Model-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[8], point1=(
    21.4962005615234, -119.84204864502))
mdb.models['Model-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[13], point1=(
    41.5892791748047, 0.205558776855469))
mdb.models['Model-1'].parts['BOLT'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['BOLT'].regenerate()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.openAcis(
    'D:/MS PROGRAM/project/MODEL 12INCH 900#RF FLANGE/obj/RF12FLANGE900.sat', 
    scaleFromFile=OFF)
mdb.models['Model-1'].ConstrainedSketchFromGeometryFile(geometryFile=mdb.acis, 
    name='RF12FLANGE900')
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].ConstructionLine(point1=(0.0, 
    -100.0), point2=(0.0, 100.0))
mdb.models['Model-1'].sketches['__profile__'].FixedConstraint(entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['Model-1'].sketches['RF12FLANGE900'])
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='FLANGE', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['FLANGE'].BaseSolidRevolve(angle=9.0, 
    flipRevolveDirection=OFF, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['FLANGE'].features['Solid revolve-1'].sketch)
mdb.models['Model-1'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['FLANGE'].features['Solid revolve-1'])
mdb.models['Model-1'].sketches['__edit__'].DistanceDimension(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry[7], textPoint=(
    113.669471740723, -44.2024307250977), value=146.0)
mdb.models['Model-1'].sketches['__edit__'].DistanceDimension(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[4], textPoint=(
    180.355697631836, -81.387809753418), value=190.5)
mdb.models['Model-1'].sketches['__edit__'].DistanceDimension(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[6], textPoint=(
    132.77619934082, -121.953659057617), value=305.0)
mdb.models['Model-1'].sketches['__edit__'].VerticalDimension(textPoint=(
    342.575500488281, -82.890251159668), value=79.4, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[6], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[7])
mdb.models['Model-1'].sketches['__edit__'].ObliqueDimension(textPoint=(
    211.825592041016, -8.0), value=6.0, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[4], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[5])
mdb.models['Model-1'].sketches['__edit__'].HorizontalDimension(textPoint=(
    184.219741821289, 8.81254577636719), value=44.5, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[3], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[4])
mdb.models['Model-1'].sketches['__edit__'].HorizontalDimension(textPoint=(
    296.738586425781, -156.479156494141), value=95.5, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[7])
mdb.models['Model-1'].sketches['__edit__'].HorizontalDimension(textPoint=(
    299.619293212891, 34.7456665039063), value=114.5, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[4], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[6])
mdb.models['Model-1'].sketches['__edit__'].HorizontalDimension(textPoint=(
    158.654357910156, -246.754196166992), value=16.0, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[2], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[1])
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].dimensions[5], ))
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].dimensions[7], ))
mdb.models['Model-1'].parts['FLANGE'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['FLANGE'].regenerate()
mdb.openAcis(
    'D:/MS PROGRAM/project/MODEL 12INCH 900#RF FLANGE/obj/BOLT12HOLE900.sat', 
    scaleFromFile=OFF)
mdb.models['Model-1'].ConstrainedSketchFromGeometryFile(geometryFile=mdb.acis, 
    name='BOLT12HOLE900')
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.openAcis(
    'D:/MS PROGRAM/project/MODEL 12INCH 900#RF FLANGE/obj/SPIRAL12WOUND900GASK.sat'
    , scaleFromFile=OFF)
mdb.models['Model-1'].ConstrainedSketchFromGeometryFile(geometryFile=mdb.acis, 
    name='SPIRAL12WOUND900GASK')
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].ConstructionLine(point1=(0.0, 
    -100.0), point2=(0.0, 100.0))
mdb.models['Model-1'].sketches['__profile__'].FixedConstraint(entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['Model-1'].sketches['SPIRAL12WOUND900GASK'])
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='SPRIALWOUND GASKET', 
    type=DEFORMABLE_BODY)
mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].BaseSolidRevolve(angle=9.0, 
    flipRevolveDirection=OFF, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].features['Solid revolve-1'].sketch)
mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].features['Solid revolve-1'])
mdb.models['Model-1'].sketches['__edit__'].VerticalDimension(textPoint=(
    184.512283325195, -1.20052242279053), value=2.25, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[2], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[3])
mdb.models['Model-1'].sketches['__edit__'].ObliqueDimension(textPoint=(
    153.114288330078, -2.1346435546875), value=2.25, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[1], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[0])
mdb.models['Model-1'].sketches['__edit__'].undo()
mdb.models['Model-1'].sketches['__edit__'].undo()
mdb.models['Model-1'].sketches['__edit__'].offset(distance=2.25, objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[8], ), side=LEFT)
mdb.models['Model-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[6], point1=(
    167.6240234375, 1.50215911865234))
mdb.models['Model-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[5], point1=(
    163.2080078125, 1.81840133666992))
mdb.models['Model-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[7], point1=(
    184.657165527344, 1.02779006958008))
mdb.models['Model-1'].sketches['__edit__'].DistanceDimension(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[0], textPoint=(
    155.953155517578, -10.5151023864746), value=162.0)
mdb.models['Model-1'].sketches['__edit__'].move(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[8], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[9], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[10], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[11]), vector=(0.0, 
    -0.25))
mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['FLANGE'].features['Solid revolve-1'].sketch)
mdb.models['Model-1'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['FLANGE'].features['Solid revolve-1'])
mdb.models['Model-1'].sketches['__edit__'].move(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[5], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[6], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[7], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[8], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[9], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[10], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[11], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[12]), vector=(0.0, 
    4.25))
mdb.models['Model-1'].sketches['__edit__'].undo()
mdb.models['Model-1'].sketches['__edit__'].move(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[5], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[6], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[7], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[8], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[9], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[10], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[11], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[12]), vector=(0.0, 
    -0.25))
mdb.models['Model-1'].parts['FLANGE'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['FLANGE'].regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].features['Solid revolve-1'].sketch)
mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].features['Solid revolve-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=15.44, name='__profile__', 
    sheetSize=617.63, transform=
    mdb.models['Model-1'].parts['FLANGE'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['FLANGE'].faces[5], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['FLANGE'].edges[16], 
    sketchOrientation=RIGHT, origin=(251.124084, -8.25, 19.763894)))
mdb.models['Model-1'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=15.44, name='__profile__', 
    sheetSize=617.63, transform=
    mdb.models['Model-1'].parts['FLANGE'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['FLANGE'].faces[5], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['FLANGE'].edges[18], 
    sketchOrientation=RIGHT, origin=(251.124084, -8.25, 19.763894)))
mdb.models['Model-1'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['Model-1'].sketches['BOLT12HOLE900'])
mdb.models['Model-1'].sketches['__profile__'].undo()
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['FLANGE'].features['Solid revolve-1'].sketch)
mdb.models['Model-1'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['FLANGE'].features['Solid revolve-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=15.44, name='__profile__', 
    sheetSize=617.63, transform=
    mdb.models['Model-1'].parts['FLANGE'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['FLANGE'].faces[5], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['FLANGE'].edges[16], 
    sketchOrientation=RIGHT, origin=(251.124084, -8.25, 19.763894)))
mdb.models['Model-1'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].move(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[5]), vector=(
    -19.7638940706998, 251.124083994436))
mdb.models['Model-1'].sketches['__profile__'].move(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[5]), vector=(
    -19.7638940706998, 251.124083994436))
mdb.models['Model-1'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['Model-1'].sketches['BOLT12HOLE900'])
mdb.models['Model-1'].sketches['__profile__'].Arc3Points(point1=(-143.697372, 
    123.002628), point2=(-130.644144895917, 40.5877956002015), point3=(
    123.002628, -143.697372))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-162.697372, 
    123.002628), point2=(331.96, 123.002628000001))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[17])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[14], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[17])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(123.002628, 
    -124.697372), point2=(123.002628, 177.56))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[18])
mdb.models['Model-1'].sketches['__profile__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__profile__'].geometry[8], 
    entity2=mdb.models['Model-1'].sketches['__profile__'].geometry[18])
mdb.models['Model-1'].sketches['__profile__'].move(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[9], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[10], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[11], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[12], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[13], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[14], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[15], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[16], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[17], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[18]), vector=(
    -103.2387339293, -374.126711994436))
mdb.models['Model-1'].sketches['__profile__'].rotate(angle=90.0, centerPoint=(
    19.7638940706998, -251.124083994436), objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[9], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[10], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[11], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[12], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[13], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[14], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[15], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[16], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[17], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[18]))
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].rotate(angle=-90.0, centerPoint=(
    19.7638940706998, -251.124083994436), objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[9], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[10], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[11], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[12], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[13], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[14], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[15], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[16], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[17], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[18]))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[9], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[10], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[11], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[12], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[13], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[16], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[18], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[17], 
    mdb.models['Model-1'].sketches['__profile__'].constraints[49]))
mdb.models['Model-1'].parts['FLANGE'].CutExtrude(flipExtrudeDirection=OFF, 
    sketch=mdb.models['Model-1'].sketches['__profile__'], sketchOrientation=
    RIGHT, sketchPlane=mdb.models['Model-1'].parts['FLANGE'].faces[5], 
    sketchPlaneSide=SIDE1, sketchUpEdge=
    mdb.models['Model-1'].parts['FLANGE'].edges[16])
del mdb.models['Model-1'].sketches['__profile__']
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=6.16, name='__profile__', 
    sheetSize=246.78, transform=
    mdb.models['Model-1'].parts['BOLT'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['BOLT'].faces[5], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['BOLT'].edges[6], 
    sketchOrientation=RIGHT, origin=(-10.6271, 65.466983, 0.0)))
mdb.models['Model-1'].parts['BOLT'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-65.466983, 10.6271)
    , point2=(54.933017, 10.6271))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[14])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[14])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(54.933017, 10.6271), 
    point2=(-65.466983, 10.6271))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[15])
mdb.models['Model-1'].sketches['__profile__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__profile__'].geometry[14], 
    entity2=mdb.models['Model-1'].sketches['__profile__'].geometry[15])
mdb.models['Model-1'].parts['BOLT'].PartitionFaceBySketchThruAll(faces=
    mdb.models['Model-1'].parts['BOLT'].faces.getSequenceFromMask(('[#24 ]', ), 
    ), sketch=mdb.models['Model-1'].sketches['__profile__'], sketchPlane=
    mdb.models['Model-1'].parts['BOLT'].faces[5], sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['BOLT'].edges[6])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].parts['BOLT'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].parts['BOLT'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), point1=mdb.models['Model-1'].parts['BOLT'].vertices[0], point2=
    mdb.models['Model-1'].parts['BOLT'].vertices[1], point3=
    mdb.models['Model-1'].parts['BOLT'].vertices[7])
mdb.models['Model-1'].parts['BOLT'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['BOLT'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), edges=(mdb.models['Model-1'].parts['BOLT'].edges[17], ), line=
    mdb.models['Model-1'].parts['BOLT'].edges[3], sense=FORWARD)
mdb.models['Model-1'].parts['BOLT'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['BOLT'].cells.getSequenceFromMask(('[#4 ]', ), 
    ), edges=(mdb.models['Model-1'].parts['BOLT'].edges[18], ), line=
    mdb.models['Model-1'].parts['BOLT'].edges[14], sense=FORWARD)
mdb.models['Model-1'].parts['BOLT'].PartitionCellByExtendFace(cells=
    mdb.models['Model-1'].parts['BOLT'].cells.getSequenceFromMask(('[#4 ]', ), 
    ), extendFace=mdb.models['Model-1'].parts['BOLT'].faces[17])
mdb.models['Model-1'].parts['BOLT'].PartitionCellByExtendFace(cells=
    mdb.models['Model-1'].parts['BOLT'].cells.getSequenceFromMask(('[#10 ]', ), 
    ), extendFace=mdb.models['Model-1'].parts['BOLT'].faces[12])
mdb.models['Model-1'].parts['FLANGE'].PartitionCellByExtendFace(cells=
    mdb.models['Model-1'].parts['FLANGE'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), extendFace=mdb.models['Model-1'].parts['FLANGE'].faces[1])
mdb.models['Model-1'].parts['FLANGE'].PartitionCellByExtendFace(cells=
    mdb.models['Model-1'].parts['FLANGE'].cells.getSequenceFromMask(('[#2 ]', 
    ), ), extendFace=mdb.models['Model-1'].parts['FLANGE'].faces[13])
mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].PartitionEdgeByPoint(edge=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].edges[1], point=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].InterestingPoint(
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].edges[1], MIDDLE))
mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].PartitionFaceByShortestPath(
    faces=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), point1=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].vertices[2], point2=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].InterestingPoint(
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].edges[4], MIDDLE))
mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].PartitionCellByExtendFace(
    cells=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), extendFace=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].faces[0])
#* Feature creation failed.
mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].PartitionCellByExtendFace(
    cells=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), extendFace=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].faces[1])
#* Feature creation failed.
mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].PartitionFaceByShortestPath(
    faces=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].faces.getSequenceFromMask(
    ('[#2 ]', ), ), point1=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].vertices[0], point2=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].InterestingPoint(
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].edges[4], MIDDLE))
mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].deleteFeatures((
    'Partition edge-1', 'Partition face-1', 'Partition face-2'))
mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), point1=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].InterestingPoint(
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].edges[5], MIDDLE), 
    point2=mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].InterestingPoint(
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].edges[1], MIDDLE), 
    point3=mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].InterestingPoint(
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].edges[3], MIDDLE))
mdb.models['Model-1'].parts['FLANGE'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].parts['FLANGE'].cells.getSequenceFromMask(('[#4 ]', 
    ), ), point1=mdb.models['Model-1'].parts['FLANGE'].InterestingPoint(
    mdb.models['Model-1'].parts['FLANGE'].edges[37], MIDDLE), point2=
    mdb.models['Model-1'].parts['FLANGE'].InterestingPoint(
    mdb.models['Model-1'].parts['FLANGE'].edges[27], MIDDLE), point3=
    mdb.models['Model-1'].parts['FLANGE'].InterestingPoint(
    mdb.models['Model-1'].parts['FLANGE'].edges[16], MIDDLE))
mdb.models['Model-1'].parts['FLANGE'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].parts['FLANGE'].cells.getSequenceFromMask(('[#4 ]', 
    ), ), point1=mdb.models['Model-1'].parts['FLANGE'].vertices[5], point2=
    mdb.models['Model-1'].parts['FLANGE'].InterestingPoint(
    mdb.models['Model-1'].parts['FLANGE'].edges[47], MIDDLE), point3=
    mdb.models['Model-1'].parts['FLANGE'].InterestingPoint(
    mdb.models['Model-1'].parts['FLANGE'].edges[45], MIDDLE))
mdb.models['Model-1'].parts['FLANGE'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].parts['FLANGE'].cells.getSequenceFromMask(('[#4 ]', 
    ), ), point1=mdb.models['Model-1'].parts['FLANGE'].InterestingPoint(
    mdb.models['Model-1'].parts['FLANGE'].edges[37], MIDDLE), point2=
    mdb.models['Model-1'].parts['FLANGE'].InterestingPoint(
    mdb.models['Model-1'].parts['FLANGE'].edges[50], MIDDLE), point3=
    mdb.models['Model-1'].parts['FLANGE'].vertices[10])
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='FLANGE-1', 
    part=mdb.models['Model-1'].parts['FLANGE'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name=
    'SPRIALWOUND GASKET-1', part=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='BOLT-1', part=
    mdb.models['Model-1'].parts['BOLT'])
mdb.models['Model-1'].rootAssembly.rotate(angle=180.0, axisDirection=(0.0, 0.0, 
    18.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('BOLT-1', ))
mdb.models['Model-1'].rootAssembly.rotate(angle=180.0, axisDirection=(0.0, 
    -120.4, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('BOLT-1', ))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('BOLT-1', ), vector=
    (263.41648, -0.25, 41.721072))
mdb.models['Model-1'].rootAssembly.rotate(angle=9.0, axisDirection=(0.0, 
    -120.4, 0.0), axisPoint=(263.41648, -0.25, 41.721072), instanceList=(
    'BOLT-1', ))
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['BOLT'].features['Solid revolve-1'].sketch)
mdb.models['Model-1'].parts['BOLT'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['BOLT'].features['Solid revolve-1'])
mdb.models['Model-1'].sketches['__edit__'].VerticalDimension(textPoint=(
    53.820686340332, 67.2918548583984), value=87.65, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[8], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[7])
mdb.models['Model-1'].sketches['__edit__'].VerticalDimension(textPoint=(
    82.2753219604492, 17.4850425720215), value=87.65, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[10])
mdb.models['Model-1'].sketches['__edit__'].undo()
mdb.models['Model-1'].sketches['__edit__'].HorizontalDimension(textPoint=(
    26.3018112182617, 78.9477767944336), value=9.0, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[7], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[0])
mdb.models['Model-1'].sketches['__edit__'].VerticalDimension(textPoint=(
    90.8866348266602, 29.8187026977539), value=87.65, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[8])
mdb.models['Model-1'].sketches['__edit__'].offset(distance=0.25, objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[6], ), side=RIGHT)
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(27.0, 120.15), point2=(
    27.0, 120.4))
mdb.models['Model-1'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__edit__'].geometry[18])
mdb.models['Model-1'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[17], entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry[18])
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[6], ))
mdb.models['Model-1'].sketches['__edit__'].move(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[17], ), vector=(0.0, 
    0.25))
mdb.models['Model-1'].parts['BOLT'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['BOLT'].regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-1'].parts['BOLT'].backup()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['BOLT'].features['Partition face-1'].sketch)
mdb.models['Model-1'].parts['BOLT'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['BOLT'].features['Partition face-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['BOLT'].features['Partition face-1'].sketch)
mdb.models['Model-1'].parts['BOLT'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['BOLT'].features['Partition face-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['BOLT'].regenerate()
mdb.models['Model-1'].parts['BOLT'].deleteFeatures(('Partition face-1', 
    'Partition cell-1', 'Partition cell-3', 'Partition cell-2'))
mdb.models['Model-1'].parts['BOLT'].deleteFeatures(('Partition cell-4', 
    'Partition cell-5'))
mdb.models['Model-1'].parts['BOLT'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].parts['BOLT'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), point1=mdb.models['Model-1'].parts['BOLT'].InterestingPoint(
    mdb.models['Model-1'].parts['BOLT'].edges[1], CENTER), point2=
    mdb.models['Model-1'].parts['BOLT'].vertices[5], point3=
    mdb.models['Model-1'].parts['BOLT'].InterestingPoint(
    mdb.models['Model-1'].parts['BOLT'].edges[7], MIDDLE))
mdb.models['Model-1'].parts['BOLT'].PartitionCellBySweepEdge(cells=
    mdb.models['Model-1'].parts['BOLT'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), edges=(mdb.models['Model-1'].parts['BOLT'].edges[8], ), sweepPath=
    mdb.models['Model-1'].parts['BOLT'].edges[14])
mdb.models['Model-1'].parts['BOLT'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['BOLT'].cells.getSequenceFromMask(('[#4 ]', ), 
    ), edges=(mdb.models['Model-1'].parts['BOLT'].edges[18], ), line=
    mdb.models['Model-1'].parts['BOLT'].edges[1], sense=REVERSE)
mdb.models['Model-1'].parts['BOLT'].PartitionCellByExtendFace(cells=
    mdb.models['Model-1'].parts['BOLT'].cells.getSequenceFromMask(('[#2 ]', ), 
    ), extendFace=mdb.models['Model-1'].parts['BOLT'].faces[8])
mdb.models['Model-1'].parts['BOLT'].PartitionCellByExtendFace(cells=
    mdb.models['Model-1'].parts['BOLT'].cells.getSequenceFromMask(('[#2 ]', ), 
    ), extendFace=mdb.models['Model-1'].parts['BOLT'].faces[20])
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['BOLT'].features['Solid revolve-1'].sketch)
mdb.models['Model-1'].parts['BOLT'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['BOLT'].features['Solid revolve-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].rootAssembly.translate(instanceList=('BOLT-1', ), vector=
    (0.0, 0.0, 200.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('BOLT-1', ), vector=
    (0.0, 0.166667, -200.0))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].Material(description=
    'source Marks mech handbook - Materials', name='SPRIAL WOUND GASKET')
mdb.models['Model-1'].materials['SPRIAL WOUND GASKET'].Elastic(table=((18000.0, 
    0.3), ))
mdb.models['Model-1'].materials['SPRIAL WOUND GASKET'].Expansion(table=((
    1.8e-05, ), ))
mdb.models['Model-1'].materials['SPRIAL WOUND GASKET'].GasketMembraneElastic(
    table=((18000.0, 0.3), ))
mdb.models['Model-1'].materials['SPRIAL WOUND GASKET'].GasketTransverseShearElastic(
    table=((68.966, ), ))
mdb.models['Model-1'].Material(name='FLANGE')
mdb.models['Model-1'].materials['FLANGE'].Elastic(table=((203395.0, 0.3), ))
mdb.models['Model-1'].materials['FLANGE'].Expansion(table=((1.265e-05, ), ))
mdb.models['Model-1'].Material(name='BOLT AND NUT')
mdb.models['Model-1'].materials['BOLT AND NUT'].Elastic(table=((204000.0, 0.3), 
    ))
mdb.models['Model-1'].materials['BOLT AND NUT'].Expansion(table=((1.265e-05, ), 
    ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.makeIndependent(instances=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.makeIndependent(instances=(
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ))
mdb.models['Model-1'].rootAssembly.makeIndependent(instances=(
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'], ))
mdb.models['Model-1'].HomogeneousSolidSection(material='BOLT AND NUT', name=
    'BOLT', thickness=1.0)
mdb.models['Model-1'].parts['BOLT'].Set(cells=
    mdb.models['Model-1'].parts['BOLT'].cells.getSequenceFromMask(('[#3f ]', ), 
    ), name='Set-1')
mdb.models['Model-1'].parts['BOLT'].SectionAssignment(offset=0.0, offsetField=
    '', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['BOLT'].sets['Set-1'], sectionName='BOLT', 
    thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].HomogeneousSolidSection(material='FLANGE', name=
    'Section-2', thickness=1.0)
mdb.models['Model-1'].sections.changeKey(fromName='Section-2', toName='FLANGE')
mdb.models['Model-1'].parts['FLANGE'].Set(cells=
    mdb.models['Model-1'].parts['FLANGE'].cells.getSequenceFromMask(('[#3f ]', 
    ), ), name='Set-1')
mdb.models['Model-1'].parts['FLANGE'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['FLANGE'].sets['Set-1'], sectionName='FLANGE', 
    thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].GasketSection(material='SPRIAL WOUND GASKET', name=
    'GASKET')
mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].Set(cells=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), name='Set-1')
mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['SPRIALWOUND GASKET'].sets['Set-1'], 
    sectionName='GASKET', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], 
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], 
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1']), size=2.0)
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], 
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], 
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1']), size=10.0)
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], 
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], 
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1']), size=30.0)
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], 
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], 
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1']), size=20.0)
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], 
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], 
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1']), size=5.0)
mdb.models['Model-1'].rootAssembly.setMeshControls(algorithm=ADVANCING_FRONT, 
    regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    mask=('[#1f ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    mask=('[#3 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].cells.getSequenceFromMask(
    mask=('[#3f ]', ), ), technique=SWEEP)
mdb.models['Model-1'].rootAssembly.setMeshControls(regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    mask=('[#1f ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    mask=('[#3 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].cells.getSequenceFromMask(
    mask=('[#3f ]', ), ), technique=STRUCTURED)
mdb.models['Model-1'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=C3D8, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    mask=('[#3f ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    mask=('[#3 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].cells.getSequenceFromMask(
    mask=('[#3f ]', ), ), ))
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#1f ]', ), ))
mdb.models['Model-1'].rootAssembly.setMeshControls(elemShape=TET, regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    mask=('[#3f ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    mask=('[#3 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].cells.getSequenceFromMask(
    mask=('[#3f ]', ), ), technique=FREE)
mdb.models['Model-1'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    mask=('[#3f ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    mask=('[#3 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].cells.getSequenceFromMask(
    mask=('[#3f ]', ), ), ))
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], 
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], 
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1']))
mdb.models['Model-1'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)), regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    mask=('[#3f ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    mask=('[#3 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].cells.getSequenceFromMask(
    mask=('[#3f ]', ), ), ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-1'].rootAssembly.setMeshControls(elemShape=HEX, regions=
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), technique=STRUCTURED)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].edges.getSequenceFromMask(
    ('[#800 ]', ), ), minSizeFactor=0.1, size=0.5)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].cells.getSequenceFromMask(
    ('[#3f ]', ), ))
mdb.models['Model-1'].rootAssembly.setMeshControls(elemShape=HEX, regions=
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), technique=STRUCTURED)
mdb.models['Model-1'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=C3D8, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT)), regions=(
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'], ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].StaticStep(matrixSolver=DIRECT, matrixStorage=SYMMETRIC, 
    name='Step-1', nlgeom=ON, previous='Initial')
mdb.models['Model-1'].steps['Step-1'].setValues(matrixSolver=DIRECT, 
    matrixStorage=SOLVER_DEFAULT)
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].edges.getSequenceFromMask(
    ('[#100 ]', ), ), faces=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    mask=('[#2120000 #2 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].faces.getSequenceFromMask(
    mask=('[#180024a ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces.getSequenceFromMask(
    mask=('[#200 ]', ), ), name='Set-11')
mdb.models['Model-1'].XsymmBC(createStepName='Step-1', localCsys=None, name=
    'BC-1', region=mdb.models['Model-1'].rootAssembly.sets['Set-11'])
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    mask=('[#21002020 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces.getSequenceFromMask(
    mask=('[#30 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].faces.getSequenceFromMask(
    mask=('[#88000 ]', ), ), name='Set-12')
mdb.models['Model-1'].YsymmBC(createStepName='Step-1', localCsys=None, name=
    'BC-2', region=mdb.models['Model-1'].rootAssembly.sets['Set-12'])
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    ('[#240000 #4 ]', ), ), name='Set-13')
mdb.models['Model-1'].XsymmBC(createStepName='Step-1', localCsys=None, name=
    'BC-3', region=mdb.models['Model-1'].rootAssembly.sets['Set-13'])
mdb.models['Model-1'].boundaryConditions['BC-1'].setValues(typeName=ZSYMM)
mdb.models['Model-1'].boundaryConditions['BC-3'].setValues(typeName=ZSYMM)
mdb.models['Model-1'].boundaryConditions['BC-1'].setValues(typeName=XSYMM)
mdb.models['Model-1'].boundaryConditions['BC-3'].setValues(typeName=XSYMM)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].boundaryConditions['BC-1'].setValues(typeName=ZSYMM)
mdb.models['Model-1'].boundaryConditions['BC-1'].setValues(localCsys=
    mdb.models['Model-1'].rootAssembly.datums[1])
mdb.models['Model-1'].rootAssembly.DatumPlaneByPrincipalPlane(offset=0.0, 
    principalPlane=XYPLANE)
mdb.models['Model-1'].rootAssembly.DatumAxisByPrincipalAxis(principalAxis=
    ZAXIS)
mdb.models['Model-1'].rootAssembly.DatumAxisByPrincipalAxis(principalAxis=
    ZAXIS)
mdb.models['Model-1'].rootAssembly.DatumAxisByPrincipalAxis(principalAxis=
    XAXIS)
mdb.models['Model-1'].rootAssembly.DatumAxisByPrincipalAxis(principalAxis=
    XAXIS)
mdb.models['Model-1'].rootAssembly.DatumAxisByPrincipalAxis(principalAxis=
    XAXIS)
mdb.models['Model-1'].rootAssembly.deleteFeatures(('Datum csys-1', 
    'Datum plane-1', 'Datum axis-1', 'Datum axis-2', 'Datum axis-3', 
    'Datum axis-4', 'Datum axis-5'))
mdb.models['Model-1'].boundaryConditions['BC-3'].setValues(typeName=ZSYMM)
mdb.models['Model-1'].rootAssembly.DatumCsysByThreePoints(coordSysType=
    CARTESIAN, name='Datum csys-1', origin=(0.0, 0.0, 0.0), point1=
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].vertices[17], 
    point2=
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].edges[12], MIDDLE))
del mdb.models['Model-1'].rootAssembly.features['Datum csys-1']
mdb.models['Model-1'].rootAssembly.DatumCsysByThreePoints(coordSysType=
    CARTESIAN, line1=(1.0, 0.0, 0.0), line2=(0.0, 1.0, 0.0), name=
    'Datum csys-1', origin=(0.0, 0.0, 0.0))
mdb.models['Model-1'].boundaryConditions['BC-1'].setValues(localCsys=
    mdb.models['Model-1'].rootAssembly.datums[43])
mdb.models['Model-1'].boundaryConditions['BC-1'].setValues(localCsys=None)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['BOLT'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].parts['BOLT'].cells.getSequenceFromMask(('[#3 ]', ), 
    ), point1=mdb.models['Model-1'].parts['BOLT'].InterestingPoint(
    mdb.models['Model-1'].parts['BOLT'].edges[32], MIDDLE), point2=
    mdb.models['Model-1'].parts['BOLT'].InterestingPoint(
    mdb.models['Model-1'].parts['BOLT'].edges[12], MIDDLE), point3=
    mdb.models['Model-1'].parts['BOLT'].InterestingPoint(
    mdb.models['Model-1'].parts['BOLT'].edges[29], MIDDLE))
#* Feature creation failed.
mdb.models['Model-1'].parts['BOLT'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].parts['BOLT'].cells.getSequenceFromMask(('[#3 ]', ), 
    ), point1=mdb.models['Model-1'].parts['BOLT'].InterestingPoint(
    mdb.models['Model-1'].parts['BOLT'].edges[10], MIDDLE), point2=
    mdb.models['Model-1'].parts['BOLT'].InterestingPoint(
    mdb.models['Model-1'].parts['BOLT'].edges[29], MIDDLE), point3=
    mdb.models['Model-1'].parts['BOLT'].InterestingPoint(
    mdb.models['Model-1'].parts['BOLT'].edges[32], MIDDLE))
mdb.models['Model-1'].parts['FLANGE'].DatumAxisByPrincipalAxis(principalAxis=
    YAXIS)
mdb.models['Model-1'].parts['FLANGE'].DatumPointByCoordinate(coords=(0.0, 0.0, 
    0.0))
mdb.models['Model-1'].parts['FLANGE'].DatumAxisByTwoPoint(point1=
    mdb.models['Model-1'].parts['FLANGE'].vertices[24], point2=
    mdb.models['Model-1'].parts['FLANGE'].vertices[15])
del mdb.models['Model-1'].parts['FLANGE'].features['Datum axis-2']
mdb.models['Model-1'].parts['FLANGE'].DatumAxisByTwoPoint(point1=
    mdb.models['Model-1'].parts['FLANGE'].vertices[32], point2=
    mdb.models['Model-1'].parts['FLANGE'].vertices[16])
del mdb.models['Model-1'].parts['FLANGE'].features['Datum axis-2']
mdb.models['Model-1'].parts['FLANGE'].DatumAxisByTwoPoint(point1=
    mdb.models['Model-1'].parts['FLANGE'].vertices[32], point2=
    mdb.models['Model-1'].parts['FLANGE'].datums[10])
mdb.models['Model-1'].parts['FLANGE'].DatumPlaneByLinePoint(line=
    mdb.models['Model-1'].parts['FLANGE'].datums[13], point=
    mdb.models['Model-1'].parts['FLANGE'].vertices[29])
del mdb.models['Model-1'].parts['FLANGE'].features['Datum plane-1']
mdb.models['Model-1'].parts['FLANGE'].DatumCsysByTwoLines(CARTESIAN, line1=
    mdb.models['Model-1'].parts['FLANGE'].datums[13], line2=
    mdb.models['Model-1'].parts['FLANGE'].datums[9], name='Datum csys-1')
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].boundaryConditions['BC-1'].setValues(localCsys=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].datums[15])
del mdb.models['Model-1'].boundaryConditions['BC-1']
del mdb.models['Model-1'].boundaryConditions['BC-2']
del mdb.models['Model-1'].boundaryConditions['BC-3']
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ), size=10.0)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ), size=7.1)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ), size=7.0)
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.05, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ), size=7.0)
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.05, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ), size=7.1)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.05, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ), size=6.5)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    mask=('[#2120000 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].faces.getSequenceFromMask(
    mask=('[#c0012514 ]', ), ), name='Set-4')
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    mask=('[#2120000 #2 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].faces.getSequenceFromMask(
    mask=('[#c0012514 ]', ), ), name='Set-4')
mdb.models['Model-1'].rootAssembly.Set(name='Set-5', nodes=
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#e000c #f0f #0 #3ffc000 ]', ), ))
mdb.models['Model-1'].rootAssembly.sets.changeKey(fromName='Set-5', toName=
    'gaskets1')
mdb.models['Model-1'].rootAssembly.sets.changeKey(fromName='Set-4', toName=
    'flgbolts')
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].edges.getSequenceFromMask(
    ('[#8000 ]', ), ), name='gaskets2')
mdb.models['Model-1'].rootAssembly.Set(name='gaskettop', nodes=
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#c7c00090 #31800000 #3f000 #0 #3f ]', ), ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ), 
    size=1.0)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ), 
    size=5.0)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ))
mdb.models['Model-1'].rootAssembly.Set(name='gaskets1', nodes=
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#0 #f0f #0 #3ffc000 ]', ), ))
mdb.models['Model-1'].rootAssembly.Set(name='gaskettop', nodes=
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#c7c00090 #31800000 #3f000 #0 #3f ]', ), ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].YsymmBC(createStepName='Step-1', localCsys=None, name=
    'BC-1', region=mdb.models['Model-1'].rootAssembly.sets['gaskettop'])
mdb.models['Model-1'].ZsymmBC(createStepName='Step-1', localCsys=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].datums[15], name=
    'BC-2', region=mdb.models['Model-1'].rootAssembly.sets['gaskets2'])
mdb.models['Model-1'].ZsymmBC(createStepName='Step-1', localCsys=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].datums[15], name=
    'BC-3', region=mdb.models['Model-1'].rootAssembly.sets['gaskets1'])
mdb.models['Model-1'].ZsymmBC(createStepName='Step-1', localCsys=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].datums[15], name=
    'BC-4', region=mdb.models['Model-1'].rootAssembly.sets['flgbolts'])
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].faces.getSequenceFromMask(
    ('[#4400000 ]', ), ), name='bolttop')
del mdb.models['Model-1'].rootAssembly.sets['bolttop']
mdb.models['Model-1'].rootAssembly.Set(name='bolttop', nodes=
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].nodes.getSequenceFromMask(
    mask=('[#400 #0:2 #778000 #7c #0:10 #fc000000 #fbf ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].nodes.getSequenceFromMask(
    mask=('[#0:36 #100001 ]', ), ))
mdb.models['Model-1'].YsymmBC(createStepName='Step-1', localCsys=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].datums[15], name=
    'BC-5', region=mdb.models['Model-1'].rootAssembly.sets['bolttop'])
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    mask=('[#240000 #4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces.getSequenceFromMask(
    mask=('[#400 ]', ), ), name='flangeglobal')
mdb.models['Model-1'].ZsymmBC(createStepName='Step-1', localCsys=None, name=
    'BC-6', region=mdb.models['Model-1'].rootAssembly.sets['flangeglobal'])
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#3f ]', ), ))
mdb.models['Model-1'].rootAssembly.PartitionCellByExtendFace(cells=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#24 ]', ), ), extendFace=
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].faces[28])
mdb.models['Model-1'].rootAssembly.PartitionCellByExtendFace(cells=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#21 ]', ), ), extendFace=
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].faces[23])
#* Feature creation failed.
mdb.models['Model-1'].rootAssembly.PartitionCellByExtendFace(cells=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#21 ]', ), ), extendFace=
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].faces[23])
#* Feature creation failed.
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)), regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#1fb ]', ), ), ))
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.05, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ), size=5.0)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#1fb ]', ), ))
mdb.models['Model-1'].rootAssembly.setMeshControls(regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#1fb ]', ), ), sizeGrowthRate=1.28)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.05, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ), size=4.0)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#127 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.05, edges=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].edges.getSequenceFromMask(
    ('[#c8 #80000000 ]', ), ), minSizeFactor=0.1, size=2.0)
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], 
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1']))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.05, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], 
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1']), size=5.5)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#127 ]', ), ))
mdb.models['Model-1'].rootAssembly.deleteSeeds(regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].edges.getSequenceFromMask(
    ('[#c8 #c2000000 #1 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.05, edges=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].edges.getSequenceFromMask(
    ('[#40003ee #c0000000 #221 ]', ), ), minSizeFactor=0.1, size=2.0)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#127 ]', ), ))
mdb.models['Model-1'].rootAssembly.deleteSeeds(regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].edges.getSequenceFromMask(
    ('[#222 ]', ), ))
mdb.models['Model-1'].rootAssembly.deleteSeeds(regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].edges.getSequenceFromMask(
    ('[#c8 ]', ), ))
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-1'].rootAssembly.deleteSeeds(regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].edges.getSequenceFromMask(
    ('[#4000000 #80000000 #220 ]', ), ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-1'].rootAssembly.deleteSeeds(regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].edges.getSequenceFromMask(
    ('[#104 #40000000 #1 ]', ), ))
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.05, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ), size=5.0)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.05, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ), size=4.5)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.generateMesh(boundaryPreview=ON, regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.05, 
    minSizeFactor=0.01, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ), size=4.5)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.generateMesh(boundaryPreview=ON, regions=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ), size=7.1)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'], ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ), 
    size=1.0)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.Set(name='bolttop', nodes=
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].nodes.getSequenceFromMask(
    mask=('[#400 #0:2 #f007f #0:8 #7df8 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].nodes.getSequenceFromMask(
    mask=('[#0:76 #4 ]', ), ))
mdb.models['Model-1'].rootAssembly.Set(name='gaskets1', nodes=
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#c #ffffc000 #3 #0 #f0f0000 #0:24 #fffc0000', ' #ffffffff:2 #3f ]', 
    ), )+\
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].nodes.getSequenceFromMask(
    mask=('[#0:12 #800000 ]', ), ))
mdb.models['Model-1'].rootAssembly.Set(name='gaskettop', nodes=
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#90 #0 #ffffc000 #7fff #fff0 #0 #fff8000', 
    ' #3ffe0000 #0:8 #fffffffc #ffffffff:6 #3fffffff #0:16 #ff800000', 
    ' #ffffffff:8 #ff ]', ), ))
mdb.models['Model-1'].rootAssembly.Set(name='bolttop', nodes=
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].nodes.getSequenceFromMask(
    mask=('[#400 #0:2 #f007f #0:8 #7ff8 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].nodes.getSequenceFromMask(
    mask=('[#0:76 #4 ]', ), ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].materials['BOLT AND NUT'].setValues(description=
    'units in mpa')
mdb.models['Model-1'].boundaryConditions['BC-3'].setValues(typeName=ENCASTRE)
mdb.models['Model-1'].boundaryConditions['BC-3'].setValues(typeName=ZSYMM)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ContactProperty('IntProp-1')
mdb.models['Model-1'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['Model-1'].interactionProperties['IntProp-1'].TangentialBehavior(
    formulation=ROUGH)
mdb.models['Model-1'].rootAssembly.Surface(name='CP-1-FLANGE-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    ('[#40000 #400 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-1-SPRIALWOUND GASKET-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces.getSequenceFromMask(
    ('[#84 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-2-BOLT-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['BOLT-1'].faces.getSequenceFromMask(
    ('[#20100000 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-2-FLANGE-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    ('[#400380 #2000 ]', ), ))
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    createStepName='Initial', enforcement=SURFACE_TO_SURFACE, 
    interactionProperty='IntProp-1', master=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-1-FLANGE-1'], name=
    'CP-1-FLANGE-1-SPRIALWOUND GASKET-1', slave=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-1-SPRIALWOUND GASKET-1'], 
    sliding=FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    createStepName='Initial', enforcement=SURFACE_TO_SURFACE, 
    interactionProperty='IntProp-1', master=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-2-BOLT-1'], name=
    'CP-2-BOLT-1-FLANGE-1', slave=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-2-FLANGE-1'], sliding=
    FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].interactions['CP-1-FLANGE-1-SPRIALWOUND GASKET-1'].setValues(
    adjustMethod=NONE, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    thickness=ON)
mdb.models['Model-1'].interactions['CP-2-BOLT-1-FLANGE-1'].setValues(
    adjustMethod=NONE, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    thickness=ON)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(name='Model-RTJ', objectToCopy=mdb.models['Model-1'])
mdb.models.changeKey(fromName='Model-1', toName='Model-RF')
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Solid revolve-1'].sketch)
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Solid revolve-1'])
mdb.models['Model-RTJ'].sketches['__edit__'].offset(distance=19.0, objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[9], ), side=LEFT)
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].dimensions[1], ))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[9], ))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[8], ))
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[10], point1=(
    200.201965332031, -9.64558792114258))
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(146.0, -2.25), 
    point2=(209.5, -2.25))
mdb.models['Model-RTJ'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[15])
mdb.models['Model-RTJ'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[7], entity2=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[15])
mdb.models['Model-RTJ'].sketches['__edit__'].undo()
mdb.models['Model-RTJ'].sketches['__edit__'].undo()
mdb.models['Model-RTJ'].sketches['__edit__'].undo()
mdb.models['Model-RTJ'].sketches['__edit__'].undo()
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[10], point1=(
    200.824584960938, -8.60522842407227))
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[8], point1=(
    163.675811767578, -2.36308670043945))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].dimensions[4], ))
mdb.models['Model-RTJ'].sketches['__edit__'].offset(distance=5.95, objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[9], ), side=LEFT)
mdb.models['Model-RTJ'].sketches['__edit__'].offset(distance=5.95, objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[9], ), side=RIGHT)
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(146.0, -2.25), 
    point2=(209.5, -2.25))
mdb.models['Model-RTJ'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[17])
mdb.models['Model-RTJ'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[7], entity2=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[17])
mdb.models['Model-RTJ'].sketches['__edit__'].offset(distance=7.92, objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[17], ), side=RIGHT)
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(184.55, -8.25), 
    point2=(184.55, -15.0))
mdb.models['Model-RTJ'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[19])
mdb.models['Model-RTJ'].sketches['__edit__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[16], 
    entity2=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[19])
mdb.models['Model-RTJ'].sketches['__edit__'].offset(distance=7.92, objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[19], ), side=LEFT)
mdb.models['Model-RTJ'].sketches['__edit__'].undo()
mdb.models['Model-RTJ'].sketches['__edit__'].offset(distance=5.95, objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[19], ), side=LEFT)
mdb.models['Model-RTJ'].sketches['__edit__'].offset(distance=5.95, objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[20], ), side=LEFT)
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(184.55, -2.25), 
    point2=(184.55, -27.5))
mdb.models['Model-RTJ'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[22])
mdb.models['Model-RTJ'].sketches['__edit__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[16], 
    entity2=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[22])
mdb.models['Model-RTJ'].sketches['__edit__'].copyRotate(angle=23.0, 
    centerPoint=(184.55, -2.25), objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[22], ))
mdb.models['Model-RTJ'].sketches['__edit__'].copyMirror(mirrorLine=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[9], objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[23], ))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[22], ))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].constraints[36], ))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[19], ))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[21], ))
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[24], point1=(
    188.995086669922, -20.4652900695801))
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[23], point1=(
    193.560852050781, -21.7137184143066))
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[26], point1=(
    187.957397460938, -12.3505058288574))
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[20], point1=(
    190.447814941406, -12.3505058288574))
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[25], point1=(
    191.277969360352, -12.7666511535645))
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[18], point1=(
    200.201965332031, -9.8536491394043))
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[30], point1=(
    177.373123168945, -10.2697944641113))
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[16], point1=(
    184.429321289063, -8.81329727172852))
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[15], point1=(
    196.673858642578, -6.31644058227539))
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[9], point1=(
    191.693023681641, -5.06801223754883))
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[28], point1=(
    190.240295410156, -8.18908309936523))
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[32], point1=(
    190.655364990234, -7.98100662231445))
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[17], point1=(
    191.277969360352, -2.36308670043945))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[33], ))
mdb.models['Model-RTJ'].sketches['__edit__'].FilletByRadius(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[27], curve2=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[31], nearPoint1=(
    186.621063232422, -7.56326675415039), nearPoint2=(189.627670288086, 
    -10.0034828186035), radius=0.8)
mdb.models['Model-RTJ'].sketches['__edit__'].FilletByRadius(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[29], curve2=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[31], nearPoint1=(
    194.638702392578, -7.9938850402832), nearPoint2=(191.632080078125, 
    -9.85993576049805), radius=0.8)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].ConstrainedSketch(name='RTJFLG', objectToCopy=
    mdb.models['Model-RTJ'].sketches['__edit__'])
mdb.models['Model-RTJ'].parts['FLANGE'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Model-RTJ'].sketches['__edit__'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].parts['FLANGE'].regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-RTJ'].parts['FLANGE'].backup()
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Cut extrude-1'].sketch)
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Cut extrude-1'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].parts['FLANGE'].regenerate()
mdb.models['Model-RTJ'].parts['FLANGE'].regenerate()
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Cut extrude-1'].sketch)
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Cut extrude-1'])
mdb.models['Model-RTJ'].ConstrainedSketch(name='HOLERTJ', objectToCopy=
    mdb.models['Model-RTJ'].sketches['__edit__'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Cut extrude-1'].sketch)
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Cut extrude-1'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].parts['FLANGE'].regenerate()
mdb.models['Model-RTJ'].parts['FLANGE'].regenerate()
mdb.models['Model-RTJ'].parts['FLANGE'].features['Cut extrude-1'].setValues(
    flipExtrudeDirection=True)
mdb.models['Model-RTJ'].parts['FLANGE'].regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-RTJ'].parts['FLANGE'].regenerate()
mdb.models['Model-RTJ'].parts['FLANGE'].features['Cut extrude-1'].setValues(
    flipExtrudeDirection=False)
mdb.models['Model-RTJ'].parts['FLANGE'].regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-RTJ'].parts['FLANGE'].regenerate()
mdb.models['Model-RTJ'].parts['FLANGE'].deleteFeatures(('Partition cell-3', 
    'Partition cell-4', 'Partition cell-5'))
mdb.models['Model-RTJ'].parts['FLANGE'].deleteFeatures(('Datum axis-2', 
    'Datum csys-1'))
del mdb.models['Model-RTJ'].parts['FLANGE'].features['Partition cell-1']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Cut extrude-1'].sketch)
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Cut extrude-1'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].parts['FLANGE'].regenerate()
del mdb.models['Model-RTJ'].parts['FLANGE'].features['Cut extrude-1']
mdb.models['Model-RTJ'].rootAssembly.regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-RTJ'].ConstrainedSketch(gridSpacing=16.04, name='__profile__'
    , sheetSize=641.82, transform=
    mdb.models['Model-RTJ'].parts['FLANGE'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-RTJ'].parts['FLANGE'].faces[17], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-RTJ'].parts['FLANGE'].edges[46], 
    sketchOrientation=RIGHT, origin=(259.135677, -87.65, 20.39442)))
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__profile__'])
mdb.models['Model-RTJ'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['Model-RTJ'].sketches['HOLERTJ'])
mdb.models['Model-RTJ'].parts['FLANGE'].CutExtrude(flipExtrudeDirection=OFF, 
    sketch=mdb.models['Model-RTJ'].sketches['__profile__'], sketchOrientation=
    RIGHT, sketchPlane=mdb.models['Model-RTJ'].parts['FLANGE'].faces[17], 
    sketchPlaneSide=SIDE1, sketchUpEdge=
    mdb.models['Model-RTJ'].parts['FLANGE'].edges[46])
del mdb.models['Model-RTJ'].sketches['__profile__']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Solid revolve-1'].sketch)
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Solid revolve-1'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Cut extrude-1'].sketch)
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Cut extrude-1'])
del mdb.models['Model-RTJ'].sketches['__edit__']
del mdb.models['Model-RTJ'].parts['FLANGE'].features['Cut extrude-1']
mdb.models['Model-RTJ'].ConstrainedSketch(gridSpacing=16.04, name='__profile__'
    , sheetSize=641.82, transform=
    mdb.models['Model-RTJ'].parts['FLANGE'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-RTJ'].parts['FLANGE'].faces[17], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-RTJ'].parts['FLANGE'].edges[15], 
    sketchOrientation=RIGHT, origin=(259.135677, -87.65, 20.39442)))
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__profile__'])
mdb.models['Model-RTJ'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['Model-RTJ'].sketches['HOLERTJ'])
mdb.models['Model-RTJ'].sketches['__profile__'].CircleByCenterPerimeter(center=
    (20.39442, -259.135677), point1=(19.7638940706998, 15.5759160055638))
mdb.models['Model-RTJ'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].vertices[11], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[2])
del mdb.models['Model-RTJ'].sketches['__profile__']
mdb.models['Model-RTJ'].ConstrainedSketch(gridSpacing=15.44, name='__profile__'
    , sheetSize=617.63, transform=
    mdb.models['Model-RTJ'].parts['FLANGE'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-RTJ'].parts['FLANGE'].faces[15], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-RTJ'].parts['FLANGE'].edges[42], 
    sketchOrientation=RIGHT, origin=(259.135677, -8.25, 20.39442)))
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__profile__'])
mdb.models['Model-RTJ'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['Model-RTJ'].sketches['HOLERTJ'])
del mdb.models['Model-RTJ'].sketches['__profile__']
mdb.models['Model-RTJ'].parts['FLANGE'].DatumAxisByTwoPoint(point1=
    mdb.models['Model-RTJ'].parts['FLANGE'].datums[10], point2=
    mdb.models['Model-RTJ'].parts['FLANGE'].vertices[17])
mdb.models['Model-RTJ'].ConstrainedSketch(gridSpacing=16.04, name='__profile__'
    , sheetSize=641.82, transform=
    mdb.models['Model-RTJ'].parts['FLANGE'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-RTJ'].parts['FLANGE'].faces[17], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-RTJ'].parts['FLANGE'].edges[46], 
    sketchOrientation=RIGHT, origin=(259.135677, -87.65, 20.39442)))
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__profile__'])
mdb.models['Model-RTJ'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['Model-RTJ'].sketches['HOLERTJ'])
del mdb.models['Model-RTJ'].sketches['__profile__']
mdb.models['Model-RTJ'].ConstrainedSketch(gridSpacing=16.04, name='__profile__'
    , sheetSize=641.82, transform=
    mdb.models['Model-RTJ'].parts['FLANGE'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-RTJ'].parts['FLANGE'].faces[17], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-RTJ'].parts['FLANGE'].edges[15], 
    sketchOrientation=RIGHT, origin=(259.135677, -87.65, 20.39442)))
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__profile__'])
mdb.models['Model-RTJ'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['Model-RTJ'].sketches['HOLERTJ'])
del mdb.models['Model-RTJ'].sketches['__profile__']
mdb.models['Model-RTJ'].ConstrainedSketch(gridSpacing=16.04, name='__profile__'
    , sheetSize=641.82, transform=
    mdb.models['Model-RTJ'].parts['FLANGE'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-RTJ'].parts['FLANGE'].faces[17], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-RTJ'].parts['FLANGE'].edges[15], 
    sketchOrientation=RIGHT, origin=(259.135677, -87.65, 20.39442)))
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__profile__'])
del mdb.models['Model-RTJ'].sketches['__profile__']
mdb.models['Model-RTJ'].ConstrainedSketch(gridSpacing=16.04, name='__profile__'
    , sheetSize=641.82, transform=
    mdb.models['Model-RTJ'].parts['FLANGE'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-RTJ'].parts['FLANGE'].faces[17], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-RTJ'].parts['FLANGE'].edges[46], 
    sketchOrientation=RIGHT, origin=(259.135677, -87.65, 20.39442)))
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__profile__'])
mdb.models['Model-RTJ'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['Model-RTJ'].sketches['HOLERTJ'])
mdb.models['Model-RTJ'].sketches['__profile__'].CircleByCenterPerimeter(center=
    (20.3944201571328, 259.135676987633), point1=(19.7638940706998, 
    15.5759160055638))
mdb.models['Model-RTJ'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].vertices[11], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[2])
del mdb.models['Model-RTJ'].sketches['__profile__']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].sketches['hbolt'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].sketches['BOLT12HOLE900'])
mdb.models['Model-RTJ'].sketches['__edit__'].Arc3Points(point1=(-143.697372, 
    123.002628), point2=(-33.7596987864026, -92.7622043997985), point3=(
    123.002628, -143.697372))
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(-124.697372, 
    123.002628), point2=(283.152627999947, 123.002627999999))
mdb.models['Model-RTJ'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[11])
mdb.models['Model-RTJ'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[8], entity2=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[11])
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(126.602628, 
    -85.497372), point2=(126.602628, 172.052628000017))
mdb.models['Model-RTJ'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[12])
mdb.models['Model-RTJ'].sketches['__edit__'].undo()
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(123.002628, 
    -124.697372), point2=(123.002628, 156.902627999947))
mdb.models['Model-RTJ'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[12])
mdb.models['Model-RTJ'].sketches['__edit__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[2], 
    entity2=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[12])
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[12], point1=(
    122.914733886719, 146.088745117188))
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[11], point1=(
    146.493713378906, 128.122406005859))
mdb.models['Model-RTJ'].sketches['__edit__'].move(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[2], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[3], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[4], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[5], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[6], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[7], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[8], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[9], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[10], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[13], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[14]), vector=(
    -142.85, -142.85))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[13], ))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[14], ))
mdb.models['Model-RTJ'].sketches.changeKey(fromName='__edit__', toName=
    'BOLT12HOLE900')
mdb.models['Model-RTJ'].ConstrainedSketch(gridSpacing=16.04, name='__profile__'
    , sheetSize=641.82, transform=
    mdb.models['Model-RTJ'].parts['FLANGE'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-RTJ'].parts['FLANGE'].faces[17], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-RTJ'].parts['FLANGE'].edges[15], 
    sketchOrientation=RIGHT, origin=(259.135677, -87.65, 20.39442)))
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__profile__'])
del mdb.models['Model-RTJ'].sketches['__profile__']
mdb.models['Model-RTJ'].ConstrainedSketch(gridSpacing=16.04, name='__profile__'
    , sheetSize=641.82, transform=
    mdb.models['Model-RTJ'].parts['FLANGE'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-RTJ'].parts['FLANGE'].faces[17], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-RTJ'].parts['FLANGE'].edges[46], 
    sketchOrientation=RIGHT, origin=(259.135677, -87.65, 20.39442)))
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__profile__'])
mdb.models['Model-RTJ'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['Model-RTJ'].sketches['BOLT12HOLE900'])
mdb.models['Model-RTJ'].sketches['__profile__'].Line(point1=(-267.547372, 
    -19.8473720000004), point2=(116.29, -19.8473720000003))
mdb.models['Model-RTJ'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[25])
mdb.models['Model-RTJ'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[22], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[25])
mdb.models['Model-RTJ'].sketches['__profile__'].Line(point1=(-19.847372, 
    -267.547372), point2=(-19.847372, 168.42))
mdb.models['Model-RTJ'].sketches['__profile__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[26])
mdb.models['Model-RTJ'].sketches['__profile__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[16], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[26])
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[26], point1=(
    -26.0784454929644, 136.075341867796))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[27], point1=(
    -20.8481012980112, -4.19696085984236))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[25], point1=(
    92.9111654642592, -21.2393947041506))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[29], point1=(
    13.1488462690592, -15.9955680893942))
mdb.models['Model-RTJ'].sketches['__profile__'].move(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[13], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[16], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[17], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[18], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[19], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[20], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[21], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[24], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[28], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[22], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[23], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[24], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[30]), vector=(
    40.2417921571328, 278.983048987634))
mdb.models['Model-RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[18], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[19], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[20], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[21], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[22], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[23], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[24], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[30]))
mdb.models['Model-RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[28], ))
mdb.models['Model-RTJ'].parts['FLANGE'].CutExtrude(flipExtrudeDirection=OFF, 
    sketch=mdb.models['Model-RTJ'].sketches['__profile__'], sketchOrientation=
    RIGHT, sketchPlane=mdb.models['Model-RTJ'].parts['FLANGE'].faces[17], 
    sketchPlaneSide=SIDE1, sketchUpEdge=
    mdb.models['Model-RTJ'].parts['FLANGE'].edges[46])
del mdb.models['Model-RTJ'].sketches['__profile__']
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].parts['FLANGE'].regenerate()
mdb.models['Model-RTJ'].parts['FLANGE'].regenerate()
mdb.models['Model-RTJ'].rootAssembly.regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-RTJ'].rootAssembly.regenerate()
mdb.models['Model-RTJ'].rootAssembly.features['SPRIALWOUND GASKET-1'].suppress(
    )
#* FeatureError: Regeneration failed
del mdb.models['Model-RTJ'].rootAssembly.features['SPRIALWOUND GASKET-1']
mdb.models['Model-RTJ'].rootAssembly.regenerate()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Model-RTJ'].steps['Step-1']
del mdb.models['Model-RTJ'].interactions['CP-1-FLANGE-1-SPRIALWOUND GASKET-1']
del mdb.models['Model-RTJ'].interactions['CP-2-BOLT-1-FLANGE-1']
del mdb.models['Model-RTJ'].rootAssembly.surfaces['CP-1-SPRIALWOUND GASKET-1']
mdb.models['Model-RTJ'].rootAssembly.deleteSurfaces(surfaceNames=(
    'CP-1-FLANGE-1', 'CP-2-BOLT-1', 'CP-2-FLANGE-1'))
del mdb.models['Model-RTJ'].rootAssembly.features['Partition cell-1']
del mdb.models['Model-RTJ'].rootAssembly.features['Datum csys-1']
del mdb.models['Model-RTJ'].rootAssembly.sets['gaskettop']
del mdb.models['Model-RTJ'].rootAssembly.sets['gaskets1']
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Cut extrude-1'].sketch)
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Cut extrude-1'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Solid revolve-1'].sketch)
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Solid revolve-1'])
mdb.models['Model-RTJ'].ConstrainedSketch(name='FLGRTJ', objectToCopy=
    mdb.models['Model-RTJ'].sketches['__edit__'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-RTJ'].sketches['__profile__'].ConstructionLine(point1=(0.0, 
    -100.0), point2=(0.0, 100.0))
mdb.models['Model-RTJ'].sketches['__profile__'].FixedConstraint(entity=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[2])
mdb.models['Model-RTJ'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['Model-RTJ'].sketches['FLGRTJ'])
mdb.models['Model-RTJ'].sketches['__profile__'].Line(point1=(191.25, 0.0), 
    point2=(185.0, 0.0))
mdb.models['Model-RTJ'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[20])
mdb.models['Model-RTJ'].sketches['__profile__'].Line(point1=(184.55, -2.25), 
    point2=(196.45, -2.25))
mdb.models['Model-RTJ'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[21])
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[21], point1=(
    187.647171020508, -2.31772804260254))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[20], point1=(
    187.738464355469, -0.581670761108398))
mdb.models['Model-RTJ'].sketches['__profile__'].Line(point1=(184.55, -2.25), 
    point2=(196.45, -2.25))
mdb.models['Model-RTJ'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[22])
mdb.models['Model-RTJ'].sketches['__profile__'].Line(point1=(184.55, -2.25), 
    point2=(184.55, 1.98391819000244))
mdb.models['Model-RTJ'].sketches['__profile__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[23])
mdb.models['Model-RTJ'].sketches['__profile__'].offset(distance=11.9, 
    objectList=(mdb.models['Model-RTJ'].sketches['__profile__'].geometry[23], )
    , side=RIGHT)
mdb.models['Model-RTJ'].sketches['__profile__'].Line(point1=(184.55, 
    1.98391819000244), point2=(196.45, -2.25))
mdb.models['Model-RTJ'].sketches['__profile__'].Line(point1=(196.45, 
    1.98391819000244), point2=(184.55, -2.25))
mdb.models['Model-RTJ'].sketches['__profile__'].Line(point1=(190.5, 
    -0.13304090499878), point2=(190.5, -12.5))
mdb.models['Model-RTJ'].sketches['__profile__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[27])
mdb.models['Model-RTJ'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].vertices[24], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[26])
mdb.models['Model-RTJ'].sketches['__profile__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].vertices[23], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].vertices[9], midpoint=
    mdb.models['Model-RTJ'].sketches['__profile__'].vertices[24])
mdb.models['Model-RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[26], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[25]))
mdb.models['Model-RTJ'].sketches['__profile__'].Line(point1=(184.55, 
    1.98391819000244), point2=(190.5, -12.5))
mdb.models['Model-RTJ'].sketches['__profile__'].undo()
mdb.models['Model-RTJ'].sketches['__profile__'].Line(point1=(190.5, 
    -0.13304090499878), point2=(190.5, 3.75))
mdb.models['Model-RTJ'].sketches['__profile__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[28])
mdb.models['Model-RTJ'].sketches['__profile__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[27], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[28])
mdb.models['Model-RTJ'].sketches['__profile__'].Line(point1=(190.5, 3.75), 
    point2=(193.75, 0.0))
mdb.models['Model-RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[29], ))
mdb.models['Model-RTJ'].sketches['__profile__'].offset(distance=5.565, 
    objectList=(mdb.models['Model-RTJ'].sketches['__profile__'].geometry[27], )
    , side=RIGHT)
mdb.models['Model-RTJ'].sketches['__profile__'].offset(distance=5.565, 
    objectList=(mdb.models['Model-RTJ'].sketches['__profile__'].geometry[27], )
    , side=LEFT)
mdb.models['Model-RTJ'].sketches['__profile__'].offset(distance=8.765, 
    objectList=(mdb.models['Model-RTJ'].sketches['__profile__'].geometry[15], )
    , side=LEFT)
mdb.models['Model-RTJ'].sketches['__profile__'].Line(point1=(188.441348754046, 
    -1.405), point2=(180.689422607422, -1.405))
mdb.models['Model-RTJ'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[33])
mdb.models['Model-RTJ'].sketches['__profile__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[32], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[33])
mdb.models['Model-RTJ'].sketches['__profile__'].Line(point1=(192.558651245954, 
    -1.405), point2=(201.054641723633, -1.405))
mdb.models['Model-RTJ'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[34])
mdb.models['Model-RTJ'].sketches['__profile__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[32], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[34])
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[33], point1=(
    185.780715942383, -1.32077980041504))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[32], point1=(
    189.747207641602, -1.32077980041504))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[36], point1=(
    191.641647338867, -1.14302253723145))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[34], point1=(
    194.009689331055, -1.43928527832031))
mdb.models['Model-RTJ'].sketches['__profile__'].Line(point1=(184.935, -1.405), 
    point2=(196.065, -1.405))
mdb.models['Model-RTJ'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[38])
mdb.models['Model-RTJ'].sketches['__profile__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[35], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[38])
mdb.models['Model-RTJ'].sketches['__profile__'].CircleByCenterPerimeter(center=
    (190.5, -1.405), point1=(196.065, -1.405))
mdb.models['Model-RTJ'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].vertices[41], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[27])
mdb.models['Model-RTJ'].sketches['__profile__'].move(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[39], ), vector=(
    0.0, -3.2))
mdb.models['Model-RTJ'].sketches['__profile__'].undo()
mdb.models['Model-RTJ'].sketches['__profile__'].move(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[39], ), vector=(
    0.0, -3.2))
mdb.models['Model-RTJ'].sketches['__profile__'].undo()
mdb.models['Model-RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].constraints[94], ))
mdb.models['Model-RTJ'].sketches['__profile__'].copyMove(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[39], ), vector=(
    0.0, -3.2))
mdb.models['Model-RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[39], ))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[30], point1=(
    184.805633544922, -8.65498638153076))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[31], point1=(
    196.135604858398, -8.35499286651611))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[40], point1=(
    196.015716552734, -4.18507862091064))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[43], point1=(
    195.686004638672, -2.98510265350342))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[44], point1=(
    195.236404418945, -1.90512466430664))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[45], point1=(
    194.217300415039, -0.225159645080566))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[46], point1=(
    188.672210693359, 0.614822387695313))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[47], point1=(
    185.674865722656, -1.78512763977051))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[48], point1=(
    185.40510559082, -2.86510562896729))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[49], point1=(
    184.989471435547, -3.80223989486694))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[35], point1=(
    182.088394165039, -1.41743803024292))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[41], point1=(
    184.907516479492, -0.943224430084229))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[37], point1=(
    197.794952392578, -1.37001657485962))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[42], point1=(
    196.018203735352, -0.658697605133057))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[53], point1=(
    196.190567016602, -1.46625709533691))
mdb.models['Model-RTJ'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[51], point1=(
    184.781692504883, -1.39438879489899))
mdb.models['Model-RTJ'].sketches['__profile__'].copyMove(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[52], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[50], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[54], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[38]), vector=(0.0, 
    5.565))
mdb.models['Model-RTJ'].sketches['__profile__'].undo()
mdb.models['Model-RTJ'].sketches['__profile__'].copyMove(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[50], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[52], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[54], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[38]), vector=(0.0, 
    1.44799683915788))
mdb.models['Model-RTJ'].sketches['__profile__'].undo()
mdb.models['Model-RTJ'].sketches['__profile__'].TangentConstraint(entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[50], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[13])
mdb.models['Model-RTJ'].sketches['__profile__'].undo()
mdb.models['Model-RTJ'].sketches['__profile__'].TangentConstraint(entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[13], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[50])
mdb.models['Model-RTJ'].sketches['__profile__'].undo()
mdb.models['Model-RTJ'].sketches['__profile__'].copyMove(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[50], ), vector=(
    0.0, 7.92))
mdb.models['Model-RTJ'].sketches['__profile__'].TangentConstraint(entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[55], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[13])
mdb.models['Model-RTJ'].sketches['__profile__'].undo()
mdb.models['Model-RTJ'].sketches['__profile__'].TangentConstraint(entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[13], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[55])
mdb.models['Model-RTJ'].sketches['__profile__'].undo()
mdb.models['Model-RTJ'].sketches['__profile__'].move(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[55], ), vector=(
    0.0, -2.355))
mdb.models['Model-RTJ'].sketches['__profile__'].move(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[55], ), vector=(
    0.0, -2.355))
mdb.models['Model-RTJ'].sketches['__profile__'].TangentConstraint(entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[14], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[55])
mdb.models['Model-RTJ'].sketches['__profile__'].undo()
mdb.models['Model-RTJ'].sketches['__profile__'].copyMove(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[55], ), vector=(
    0.0, -0.855))
mdb.models['Model-RTJ'].sketches['__profile__'].TangentConstraint(entity1=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[56], entity2=
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[13])
mdb.models['Model-RTJ'].sketches['__profile__'].move(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[52], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[54], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[38]), vector=(0.0, 
    2.355))
mdb.models['Model-RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[50], ))
mdb.models['Model-RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[55], ))
mdb.models['Model-RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[22], ))
mdb.models['Model-RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[24], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[23]))
mdb.models['Model-RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[27], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[28]))
mdb.models['Model-RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[9], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[10], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[12], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[6], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[7], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[8], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[8], 
    mdb.models['Model-RTJ'].sketches['__profile__'].dimensions[1], 
    mdb.models['Model-RTJ'].sketches['__profile__'].dimensions[2], 
    mdb.models['Model-RTJ'].sketches['__profile__'].dimensions[0], 
    mdb.models['Model-RTJ'].sketches['__profile__'].dimensions[1], 
    mdb.models['Model-RTJ'].sketches['__profile__'].dimensions[0]))
mdb.models['Model-RTJ'].ConstrainedSketch(name='adjment', objectToCopy=
    mdb.models['Model-RTJ'].sketches['__profile__'])
mdb.models['Model-RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[13], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[14], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[15], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[18], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[19], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[11], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[17], 
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[16], 
    mdb.models['Model-RTJ'].sketches['__profile__'].dimensions[5], 
    mdb.models['Model-RTJ'].sketches['__profile__'].dimensions[6], 
    mdb.models['Model-RTJ'].sketches['__profile__'].constraints[27], 
    mdb.models['Model-RTJ'].sketches['__profile__'].constraints[28], 
    mdb.models['Model-RTJ'].sketches['__profile__'].constraints[36], 
    mdb.models['Model-RTJ'].sketches['__profile__'].constraints[37]))
mdb.models['Model-RTJ'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__profile__'].geometry[52], ))
mdb.models['Model-RTJ'].sketches['__profile__'].Line(point1=(184.935, 0.95), 
    point2=(184.939169668683, -2.03461423838149))
mdb.models['Model-RTJ'].Part(dimensionality=THREE_D, name='Part-4', type=
    DEFORMABLE_BODY)
mdb.models['Model-RTJ'].parts['Part-4'].BaseSolidRevolve(angle=9.0, 
    flipRevolveDirection=OFF, sketch=
    mdb.models['Model-RTJ'].sketches['__profile__'])
del mdb.models['Model-RTJ'].sketches['__profile__']
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].parts.changeKey(fromName='Part-4', toName='RTJ')
mdb.models['Model-RTJ'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-RTJ'].rootAssembly.Instance(dependent=ON, name='RTJ-1', part=
    mdb.models['Model-RTJ'].parts['RTJ'])
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['RTJ'].features['Solid revolve-1'].sketch)
mdb.models['Model-RTJ'].parts['RTJ'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['RTJ'].features['Solid revolve-1'])
mdb.models['Model-RTJ'].sketches['__edit__'].retrieveSketch(sketch=
    mdb.models['Model-RTJ'].sketches['adjment'])
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(176.25, 0.0), point2=
    (200.0, 0.0))
mdb.models['Model-RTJ'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[74])
mdb.models['Model-RTJ'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[74], point1=(
    181.560745239258, -0.0566539764404297))
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Solid revolve-1'].sketch)
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Solid revolve-1'])
mdb.models['Model-RTJ'].sketches['__edit__'].move(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[5], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[6], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[7], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[11], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[12], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[13], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[14], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[27], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[29], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[31], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[34], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[35], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[36], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[37]), vector=(0.0, 
    -0.95))
mdb.models['Model-RTJ'].parts['FLANGE'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Model-RTJ'].sketches['__edit__'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].parts['FLANGE'].regenerate()
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['RTJ'].features['Solid revolve-1'].sketch)
mdb.models['Model-RTJ'].parts['RTJ'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['RTJ'].features['Solid revolve-1'])
mdb.models['Model-RTJ'].sketches['__edit__'].move(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[38], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[54], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[56], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[57]), vector=(0.0, 
    -0.95))
mdb.models['Model-RTJ'].parts['RTJ'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Model-RTJ'].sketches['__edit__'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].parts['RTJ'].regenerate()
mdb.models['Model-RTJ'].rootAssembly.regenerate()
mdb.models['Model-RTJ'].rootAssembly.translate(instanceList=('BOLT-1', ), 
    vector=(0.0, -0.95, 0.0))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].rootAssembly.PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), edges=(
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].edges[40], 
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].edges[44]), line=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].edges[17], 
    sense=REVERSE)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].rootAssembly.regenerate()
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['BOLT'].features['Solid revolve-1'].sketch)
mdb.models['Model-RTJ'].parts['BOLT'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['BOLT'].features['Solid revolve-1'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Solid revolve-1'].sketch)
mdb.models['Model-RTJ'].parts['FLANGE'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['FLANGE'].features['Solid revolve-1'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-RTJ'].parts['BOLT'].features['Solid revolve-1'].sketch)
mdb.models['Model-RTJ'].parts['BOLT'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-RTJ'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-RTJ'].parts['BOLT'].features['Solid revolve-1'])
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(0.0, 
    -0.0833333333333333), point2=(141.25, -0.0833333333331817))
mdb.models['Model-RTJ'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[19])
mdb.models['Model-RTJ'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[14], entity2=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[19])
mdb.models['Model-RTJ'].sketches['__edit__'].offset(distance=88.6, objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[19], ), side=LEFT)
mdb.models['Model-RTJ'].sketches['__edit__'].move(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[2], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[14], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[17], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[5], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[12]), vector=(0.0, 
    0.95))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[20], ))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[15], ))
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(18.0, 
    88.5166666666667), point2=(18.0, 0.0))
mdb.models['Model-RTJ'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[21])
mdb.models['Model-RTJ'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[12], entity2=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[21])
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].dimensions[0], 
    mdb.models['Model-RTJ'].sketches['__edit__'].dimensions[2]))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[19], ))
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(18.0, 0.0), point2=(
    0.0, 0.0))
mdb.models['Model-RTJ'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[22])
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[16], ))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].constraints[33], ))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[14], ))
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(0.0, 121.35), point2=
    (0.0, 0.0))
mdb.models['Model-RTJ'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[23])
mdb.models['Model-RTJ'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[17], entity2=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[23])
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(18.0, 0.0), point2=(
    56.25, 0.0))
mdb.models['Model-RTJ'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[24])
mdb.models['Model-RTJ'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[21], entity2=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[24])
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[21], ))
mdb.models['Model-RTJ'].sketches['__edit__'].undo()
mdb.models['Model-RTJ'].sketches['__edit__'].undo()
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(18.0, 0.0), point2=(
    90.0, 0.0))
mdb.models['Model-RTJ'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[24])
mdb.models['Model-RTJ'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[21], entity2=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[24])
mdb.models['Model-RTJ'].sketches['__edit__'].offset(distance=88.6, objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[24], ), side=LEFT)
mdb.models['Model-RTJ'].sketches['__edit__'].move(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[17], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[5], 
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[12]), vector=(0.0, 
    0.0833333333333144))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[25], ))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[24], ))
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[21], ))
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(18.0, 88.6), point2=(
    18.0, 0.0))
mdb.models['Model-RTJ'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[26])
mdb.models['Model-RTJ'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[12], entity2=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[26])
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[23], ))
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(0.0, 
    121.433333333333), point2=(0.0, 0.0))
mdb.models['Model-RTJ'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[27])
mdb.models['Model-RTJ'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[17], entity2=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[27])
mdb.models['Model-RTJ'].sketches['__edit__'].VerticalDimension(textPoint=(
    41.6007995605469, 10.5535087585449), value=88.6, vertex1=
    mdb.models['Model-RTJ'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['Model-RTJ'].sketches['__edit__'].vertices[10])
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[27], ))
mdb.models['Model-RTJ'].sketches['__edit__'].Line(point1=(0.0, 
    121.433333333333), point2=(0.0, 0.0))
mdb.models['Model-RTJ'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-RTJ'].sketches['__edit__'].geometry[28])
mdb.models['Model-RTJ'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[17], entity2=
    mdb.models['Model-RTJ'].sketches['__edit__'].geometry[28])
mdb.models['Model-RTJ'].parts['BOLT'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Model-RTJ'].sketches['__edit__'])
del mdb.models['Model-RTJ'].sketches['__edit__']
mdb.models['Model-RTJ'].parts['BOLT'].regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-RTJ'].parts['BOLT'].backup()
mdb.models['Model-RTJ'].parts['BOLT'].deleteFeatures(('Partition cell-1', 
    'Partition cell-2', 'Partition cell-3', 'Partition cell-4', 
    'Partition cell-5', 'Partition cell-6'))
mdb.models['Model-RTJ'].rootAssembly.regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-RTJ'].rootAssembly.regenerate()
mdb.models['Model-RTJ'].rootAssembly.translate(instanceList=('BOLT-1', ), 
    vector=(0.0, 1.033333, 0.0))
mdb.models['Model-RTJ'].parts['BOLT'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-RTJ'].parts['BOLT'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), edges=(mdb.models['Model-RTJ'].parts['BOLT'].edges[3], ), line=
    mdb.models['Model-RTJ'].parts['BOLT'].edges[11], sense=FORWARD)
mdb.models['Model-RTJ'].parts['BOLT'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-RTJ'].parts['BOLT'].cells.getSequenceFromMask(('[#2 ]', 
    ), ), point1=mdb.models['Model-RTJ'].parts['BOLT'].vertices[7], point2=
    mdb.models['Model-RTJ'].parts['BOLT'].vertices[6], point3=
    mdb.models['Model-RTJ'].parts['BOLT'].InterestingPoint(
    mdb.models['Model-RTJ'].parts['BOLT'].edges[12], MIDDLE))
mdb.models['Model-RTJ'].parts['BOLT'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-RTJ'].parts['BOLT'].cells.getSequenceFromMask(('[#2 ]', 
    ), ), point1=mdb.models['Model-RTJ'].parts['BOLT'].vertices[4], point2=
    mdb.models['Model-RTJ'].parts['BOLT'].vertices[3], point3=
    mdb.models['Model-RTJ'].parts['BOLT'].InterestingPoint(
    mdb.models['Model-RTJ'].parts['BOLT'].edges[21], MIDDLE))
mdb.models['Model-RTJ'].parts['BOLT'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-RTJ'].parts['BOLT'].cells.getSequenceFromMask(('[#a ]', 
    ), ), point1=mdb.models['Model-RTJ'].parts['BOLT'].vertices[8], point2=
    mdb.models['Model-RTJ'].parts['BOLT'].InterestingPoint(
    mdb.models['Model-RTJ'].parts['BOLT'].edges[4], CENTER), point3=
    mdb.models['Model-RTJ'].parts['BOLT'].InterestingPoint(
    mdb.models['Model-RTJ'].parts['BOLT'].edges[0], MIDDLE))
mdb.models['Model-RTJ'].parts['BOLT'].PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-RTJ'].parts['BOLT'].cells.getSequenceFromMask(('[#3 ]', 
    ), ), point1=mdb.models['Model-RTJ'].parts['BOLT'].InterestingPoint(
    mdb.models['Model-RTJ'].parts['BOLT'].edges[8], MIDDLE), point2=
    mdb.models['Model-RTJ'].parts['BOLT'].InterestingPoint(
    mdb.models['Model-RTJ'].parts['BOLT'].edges[30], MIDDLE), point3=
    mdb.models['Model-RTJ'].parts['BOLT'].InterestingPoint(
    mdb.models['Model-RTJ'].parts['BOLT'].edges[11], MIDDLE))
mdb.models['Model-RTJ'].rootAssembly.regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-RTJ'].rootAssembly.regenerate()
mdb.models['Model-RTJ'].rootAssembly.regenerate()
mdb.models['Model-RTJ'].parts['RTJ'].PartitionCellBySweepEdge(cells=
    mdb.models['Model-RTJ'].parts['RTJ'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), edges=(mdb.models['Model-RTJ'].parts['RTJ'].edges[7], ), sweepPath=
    mdb.models['Model-RTJ'].parts['RTJ'].edges[5])
#* Feature creation failed.
mdb.models['Model-RTJ'].parts['RTJ'].PartitionCellByPatchNEdges(cell=
    mdb.models['Model-RTJ'].parts['RTJ'].cells[0], edges=(
    mdb.models['Model-RTJ'].parts['RTJ'].edges[7], 
    mdb.models['Model-RTJ'].parts['RTJ'].edges[10], 
    mdb.models['Model-RTJ'].parts['RTJ'].edges[3], 
    mdb.models['Model-RTJ'].parts['RTJ'].edges[11], 
    mdb.models['Model-RTJ'].parts['RTJ'].edges[9], 
    mdb.models['Model-RTJ'].parts['RTJ'].edges[6], 
    mdb.models['Model-RTJ'].parts['RTJ'].edges[1], 
    mdb.models['Model-RTJ'].parts['RTJ'].edges[4]))
#* Feature creation failed.
mdb.models['Model-RTJ'].parts['RTJ'].PartitionCellByExtendFace(cells=
    mdb.models['Model-RTJ'].parts['RTJ'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), extendFace=mdb.models['Model-RTJ'].parts['RTJ'].faces[1])
#* Feature creation failed.
mdb.models['Model-RTJ'].parts['RTJ'].PartitionCellByExtendFace(cells=
    mdb.models['Model-RTJ'].parts['RTJ'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), extendFace=mdb.models['Model-RTJ'].parts['RTJ'].faces[1])
#* Feature creation failed.
mdb.models['Model-RTJ'].parts['RTJ'].PartitionFaceByCurvedPathEdgePoints(edge1=
    mdb.models['Model-RTJ'].parts['RTJ'].edges[6], edge2=
    mdb.models['Model-RTJ'].parts['RTJ'].edges[11], face=
    mdb.models['Model-RTJ'].parts['RTJ'].faces[5], point1=
    mdb.models['Model-RTJ'].parts['RTJ'].vertices[5], point2=
    mdb.models['Model-RTJ'].parts['RTJ'].vertices[7])
mdb.models['Model-RTJ'].parts['RTJ'].PartitionCellByPlaneNormalToEdge(cells=
    mdb.models['Model-RTJ'].parts['RTJ'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), edge=mdb.models['Model-RTJ'].parts['RTJ'].edges[7], point=
    mdb.models['Model-RTJ'].parts['RTJ'].vertices[1])
#* Feature creation failed.
mdb.models['Model-RTJ'].parts['RTJ'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-RTJ'].parts['RTJ'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), normal=mdb.models['Model-RTJ'].parts['RTJ'].edges[0], point=
    mdb.models['Model-RTJ'].parts['RTJ'].vertices[1])
#* Feature creation failed.
mdb.models['Model-RTJ'].parts['RTJ'].PartitionCellBySweepEdge(cells=
    mdb.models['Model-RTJ'].parts['RTJ'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), edges=(mdb.models['Model-RTJ'].parts['RTJ'].edges[0], ), sweepPath=
    mdb.models['Model-RTJ'].parts['RTJ'].edges[7])
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].rootAssembly.regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-RTJ'].rootAssembly.regenerate()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RF'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=GK3D8, elemLibrary=STANDARD), ElemType(elemCode=GK3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=UNKNOWN_TET, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['Model-RF'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=GK3D8, elemLibrary=STANDARD), ElemType(elemCode=GK3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=UNKNOWN_TET, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), ))
mdb.models['Model-RF'].materials['SPRIAL WOUND GASKET'].GasketThicknessBehavior(
    table=((0.0, 0.0), (3.703703704, 0.075675676), (8.888888889, 0.135135135), 
    (13.33333333, 0.183783784), (17.77777778, 0.286486486), (22.22222222, 
    0.335135135), (28.14814815, 0.389189189), (31.85185185, 0.443243243), (
    36.2962963, 0.497297297), (40.74074074, 0.551351351), (45.18518519, 
    0.610810811)), unloadingTable=((0.0, 0.0, 0.378378378), (3.703703704, 
    0.075675676, 0.481081081), (8.888888889, 0.135135135, 0.52972973), (
    13.33333333, 0.183783784, 0.551351351), (17.77777778, 0.286486486, 
    0.567567568), (22.22222222, 0.335135135, 0.578378378), (28.14814815, 
    0.389189189, 0.586486486), (31.85185185, 0.443243243, 0.594594595), (
    36.2962963, 0.497297297, 0.6), (40.74074074, 0.551351351, 0.605405405), (
    45.18518519, 0.610810811, 0.610810811)))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RF'].materials['SPRIAL WOUND GASKET'].gasketThicknessBehavior.setValues(
    table=((0.0, 0.0), (3.703703704, 0.075675676), (8.888888889, 0.135135135), 
    (13.33333333, 0.183783784), (17.77777778, 0.286486486), (22.22222222, 
    0.335135135), (28.14814815, 0.389189189), (31.85185185, 0.443243243), (
    36.2962963, 0.497297297), (40.74074074, 0.551351351), (45.18518519, 
    0.610810811), (49.62962963, 0.648648649), (55.55555556, 0.681081081), (
    59.25925926, 0.735135135), (65.18518519, 0.767567568), (68.14814815, 
    0.810810811), (72.59259259, 0.848648649), (77.03703704, 0.875675676), (
    80.0, 0.908108108), (85.92592593, 0.92972973), (88.88888889, 0.967567568)), 
    unloadingDependencies=1, unloadingTable=((0.0, 0.0, 0.378378378, 
    0.643243243), (3.703703704, 0.075675676, 0.481081081, 0.745945946), (
    8.888888889, 0.135135135, 0.52972973, 0.794594595), (13.33333333, 
    0.183783784, 0.551351351, 0.810810811), (17.77777778, 0.286486486, 
    0.567567568, 0.827027027), (22.22222222, 0.335135135, 0.578378378, 
    0.843243243), (28.14814815, 0.389189189, 0.586486486, 0.854054054), (
    31.85185185, 0.443243243, 0.594594595, 0.864864865), (36.2962963, 
    0.497297297, 0.6, 0.875675676), (40.74074074, 0.551351351, 0.605405405, 
    0.883783784), (45.18518519, 0.610810811, 0.610810811, 0.891891892), (
    49.62962963, 0.648648649, 0.0, 0.897297297), (55.55555556, 0.681081081, 
    0.0, 0.902702703), (59.25925926, 0.735135135, 0.0, 0.913513514), (
    65.18518519, 0.767567568, 0.0, 0.927027027), (68.14814815, 0.810810811, 
    0.0, 0.935135135), (72.59259259, 0.848648649, 0.0, 0.940540541), (
    77.03703704, 0.875675676, 0.0, 0.945945946), (80.0, 0.908108108, 0.0, 
    0.956756757), (85.92592593, 0.92972973, 0.0, 0.962162162), (88.88888889, 
    0.967567568, 0.0, 0.967567568)), yieldOnsetMethod=CLOSURE_VALUE)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RF'].rootAssembly.Set(cells=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    mask=('[#1ff ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    mask=('[#3 ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['BOLT-1'].cells.getSequenceFromMask(
    mask=('[#ff ]', ), ), edges=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:2 #ffff ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].edges.getSequenceFromMask(
    mask=('[#fffff ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['BOLT-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff #1fff ]', ), ), faces=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces.getSequenceFromMask(
    mask=('[#7ff ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['BOLT-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff ]', ), ), name='Set-31', vertices=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff #3ff ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].vertices.getSequenceFromMask(
    mask=('[#fff ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['BOLT-1'].vertices.getSequenceFromMask(
    mask=('[#3fffff ]', ), ))
mdb.models['Model-RF'].Temperature(createStepName='Initial', 
    crossSectionDistribution=CONSTANT_THROUGH_THICKNESS, distributionType=
    UNIFORM, magnitudes=(21.0, ), name='initial temp', region=
    mdb.models['Model-RF'].rootAssembly.sets['Set-31'])
mdb.models['Model-RF'].rootAssembly.Set(cells=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    mask=('[#1ff ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    mask=('[#3 ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['BOLT-1'].cells.getSequenceFromMask(
    mask=('[#ff ]', ), ), edges=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:2 #ffff ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].edges.getSequenceFromMask(
    mask=('[#fffff ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['BOLT-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff #1fff ]', ), ), faces=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces.getSequenceFromMask(
    mask=('[#7ff ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['BOLT-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff ]', ), ), name='Set-32', vertices=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff #3ff ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].vertices.getSequenceFromMask(
    mask=('[#fff ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['BOLT-1'].vertices.getSequenceFromMask(
    mask=('[#3fffff ]', ), ))
mdb.models['Model-RF'].Temperature(createStepName='Step-1', 
    crossSectionDistribution=CONSTANT_THROUGH_THICKNESS, distributionType=
    UNIFORM, magnitudes=(55.0, ), name='Predefined Field-2', region=
    mdb.models['Model-RF'].rootAssembly.sets['Set-32'])
mdb.models['Model-RF'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#b1 ]', ), ))
mdb.models['Model-RF'].rootAssembly.PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#90 ]', ), ), edges=(
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].edges[6], 
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].edges[9])
    , line=mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].edges[54], 
    sense=REVERSE)
mdb.models['Model-RF'].rootAssembly.PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#202 ]', ), ), edges=(
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].edges[7], 
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].edges[16])
    , line=mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].edges[89], 
    sense=FORWARD)
mdb.models['Model-RF'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-RF'].rootAssembly.Surface(name='Surf-5', side1Faces=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    mask=('[#10000 #8208834 ]', ), )+\
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces.getSequenceFromMask(
    mask=('[#102 ]', ), ))
mdb.models['Model-RF'].Pressure(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, field='', magnitude=10.0, name='pressure10mpa', 
    region=mdb.models['Model-RF'].rootAssembly.surfaces['Surf-5'])
mdb.models['Model-RF'].rootAssembly.Surface(name='Surf-6', side2Faces=
    mdb.models['Model-RF'].rootAssembly.instances['BOLT-1'].faces.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-RF'].BoltLoad(boltMethod=APPLY_FORCE, createStepName='Step-1'
    , datumAxis=
    mdb.models['Model-RF'].rootAssembly.instances['BOLT-1'].datums[1], 
    magnitude=115598.0, name='Load-2', region=
    mdb.models['Model-RF'].rootAssembly.surfaces['Surf-6'])
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-RF', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='FlangeRF', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF, datacheckJob=True)
#* An error was detected when trying to generate surfaces 
#* on gasket regions. Verify that the sweep direction on the 
#* gasket is along the thickness direction, and that the 
#* surfaces are defined at the top or bottom face.
#* An error was detected when trying to generate surfaces 
#* on gasket regions. Verify that the sweep direction on the 
#* gasket is along the thickness direction, and that the 
#* surfaces are defined at the top or bottom face.
#* An error was detected when trying to generate surfaces 
#* on gasket regions. Verify that the sweep direction on the 
#* gasket is along the thickness direction, and that the 
#* surfaces are defined at the top or bottom face.
mdb.models['Model-RF'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-RF'].rootAssembly.setMeshControls(algorithm=ADVANCING_FRONT, 
    regions=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), technique=SWEEP)
mdb.models['Model-RF'].rootAssembly.setSweepPath(edge=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].edges[19]
    , region=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells[0]
    , sense=REVERSE)
mdb.models['Model-RF'].rootAssembly.setSweepPath(edge=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].edges[5]
    , region=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells[1]
    , sense=REVERSE)
mdb.models['Model-RF'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=GK3D8, elemLibrary=STANDARD), ElemType(elemCode=GK3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=UNKNOWN_TET, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), ))
mdb.models['Model-RF'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RF'].rootAssembly.regenerate()
mdb.models['Model-RF'].rootAssembly.Set(name='gaskets1', nodes=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#300 #0:4 #fffe0000 #3f ]', ), ))
mdb.models['Model-RF'].rootAssembly.Set(name='gaskettop', nodes=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#fffff003 #3fff #fff8 #0:2 #1fff0 #7ffc0 #0', 
    ' #fffffc00 #ffffffff:7 #7ffffff #0:16 #f0000000 #ffffffff:8 #1fff ]', ), 
    ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RF'].rootAssembly.regenerate()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RF'].boundaryConditions['BC-3'].setValues(localCsys=None)
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF, datacheckJob=True)
#* An error was detected when trying to generate surfaces 
#* on gasket regions. Verify that the sweep direction on the 
#* gasket is along the thickness direction, and that the 
#* surfaces are defined at the top or bottom face.
#* An error was detected when trying to generate surfaces 
#* on gasket regions. Verify that the sweep direction on the 
#* gasket is along the thickness direction, and that the 
#* surfaces are defined at the top or bottom face.
#* An error was detected when trying to generate surfaces 
#* on gasket regions. Verify that the sweep direction on the 
#* gasket is along the thickness direction, and that the 
#* surfaces are defined at the top or bottom face.
mdb.models['Model-RF'].rootAssembly.assignStackDirection(cells=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), referenceRegion=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces[7])
mdb.models['Model-RF'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ))
mdb.models['Model-RF'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ))
mdb.models['Model-RF'].rootAssembly.Set(name='gaskets1', nodes=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#c #ffffc000 #7 ]', ), ))
mdb.models['Model-RF'].rootAssembly.Set(name='gaskettop', nodes=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#fffff003 #3fff #fff8 #0:2 #1fff0 #7ffc0 #0', 
    ' #fffffc00 #ffffffff:7 #7ffffff #0:16 #f0000000 #ffffffff:8 #1fff ]', ), 
    ))
mdb.models['Model-RF'].boundaryConditions['BC-3'].setValues(localCsys=
    mdb.models['Model-RF'].rootAssembly.datums[43])
mdb.models['Model-RF'].boundaryConditions['BC-2'].setValues(localCsys=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].datums[15])
mdb.models['Model-RF'].boundaryConditions['BC-3'].setValues(localCsys=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].datums[15])
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF, datacheckJob=True)
#* An error was detected when trying to generate surfaces 
#* on gasket regions. Verify that the sweep direction on the 
#* gasket is along the thickness direction, and that the 
#* surfaces are defined at the top or bottom face.
#* An error was detected when trying to generate surfaces 
#* on gasket regions. Verify that the sweep direction on the 
#* gasket is along the thickness direction, and that the 
#* surfaces are defined at the top or bottom face.
#* An error was detected when trying to generate surfaces 
#* on gasket regions. Verify that the sweep direction on the 
#* gasket is along the thickness direction, and that the 
#* surfaces are defined at the top or bottom face.
mdb.models['Model-RF'].rootAssembly.features['FLANGE-1'].suppress()
mdb.models['Model-RF'].rootAssembly.assignStackDirection(cells=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ), referenceRegion=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces[4])
mdb.models['Model-RF'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-RF'].rootAssembly.setSweepPath(edge=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].edges[5]
    , region=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells[1]
    , sense=FORWARD)
mdb.models['Model-RF'].rootAssembly.assignStackDirection(cells=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), referenceRegion=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces[5])
mdb.models['Model-RF'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-RF'].rootAssembly.setSweepPath(edge=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].edges[11]
    , region=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells[0]
    , sense=REVERSE)
mdb.models['Model-RF'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ))
mdb.models['Model-RF'].rootAssembly.features['FLANGE-1'].resume()
mdb.models['Model-RF'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-RF'].rootAssembly.Set(name='gaskets1', nodes=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#c0 #0:3 #7ffffc ]', ), ))
mdb.models['Model-RF'].rootAssembly.Set(name='gaskettop', nodes=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#cf0 #0:2 #ffffffff:2 #f #f8000000 #ffffffff #3ff', 
    ' #0:7 #f8000000 #ffffffff:8 #fff #0:16 #ffffe000 #ffffffff:7', 
    ' #3fffffff ]', ), ))
mdb.models['Model-RF'].rootAssembly.Set(name='gaskettop', nodes=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#70 #0:2 #ffffffff #ff8003ff #f #f8000000 #e00000ff', 
    ' #3ff #0:7 #f8000000 #ffffffff:8 #fff #0:16 #ffffe000', 
    ' #ffffffff:7 #3fffffff ]', ), ))
mdb.models['Model-RF'].rootAssembly.Set(name='gaskettop', nodes=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#30 #0:2 #ffffffff #ff800003 #f #f8000000 #e00000ff', 
    ' #3ff #0:7 #f8000000 #ffffffff:8 #fff #0:16 #ffffe000', 
    ' #ffffffff:7 #3fffffff ]', ), ))
del mdb.models['Model-RF'].interactions['CP-1-FLANGE-1-SPRIALWOUND GASKET-1']
del mdb.models['Model-RF'].interactions['CP-2-BOLT-1-FLANGE-1']
mdb.models['Model-RF'].rootAssembly.Surface(name='CP-3-FLANGE-1', side1Faces=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    ('[#20000020 ]', ), ))
mdb.models['Model-RF'].rootAssembly.Surface(name='CP-2-SPRIALWOUND GASKET-1', 
    side1Faces=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces.getSequenceFromMask(
    ('[#84 ]', ), ))
mdb.models['Model-RF'].rootAssembly.Surface(name='CP-3-BOLT-1', side1Faces=
    mdb.models['Model-RF'].rootAssembly.instances['BOLT-1'].faces.getSequenceFromMask(
    ('[#20100000 ]', ), ))
mdb.models['Model-RF'].rootAssembly.Surface(name='CP-4-FLANGE-1', side1Faces=
    mdb.models['Model-RF'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    ('[#200 #1 ]', ), ))
mdb.models['Model-RF'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    createStepName='Initial', enforcement=SURFACE_TO_SURFACE, 
    interactionProperty='IntProp-1', master=
    mdb.models['Model-RF'].rootAssembly.surfaces['CP-3-FLANGE-1'], name=
    'CP-1-FLANGE-1-SPRIALWOUND GASKET-1', slave=
    mdb.models['Model-RF'].rootAssembly.surfaces['CP-2-SPRIALWOUND GASKET-1'], 
    sliding=FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-RF'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    createStepName='Initial', enforcement=SURFACE_TO_SURFACE, 
    interactionProperty='IntProp-1', master=
    mdb.models['Model-RF'].rootAssembly.surfaces['CP-3-BOLT-1'], name=
    'CP-2-BOLT-1-FLANGE-1', slave=
    mdb.models['Model-RF'].rootAssembly.surfaces['CP-4-FLANGE-1'], sliding=
    FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-RF'].interactions['CP-1-FLANGE-1-SPRIALWOUND GASKET-1'].setValues(
    adjustMethod=NONE, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    thickness=ON)
mdb.models['Model-RF'].interactions['CP-2-BOLT-1-FLANGE-1'].setValues(
    adjustMethod=NONE, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    thickness=ON)
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF, datacheckJob=True)
#* An error was detected when trying to generate surfaces 
#* on gasket regions. Verify that the sweep direction on the 
#* gasket is along the thickness direction, and that the 
#* surfaces are defined at the top or bottom face.
#* An error was detected when trying to generate surfaces 
#* on gasket regions. Verify that the sweep direction on the 
#* gasket is along the thickness direction, and that the 
#* surfaces are defined at the top or bottom face.
#* An error was detected when trying to generate surfaces 
#* on gasket regions. Verify that the sweep direction on the 
#* gasket is along the thickness direction, and that the 
#* surfaces are defined at the top or bottom face.
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RF'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=C3D8, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD)), regions=(
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), ))
mdb.models['Model-RF'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=C3D8, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD)), regions=(
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), ))
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE DEPENDENCIES PARAMETER SPECIFIED FOR ALL *GASKET THICKNESS BEHAVIOR OPTIONS MUST BE THE SAME.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE DEPENDENCIES PARAMETER SPECIFIED FOR *GASKET THICKNESS BEHAVIOR AND *GASKET ELASTICITY MUST NOT BE DIFFERENT.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE DEPENDENCIES PARAMETER SPECIFIED FOR *GASKET ELASTICITY AND *GASKET THICKNESS BEHAVIOR MUST NOT BE DIFFERENT.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE NUMBER OF INDEPENDENT VARIABLES FOR THE UNLOADING CURVES MAY ONLY DIFFER FROM THOSE OF THE LOADING CURVES BY ONE VARIABLE, THE PLASTIC CLOSURE', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '3080 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3080 elements have incorrect property definitions. The elements have been identified in element set WarnElemIncorrectProperty.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FlangeRF'})
mdb.models['Model-RF'].materials['SPRIAL WOUND GASKET'].gasketThicknessBehavior.setValues(
    unloadingDependencies=0, unloadingTable=((0.0, 0.0, 0.378378378), (
    3.703703704, 0.075675676, 0.481081081), (8.888888889, 0.135135135, 
    0.52972973), (13.33333333, 0.183783784, 0.551351351), (17.77777778, 
    0.286486486, 0.567567568), (22.22222222, 0.335135135, 0.578378378), (
    28.14814815, 0.389189189, 0.586486486), (31.85185185, 0.443243243, 
    0.594594595), (36.2962963, 0.497297297, 0.6), (40.74074074, 0.551351351, 
    0.605405405), (45.18518519, 0.610810811, 0.610810811), (49.62962963, 
    0.648648649, 0.0), (55.55555556, 0.681081081, 0.0), (59.25925926, 
    0.735135135, 0.0), (65.18518519, 0.767567568, 0.0), (68.14814815, 
    0.810810811, 0.0), (72.59259259, 0.848648649, 0.0), (77.03703704, 
    0.875675676, 0.0), (80.0, 0.908108108, 0.0), (85.92592593, 0.92972973, 
    0.0), (88.88888889, 0.967567568, 0.0)))
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE INDEPENDENT VARIABLES MUST BE ARRANGED IN ASCENDING ORDER', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Abaqus FOUND THAT THE USER SPECIFIED POINT OF PLASTICITY ONSET DOES NOT CORRESPOND TO A POINT GIVEN ON THE LOADING CURVE. THE TOTAL CLOSURE SPECIFIED FOR THIS POINT IS  0.10000', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '3080 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3080 elements have incorrect property definitions. The elements have been identified in element set WarnElemIncorrectProperty.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FlangeRF'})
mdb.models['Model-RF'].materials['SPRIAL WOUND GASKET'].gasketThicknessBehavior.setValues(
    unloadingTable=((0.0, 0.0, 0.643243243), (3.703703704, 0.075675676, 
    0.745945946), (8.888888889, 0.135135135, 0.794594595), (13.33333333, 
    0.183783784, 0.810810811), (17.77777778, 0.286486486, 0.827027027), (
    22.22222222, 0.335135135, 0.843243243), (28.14814815, 0.389189189, 
    0.854054054), (31.85185185, 0.443243243, 0.864864865), (36.2962963, 
    0.497297297, 0.875675676), (40.74074074, 0.551351351, 0.883783784), (
    45.18518519, 0.610810811, 0.891891892), (49.62962963, 0.648648649, 
    0.897297297), (55.55555556, 0.681081081, 0.902702703), (59.25925926, 
    0.735135135, 0.913513514), (65.18518519, 0.767567568, 0.927027027), (
    68.14814815, 0.810810811, 0.935135135), (72.59259259, 0.848648649, 
    0.940540541), (77.03703704, 0.875675676, 0.945945946), (80.0, 0.908108108, 
    0.956756757), (85.92592593, 0.92972973, 0.962162162), (88.88888889, 
    0.967567568, 0.967567568)))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Abaqus FOUND THAT THE USER SPECIFIED POINT OF PLASTICITY ONSET DOES NOT CORRESPOND TO A POINT GIVEN ON THE LOADING CURVE. THE TOTAL CLOSURE SPECIFIED FOR THIS POINT IS  0.10000', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '3080 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3080 elements have incorrect property definitions. The elements have been identified in element set WarnElemIncorrectProperty.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FlangeRF'})
mdb.models['Model-RF'].materials['SPRIAL WOUND GASKET'].gasketThicknessBehavior.setValues(
    yieldOnsetMethod=RELATIVE_SLOPE_DROP)
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'YOU MUST PROVIDE AT LEAST TWO POINTS FOR EACH UNLOADING CURVE', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '3080 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3080 elements have incorrect property definitions. The elements have been identified in element set WarnElemIncorrectProperty.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FlangeRF'})
mdb.models['Model-RF'].materials['SPRIAL WOUND GASKET'].gasketThicknessBehavior.setValues(
    unloadingTable=((0.0, 0.378378378, 0.643243243), (3.703703704, 0.481081081, 
    0.745945946), (8.888888889, 0.52972973, 0.794594595), (13.33333333, 
    0.551351351, 0.810810811), (17.77777778, 0.567567568, 0.827027027), (
    22.22222222, 0.578378378, 0.843243243), (28.14814815, 0.586486486, 
    0.854054054), (31.85185185, 0.594594595, 0.864864865), (36.2962963, 0.6, 
    0.875675676), (40.74074074, 0.605405405, 0.883783784), (45.18518519, 
    0.610810811, 0.891891892), (49.62962963, 0.0, 0.897297297), (55.55555556, 
    0.0, 0.902702703), (59.25925926, 0.0, 0.913513514), (65.18518519, 0.0, 
    0.927027027), (68.14814815, 0.0, 0.935135135), (72.59259259, 0.0, 
    0.940540541), (77.03703704, 0.0, 0.945945946), (80.0, 0.0, 0.956756757), (
    85.92592593, 0.0, 0.962162162), (88.88888889, 0.0, 0.967567568)))
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INCORRECT UNLOADING CURVE DATA MAY HAVE BEEN SPECIFIED -- PLASTIC CLOSURE 0.96757 HAS EXCEEDED THE CLOSURE VALUE 0.0000', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'YOU MUST PROVIDE AT LEAST TWO POINTS FOR EACH UNLOADING CURVE', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '3080 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3080 elements have incorrect property definitions. The elements have been identified in element set WarnElemIncorrectProperty.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FlangeRF'})
mdb.models['Model-RF'].materials['SPRIAL WOUND GASKET'].gasketThicknessBehavior.setValues(
    yieldOnsetMethod=CLOSURE_VALUE)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].Set(cells=
    mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), name='Set-2')
mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].SectionAssignment(offset=0.0
    , offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].sets['Set-2'], 
    sectionName='GASKET', thicknessAssignment=FROM_SECTION)
del mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].sectionAssignments[0]
mdb.models['Model-RF'].rootAssembly.regenerate()
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INCORRECT UNLOADING CURVE DATA MAY HAVE BEEN SPECIFIED -- PLASTIC CLOSURE 0.96757 HAS EXCEEDED THE CLOSURE VALUE 0.0000', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Abaqus FOUND THAT THE USER SPECIFIED POINT OF PLASTICITY ONSET DOES NOT CORRESPOND TO A POINT GIVEN ON THE LOADING CURVE. THE TOTAL CLOSURE SPECIFIED FOR THIS POINT IS  0.10000', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '3080 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3080 elements have incorrect property definitions. The elements have been identified in element set WarnElemIncorrectProperty.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FlangeRF'})
mdb.models['Model-RF'].rootAssembly.regenerate()
mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].sectionAssignments[0].setValues(
    region=mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].sets['Set-2'])
del mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].sets['Set-1']
mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].Set(cells=
    mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), name='Set-2')
mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].regenerate()
mdb.models['Model-RF'].materials['SPRIAL WOUND GASKET'].gasketThicknessBehavior.setValues(
    yieldOnset=0.968)
mdb.models['Model-RF'].rootAssembly.regenerate()
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INCORRECT UNLOADING CURVE DATA MAY HAVE BEEN SPECIFIED -- PLASTIC CLOSURE 0.96757 HAS EXCEEDED THE CLOSURE VALUE 0.0000', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Abaqus FOUND THAT THE USER SPECIFIED POINT OF PLASTICITY ONSET DOES NOT CORRESPOND TO A POINT GIVEN ON THE LOADING CURVE. THE TOTAL CLOSURE SPECIFIED FOR THIS POINT IS  0.96800', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '3080 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3080 elements have incorrect property definitions. The elements have been identified in element set WarnElemIncorrectProperty.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FlangeRF'})
del mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].sectionAssignments[0]
mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].Set(cells=
    mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), name='Set-3')
mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].SectionAssignment(offset=0.0
    , offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].sets['Set-3'], 
    sectionName='GASKET', thicknessAssignment=FROM_SECTION)
mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].regenerate()
mdb.models['Model-RF'].rootAssembly.regenerate()
mdb.models['Model-RF'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=GK3D8, elemLibrary=STANDARD), ElemType(elemCode=GK3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=UNKNOWN_TET, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), ))
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.models['Model-RF'].rootAssembly.features['FLANGE-1'].suppress()
mdb.models['Model-RF'].rootAssembly.features['FLANGE-1'].resume()
mdb.models['Model-RF'].rootAssembly.features['FLANGE-1'].suppress()
mdb.models['Model-RF'].rootAssembly.assignStackDirection(cells=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), referenceRegion=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces[5])
mdb.models['Model-RF'].rootAssembly.setMeshControls(regions=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), technique=BOTTOM_UP)
mdb.models['Model-RF'].rootAssembly.assignStackDirection(cells=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ), referenceRegion=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces[4])
mdb.models['Model-RF'].rootAssembly.features['FLANGE-1'].resume()
mdb.models['Model-RF'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=GK3D8, elemLibrary=STANDARD), ElemType(elemCode=GK3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=UNKNOWN_TET, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ), ))
mdb.models['Model-RF'].rootAssembly.assignStackDirection(cells=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), referenceRegion=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces[5])
mdb.models['Model-RF'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-RF'].rootAssembly.setMeshControls(regions=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), technique=STRUCTURED)
#* Error: Mapped meshing with Quad/Hex elements is not supported
#* in Abaqus/CAE for the Gasket elements.
mdb.models['Model-RF'].rootAssembly.features['FLANGE-1'].suppress()
mdb.models['Model-RF'].rootAssembly.assignStackDirection(cells=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ), referenceRegion=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces[4])
mdb.models['Model-RF'].rootAssembly.assignStackDirection(cells=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), referenceRegion=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces[5])
mdb.models['Model-RF'].rootAssembly.assignStackDirection(cells=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ), referenceRegion=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces[4])
mdb.models['Model-RF'].rootAssembly.assignStackDirection(cells=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), referenceRegion=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces[4])
mdb.models['Model-RF'].rootAssembly.assignStackDirection(cells=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), referenceRegion=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].faces[5])
mdb.models['Model-RF'].rootAssembly.setMeshControls(algorithm=MEDIAL_AXIS, 
    regions=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), technique=SWEEP)
mdb.models['Model-RF'].rootAssembly.setSweepPath(edge=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].edges[11]
    , region=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells[0]
    , sense=REVERSE)
mdb.models['Model-RF'].rootAssembly.setSweepPath(edge=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].edges[17]
    , region=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells[1]
    , sense=REVERSE)
mdb.models['Model-RF'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'], ))
mdb.models['Model-RF'].rootAssembly.features['FLANGE-1'].resume()
mdb.models['Model-RF'].boundaryConditions['BC-1'].setValues(region=
    mdb.models['Model-RF'].rootAssembly.sets['gaskettop'])
mdb.models['Model-RF'].rootAssembly.Set(name='gaskettop', nodes=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#30 #0:2 #ffffffff #ff800003 #f #f8000000 #e00000ff', 
    ' #3ff #0:7 #f8000000 #ffffffff:8 #fff #0:16 #ffffe000', 
    ' #ffffffff:7 #3fffffff ]', ), ))
mdb.models['Model-RF'].rootAssembly.Set(name='gaskets1', nodes=
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].nodes.getSequenceFromMask(
    mask=('[#c0 #0:3 #7ffffc ]', ), ))
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF, datacheckJob=True)
#* An error was detected when trying to generate surfaces 
#* on gasket regions. Verify that the sweep direction on the 
#* gasket is along the thickness direction, and that the 
#* surfaces are defined at the top or bottom face.
#* An error was detected when trying to generate surfaces 
#* on gasket regions. Verify that the sweep direction on the 
#* gasket is along the thickness direction, and that the 
#* surfaces are defined at the top or bottom face.
#* An error was detected when trying to generate surfaces 
#* on gasket regions. Verify that the sweep direction on the 
#* gasket is along the thickness direction, and that the 
#* surfaces are defined at the top or bottom face.
del mdb.models['Model-RF'].materials['SPRIAL WOUND GASKET'].gasketThicknessBehavior
mdb.models['Model-RF'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=C3D8R, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    kinematicSplit=AVERAGE_STRAIN, hourglassControl=DEFAULT, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD)), regions=(
    mdb.models['Model-RF'].rootAssembly.instances['SPRIALWOUND GASKET-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), ))
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'YOU MUST DEFINE THE LOADING CURVE FOR THE THICKNESS BEHAVIOR OF THE GASKET', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '3080 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3080 elements have incorrect property definitions. The elements have been identified in element set WarnElemIncorrectProperty.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FlangeRF'})
mdb.models['Model-RF'].sections['GASKET'].setValues(material='FLANGE')
mdb.models['Model-RF'].sections['GASKET'].setValues(material=
    'SPRIAL WOUND GASKET')
mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].sectionAssignments[0].setValues(
    sectionName='BOLT')
mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].sectionAssignments[0].setValues(
    sectionName='GASKET')
mdb.models['Model-RF'].sections['GASKET'].setValues(material='FLANGE')
del mdb.models['Model-RF'].sections['GASKET']
del mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].sectionAssignments[0]
mdb.models['Model-RF'].HomogeneousSolidSection(material='SPRIAL WOUND GASKET', 
    name='plaingasket', thickness=None)
mdb.models['Model-RF'].sections['plaingasket'].setValues(material=
    'SPRIAL WOUND GASKET', thickness=1.0)
mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].Set(cells=
    mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), name='Set-4')
mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].SectionAssignment(offset=0.0
    , offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-RF'].parts['SPRIALWOUND GASKET'].sets['Set-4'], 
    sectionName='plaingasket', thicknessAssignment=FROM_SECTION)
mdb.models['Model-RF'].rootAssembly.regenerate()
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 3972, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 155.0})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov 18 03:58:57 2018', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 24508, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 195.0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 14 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.875, 'attempts': 1, 
    'timeIncrement': 0.375, 'increment': 3, 'stepTime': 0.875, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.125, 'increment': 4, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov 18 03:59:39 2018', 'jobName': 'FlangeRF'})
mdb.models['Model-RF'].materials['SPRIAL WOUND GASKET'].GasketThicknessBehavior(
    table=((0.0, 0.0), (3.703703704, 0.075675676), (8.888888889, 0.135135135), 
    (13.33333333, 0.183783784), (17.77777778, 0.286486486), (22.22222222, 
    0.335135135), (28.14814815, 0.389189189), (31.85185185, 0.443243243), (
    36.2962963, 0.497297297), (40.74074074, 0.551351351), (45.18518519, 
    0.610810811), (49.62962963, 0.648648649), (55.55555556, 0.681081081), (
    59.25925926, 0.735135135), (65.18518519, 0.767567568), (68.14814815, 
    0.810810811), (72.59259259, 0.848648649), (77.03703704, 0.875675676), (
    80.0, 0.908108108), (85.92592593, 0.92972973), (88.88888889, 0.967567568)), 
    yieldOnset=0.967567568, yieldOnsetMethod=CLOSURE_VALUE)
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 22540, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 195.0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 14 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.875, 'attempts': 1, 
    'timeIncrement': 0.375, 'increment': 3, 'stepTime': 0.875, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.125, 'increment': 4, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov 18 04:06:06 2018', 'jobName': 'FlangeRF'})
mdb.models['Model-RF'].materials['SPRIAL WOUND GASKET'].gasketThicknessBehavior.setValues(
    unloadingTable=((0.0, 0.378378378, 0.643243243), (3.703703704, 0.481081081, 
    0.745945946), (8.888888889, 0.52972973, 0.794594595), (13.33333333, 
    0.551351351, 0.810810811), (17.77777778, 0.567567568, 0.827027027), (
    22.22222222, 0.578378378, 0.843243243), (28.14814815, 0.586486486, 
    0.854054054), (31.85185185, 0.594594595, 0.864864865), (36.2962963, 0.6, 
    0.875675676), (40.74074074, 0.605405405, 0.883783784), (45.18518519, 
    0.610810811, 0.891891892), (49.62962963, 0.0, 0.897297297), (55.55555556, 
    0.0, 0.902702703), (59.25925926, 0.0, 0.913513514), (65.18518519, 0.0, 
    0.927027027), (68.14814815, 0.0, 0.935135135), (72.59259259, 0.0, 
    0.940540541), (77.03703704, 0.0, 0.945945946), (80.0, 0.0, 0.956756757), (
    85.92592593, 0.0, 0.962162162), (88.88888889, 0.0, 0.967567568)))
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 25724, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 195.0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 14 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.875, 'attempts': 1, 
    'timeIncrement': 0.375, 'increment': 3, 'stepTime': 0.875, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.125, 'increment': 4, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov 18 04:09:13 2018', 'jobName': 'FlangeRF'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].materials.changeKey(fromName='SPRIAL WOUND GASKET', 
    toName='RTJ Gasket')
del mdb.models['Model-RTJ'].sections['GASKET']
mdb.models['Model-RTJ'].HomogeneousSolidSection(material='RTJ Gasket', name=
    'RTJ', thickness=None)
mdb.models['Model-RTJ'].parts['RTJ'].Set(cells=
    mdb.models['Model-RTJ'].parts['RTJ'].cells.getSequenceFromMask(('[#3 ]', ), 
    ), name='Set-1')
mdb.models['Model-RTJ'].parts['RTJ'].SectionAssignment(offset=0.0, offsetField=
    '', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-RTJ'].parts['RTJ'].sets['Set-1'], sectionName='RTJ', 
    thicknessAssignment=FROM_SECTION)
mdb.models['Model-RTJ'].rootAssembly.regenerate()
# Save by bijran on 2018_11_18-09.04.06; build 6.14-2 2014_08_22-22.00.46 134497
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Model-RTJ'].parts['SPRIALWOUND GASKET']
mdb.models['Model-RTJ'].parts['RTJ'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=1.0)
mdb.models['Model-RTJ'].parts['RTJ'].assignStackDirection(cells=
    mdb.models['Model-RTJ'].parts['RTJ'].cells.getSequenceFromMask(('[#3 ]', ), 
    ), referenceRegion=mdb.models['Model-RTJ'].parts['RTJ'].faces[3])
mdb.models['Model-RTJ'].parts['RTJ'].setMeshControls(regions=
    mdb.models['Model-RTJ'].parts['RTJ'].cells.getSequenceFromMask(('[#3 ]', ), 
    ), technique=BOTTOM_UP)
mdb.models['Model-RTJ'].parts['RTJ'].setMeshControls(regions=
    mdb.models['Model-RTJ'].parts['RTJ'].cells.getSequenceFromMask(('[#3 ]', ), 
    ), technique=SWEEP)
mdb.models['Model-RTJ'].parts['RTJ'].setSweepPath(edge=
    mdb.models['Model-RTJ'].parts['RTJ'].edges[3], region=
    mdb.models['Model-RTJ'].parts['RTJ'].cells[0], sense=FORWARD)
mdb.models['Model-RTJ'].parts['RTJ'].setSweepPath(edge=
    mdb.models['Model-RTJ'].parts['RTJ'].edges[6], region=
    mdb.models['Model-RTJ'].parts['RTJ'].cells[1], sense=REVERSE)
mdb.models['Model-RTJ'].parts['RTJ'].generateMesh()
# Save by bijran on 2018_11_18-09.10.24; build 6.14-2 2014_08_22-22.00.46 134497
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].rootAssembly.regenerate()
mdb.models['Model-RTJ'].StaticStep(name='RTJ STEP-1', previous='Initial')
mdb.models['Model-RTJ'].rootAssembly.DatumAxisByThruEdge(edge=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].edges[6])
mdb.models['Model-RTJ'].rootAssembly.PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), edges=(
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].edges[28], 
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].edges[43]), line=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].edges[34], 
    sense=REVERSE)
mdb.models['Model-RTJ'].rootAssembly.PartitionCellBySweepEdge(cells=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ), edges=(
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].edges[22], ), 
    sweepPath=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].edges[3])
mdb.models['Model-RTJ'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=C3D8, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD)), regions=(
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].cells.getSequenceFromMask(
    ('[#ff ]', ), ), ))
mdb.models['Model-RTJ'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=C3D8, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD)), regions=(
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].cells.getSequenceFromMask(
    ('[#ff ]', ), ), ))
mdb.models['Model-RTJ'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'], ))
mdb.models['Model-RTJ'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'], ))
mdb.models['Model-RTJ'].rootAssembly.Set(name='bolttop', nodes=
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].nodes.getSequenceFromMask(
    mask=('[#200 #0 #3f80000 #f0000 #0:6 #1f80000 #0', ' #7e00 ]', ), ))
mdb.models['Model-RTJ'].rootAssembly.Set(faces=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    mask=('[#20002004 ]', ), )+\
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].faces.getSequenceFromMask(
    mask=('[#104 ]', ), ), name='flangeglobal')
mdb.models['Model-RTJ'].rootAssembly.Set(name='Set-8', nodes=
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].nodes.getSequenceFromMask(
    mask=('[#0:4 #ffffffc0 #ffffffe7 #3 #0:30 #fff00000 #ffffffff:8', 
    ' #3fffff ]', ), ))
mdb.models['Model-RTJ'].rootAssembly.sets.changeKey(fromName='Set-8', toName=
    'RTJGASKETTOP')
del mdb.models['Model-RTJ'].rootAssembly.sets['RTJGASKETTOP']
del mdb.models['Model-RTJ'].rootAssembly.sets['Set-11']
del mdb.models['Model-RTJ'].rootAssembly.sets['Set-12']
del mdb.models['Model-RTJ'].rootAssembly.sets['Set-13']
del mdb.models['Model-RTJ'].rootAssembly.sets['flgbolts']
del mdb.models['Model-RTJ'].rootAssembly.sets['gaskets2']
del mdb.models['Model-RTJ'].rootAssembly.features['Partition cell-1']
mdb.models['Model-RTJ'].rootAssembly.DatumPlaneByLinePoint(line=
    mdb.models['Model-RTJ'].rootAssembly.datums[93], point=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].datums[10])
del mdb.models['Model-RTJ'].rootAssembly.features['Datum plane-1']
mdb.models['Model-RTJ'].rootAssembly.features['Datum csys-1'].suppress()
mdb.models['Model-RTJ'].rootAssembly.features['Datum csys-1'].resume()
mdb.models['Model-RTJ'].rootAssembly.DatumCsysByTwoLines(CARTESIAN, line1=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].datums[17], 
    line2=mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].datums[1], 
    name='Datum csys-2')
del mdb.models['Model-RTJ'].rootAssembly.features['Datum csys-2']
mdb.models['Model-RTJ'].rootAssembly.DatumCsysByTwoLines(CARTESIAN, line1=
    mdb.models['Model-RTJ'].rootAssembly.datums[93], line2=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].edges[12], name=
    'Datum csys-2')
del mdb.models['Model-RTJ'].rootAssembly.features['Datum csys-2']
del mdb.models['Model-RTJ'].rootAssembly.features['Datum csys-1']
mdb.models['Model-RTJ'].rootAssembly.features['Datum axis-1'].suppress()
del mdb.models['Model-RTJ'].rootAssembly.features['Datum axis-1']
# Save by bijran on 2018_11_18-09.40.39; build 6.14-2 2014_08_22-22.00.46 134497
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].rootAssembly.DatumCsysByTwoLines(CARTESIAN, line1=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].datums[17], 
    line2=mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].edges[5], 
    name='Datum csys-1')
# Save by bijran on 2018_11_18-09.43.51; build 6.14-2 2014_08_22-22.00.46 134497
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].rootAssembly.Set(name='flanges1', nodes=
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].nodes.getSequenceFromMask(
    mask=('[#3dc476 #ffc31ff0 #1fff #7f03f86 #3e0f841 #ffc021fc #7', 
    ' #fc000000 #fffc0ff #0:2 #ffe00000 #1fff8007 #0:2 #7c000', 
    ' #3ff00 #0 #7fe07c ]', ), )+\
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].nodes.getSequenceFromMask(
    mask=('[#fe0066ff #ffffffdb #3fff #1e00000 #78 #fffc0000 #3fffff', 
    ' #0 #fffff000 #f00003ff #2007f #70 #0:7 #f8000000', 
    ' #ffffffff:2 #7 #0:6 #ffff0000 #ffffffff:3 #1ffff #0:4', 
    ' #ffc000 #0:5 #fffff000 #3ff ]', ), ))
mdb.models['Model-RTJ'].rootAssembly.Set(name='Set-4', nodes=
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].nodes.getSequenceFromMask(
    mask=('[#c #0 #f0000000 #3fffff #30 #18 #0', 
    ' #fe000000 #ffffffff #3f #0:27 #fffff ]', ), ))
mdb.models['Model-RTJ'].rootAssembly.sets.changeKey(fromName='Set-4', toName=
    'RTJS1')
mdb.models['Model-RTJ'].rootAssembly.Set(name='Set-5', nodes=
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].nodes.getSequenceFromMask(
    mask=('[#c0 #0:5 #ffc ]', ), )+\
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].nodes.getSequenceFromMask(
    mask=('[#980 #0 #60000 #c000 ]', ), ))
mdb.models['Model-RTJ'].rootAssembly.sets.changeKey(fromName='Set-5', toName=
    'RTJBOLTEDGES')
mdb.models['Model-RTJ'].rootAssembly.Set(name='RTJTOP', nodes=
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].nodes.getSequenceFromMask(
    mask=('[#0:4 #ffffffc0 #ffffffe7 #3 #0:30 #fff00000 #ffffffff:8', 
    ' #3fffff ]', ), ))
mdb.models['Model-RTJ'].ZsymmBC(createStepName='RTJ STEP-1', localCsys=
    mdb.models['Model-RTJ'].rootAssembly.datums[104], name='FLGS1', region=
    mdb.models['Model-RTJ'].rootAssembly.sets['flanges1'])
mdb.models['Model-RTJ'].ZsymmBC(createStepName='RTJ STEP-1', localCsys=
    mdb.models['Model-RTJ'].rootAssembly.datums[104], name='GASKBOLTS1', 
    region=mdb.models['Model-RTJ'].rootAssembly.sets['RTJS1'])
mdb.models['Model-RTJ'].YsymmBC(createStepName='RTJ STEP-1', localCsys=None, 
    name='BOLTRTJEDGE', region=
    mdb.models['Model-RTJ'].rootAssembly.sets['RTJBOLTEDGES'])
mdb.models['Model-RTJ'].YsymmBC(createStepName='RTJ STEP-1', localCsys=None, 
    name='RTJBOLTTOP', region=
    mdb.models['Model-RTJ'].rootAssembly.sets['RTJTOP'])
mdb.models['Model-RTJ'].boundaryConditions.changeKey(fromName='RTJBOLTTOP', 
    toName='RTJTOP')
mdb.models['Model-RTJ'].YsymmBC(createStepName='RTJ STEP-1', localCsys=None, 
    name='BOLTTOP', region=
    mdb.models['Model-RTJ'].rootAssembly.sets['bolttop'])
mdb.models['Model-RTJ'].ZsymmBC(createStepName='RTJ STEP-1', localCsys=None, 
    name='FLGGLOBAL', region=
    mdb.models['Model-RTJ'].rootAssembly.sets['flangeglobal'])
mdb.models['Model-RTJ'].rootAssembly.Surface(name='Surf-1', side1Faces=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    mask=('[#c8000 ]', ), )+\
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].faces.getSequenceFromMask(
    mask=('[#40 ]', ), ))
mdb.models['Model-RTJ'].Pressure(amplitude=UNSET, createStepName='RTJ STEP-1', 
    distributionType=UNIFORM, field='', magnitude=10.0, name='PRESSURE', 
    region=mdb.models['Model-RTJ'].rootAssembly.surfaces['Surf-1'])
# Save by bijran on 2018_11_18-13.32.59; build 6.14-2 2014_08_22-22.00.46 134497
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].rootAssembly.Surface(name='Surf-2', side2Faces=
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].faces.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-RTJ'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'RTJ STEP-1', datumAxis=
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].datums[1], 
    magnitude=115598.0, name='Load-2', region=
    mdb.models['Model-RTJ'].rootAssembly.surfaces['Surf-2'])
# Save by bijran on 2018_11_18-13.33.59; build 6.14-2 2014_08_22-22.00.46 134497
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-RTJ', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='FLANGERTJ', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '2317 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].sections['RTJ'].setValues(material='RTJ Gasket', 
    thickness=1.0)
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '2317 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].parts['FLANGE'].Set(cells=
    mdb.models['Model-RTJ'].parts['FLANGE'].cells.getSequenceFromMask(('[#3 ]', 
    ), ), name='Set-2')
mdb.models['Model-RTJ'].parts['FLANGE'].sectionAssignments[0].setValues(region=
    mdb.models['Model-RTJ'].parts['FLANGE'].sets['Set-2'])
mdb.models['Model-RTJ'].rootAssembly.regenerate()
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '604 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].parts['BOLT'].Set(cells=
    mdb.models['Model-RTJ'].parts['BOLT'].cells.getSequenceFromMask(('[#ff ]', 
    ), ), name='Set-2')
mdb.models['Model-RTJ'].parts['BOLT'].sectionAssignments[0].setValues(region=
    mdb.models['Model-RTJ'].parts['BOLT'].sets['Set-2'])
# Save by bijran on 2018_11_18-13.39.01; build 6.14-2 2014_08_22-22.00.46 134497
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].parts['BOLT'].regenerate()
mdb.models['Model-RTJ'].rootAssembly.regenerate()
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 11368, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 3 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 63.0})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov 18 13:40:03 2018', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 17932, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 3 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 94.0})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
del mdb.models['Model-RTJ'].materials['RTJ Gasket'].gasketMembraneElastic
del mdb.models['Model-RTJ'].materials['RTJ Gasket'].gasketTransverseShearElastic
mdb.models['Model-RTJ'].materials['RTJ Gasket'].elastic.setValues(table=((
    211400.0, 0.293), ))
mdb.models['Model-RTJ'].materials['RTJ Gasket'].Plastic(table=((235.0, 0.0), ))
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 5844, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 3 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 94.0})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].boundaryConditions['BOLTTOP'].setValues(typeName=
    PINNED)
mdb.models['Model-RTJ'].boundaryConditions['RTJTOP'].setValues(typeName=PINNED)
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 20920, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 3 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 94.0})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].boundaryConditions['BOLTTOP'].setValues(localCsys=
    mdb.models['Model-RTJ'].rootAssembly.datums[104], typeName=ZSYMM)
mdb.models['Model-RTJ'].boundaryConditions['BOLTRTJEDGE'].setValues(localCsys=
    mdb.models['Model-RTJ'].rootAssembly.datums[104])
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 22128, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 3 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 94.0})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
# Save by bijran on 2018_11_18-14.16.23; build 6.14-2 2014_08_22-22.00.46 134497
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].boundaryConditions['BOLTRTJEDGE'].setValues(typeName=
    ZSYMM)
mdb.models['Model-RTJ'].boundaryConditions['RTJTOP'].setValues(typeName=YSYMM)
mdb.models['Model-RTJ'].boundaryConditions['BOLTTOP'].setValues(typeName=YSYMM)
mdb.models['Model-RTJ'].boundaryConditions['BOLTRTJEDGE'].setValues(typeName=
    YSYMM)
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 14720, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 3 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 94.0})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
# Save by bijran on 2018_11_18-14.18.44; build 6.14-2 2014_08_22-22.00.46 134497
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
# Save by bijran on 2018_11_18-14.20.06; build 6.14-2 2014_08_22-22.00.46 134497
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-RTJ'].boundaryConditions['BOLTTOP'].setValues(typeName=
    PINNED)
mdb.models['Model-RTJ'].boundaryConditions['BOLTRTJEDGE'].setValues(typeName=
    PINNED)
mdb.models['Model-RTJ'].boundaryConditions['RTJTOP'].setValues(typeName=PINNED)
mdb.models['Model-RTJ'].boundaryConditions.changeKey(fromName='GASKBOLTS1', 
    toName='GASKS1')
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 24924, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 3 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 63.0})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov 18 14:35:48 2018', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 22524, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 3 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 94.0})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].rootAssembly.Surface(name='CP-1-FLANGE-1', side1Faces=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    ('[#810 ]', ), ))
mdb.models['Model-RTJ'].rootAssembly.Surface(name='CP-1-BOLT-1', side1Faces=
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].faces.getSequenceFromMask(
    ('[#20008000 ]', ), ))
mdb.models['Model-RTJ'].rootAssembly.Surface(name='CP-2-FLANGE-1', side1Faces=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Model-RTJ'].rootAssembly.Surface(name='CP-2-BOLT-1', side1Faces=
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].faces.getSequenceFromMask(
    ('[#2020014 ]', ), ))
mdb.models['Model-RTJ'].rootAssembly.Surface(name='CP-3-FLANGE-1', side1Faces=
    mdb.models['Model-RTJ'].rootAssembly.instances['FLANGE-1'].faces.getSequenceFromMask(
    ('[#1f00000 ]', ), ))
mdb.models['Model-RTJ'].rootAssembly.Surface(name='CP-3-RTJ-1', side1Faces=
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].faces.getSequenceFromMask(
    ('[#70 ]', ), ))
mdb.models['Model-RTJ'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    createStepName='Initial', enforcement=SURFACE_TO_SURFACE, 
    interactionProperty='IntProp-1', master=
    mdb.models['Model-RTJ'].rootAssembly.surfaces['CP-1-FLANGE-1'], name=
    'CP-1-FLANGE-1-BOLT-1', slave=
    mdb.models['Model-RTJ'].rootAssembly.surfaces['CP-1-BOLT-1'], sliding=
    FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-RTJ'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    createStepName='Initial', enforcement=SURFACE_TO_SURFACE, 
    interactionProperty='IntProp-1', master=
    mdb.models['Model-RTJ'].rootAssembly.surfaces['CP-2-FLANGE-1'], name=
    'CP-2-FLANGE-1-BOLT-1', slave=
    mdb.models['Model-RTJ'].rootAssembly.surfaces['CP-2-BOLT-1'], sliding=
    FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-RTJ'].SurfaceToSurfaceContactStd(adjustMethod=OVERCLOSED, 
    createStepName='Initial', enforcement=SURFACE_TO_SURFACE, 
    interactionProperty='IntProp-1', master=
    mdb.models['Model-RTJ'].rootAssembly.surfaces['CP-3-FLANGE-1'], name=
    'CP-3-FLANGE-1-RTJ-1', slave=
    mdb.models['Model-RTJ'].rootAssembly.surfaces['CP-3-RTJ-1'], sliding=FINITE
    , surfaceSmoothing=AUTOMATIC)
mdb.models['Model-RTJ'].interactions['CP-1-FLANGE-1-BOLT-1'].setValues(
    adjustMethod=NONE, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    thickness=ON)
mdb.models['Model-RTJ'].interactions['CP-2-FLANGE-1-BOLT-1'].setValues(
    adjustMethod=NONE, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    thickness=ON)
mdb.models['Model-RTJ'].interactions['CP-3-FLANGE-1-RTJ-1'].setValues(
    adjustMethod=NONE, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    thickness=ON, tied=OFF)
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SLAVE SURFACES ASSEMBLY_CP-1-BOLT-1 AND ASSEMBLY_CP-2-BOLT-1 INTERSECT EACH OTHER. THEY ARE PAIRED WITH MASTER SURFACES ASSEMBLY_CP-1-FLANGE-1 AND ASSEMBLY_CP-2-FLANGE-1 THAT ALSO INTERSECT EACH OTHER. IF BOTH PAIRS ARE *CONTACT PAIRs, THESE TWO PAIRS SHOULD NOT BE SIMULTANEOUSLY PRESENT IN A STEP BECAUSE OF POSSIBLE CONVERGENCE PROBLEMS; USE *MODEL CHANGE,TYPE=CONTACT PAIR TO REMOVE ONE OF THEM. IF BOTH ARE *TIE PAIRS, THE REDUNDANT TIES WILL BE REMOVED AUTOMATICALLY. IF ONE PAIR IS *TIE AND ANOTHER IS *CONTACT PAIR, REMOVE ONE OF THEM.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 23940, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 98.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.104 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.104 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 3 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.103 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.118 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.119 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.120 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.133 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.134 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.163 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.1 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.2 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.3 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.4 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.5 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.7 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.19 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2690 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 675 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.118 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1132 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 125 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0625, 'attempts': 3, 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0625, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.125, 'attempts': 1, 
    'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.125, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.104 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.105 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.118 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.19 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.32 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 60 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.104 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 30 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.103 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.104 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.1 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.4 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.34 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1996 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 316 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.125, 'attempts': ' 1U', 
    'timeIncrement': 0.09375, 'increment': 3, 'stepTime': 0.125, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.125, 'attempts': ' 2U', 
    'timeIncrement': 0.0234375, 'increment': 3, 'stepTime': 0.125, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 5, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.130859375, 
    'attempts': 3, 'timeIncrement': 0.005859375, 'increment': 3, 
    'stepTime': 0.130859375, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.13671875, 'attempts': 1, 
    'timeIncrement': 0.005859375, 'increment': 4, 'stepTime': 0.13671875, 
    'step': 1, 'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.13671875, 
    'attempts': ' 1U', 'timeIncrement': 0.005859375, 'increment': 5, 
    'stepTime': 0.13671875, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 6, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.13671875, 
    'attempts': ' 2U', 'timeIncrement': 0.00146484375, 'increment': 5, 
    'stepTime': 0.13671875, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 12, 
    'iterations': 12, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.1370849609375, 
    'attempts': 3, 'timeIncrement': 0.0003662109375, 'increment': 5, 
    'stepTime': 0.1370849609375, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.1370849609375, 
    'attempts': ' 1U', 'timeIncrement': 0.00054931640625, 'increment': 6, 
    'stepTime': 0.1370849609375, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 11, 'iterations': 16, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.137222290039063, 
    'attempts': 2, 'timeIncrement': 0.0001373291015625, 'increment': 6, 
    'stepTime': 0.137222290039063, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.137428283691406, 
    'attempts': 1, 'timeIncrement': 0.00020599365234375, 'increment': 7, 
    'stepTime': 0.137428283691406, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.137428283691406, 
    'attempts': ' 1U', 'timeIncrement': 0.000308990478515625, 'increment': 8, 
    'stepTime': 0.137428283691406, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.137505531311035, 
    'attempts': 2, 'timeIncrement': 7.72476196289063e-05, 'increment': 8, 
    'stepTime': 0.137505531311035, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.137505531311035, 
    'attempts': ' 1U', 'timeIncrement': 0.000115871429443359, 'increment': 9, 
    'stepTime': 0.137505531311035, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 11, 'iterations': 16, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.137534499168396, 
    'attempts': 2, 'timeIncrement': 2.89678573608398e-05, 'increment': 9, 
    'stepTime': 0.137534499168396, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.137577950954437, 
    'attempts': 1, 'timeIncrement': 4.34517860412598e-05, 'increment': 10, 
    'stepTime': 0.137577950954437, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.137643128633499, 
    'attempts': 1, 'timeIncrement': 6.51776790618896e-05, 'increment': 11, 
    'stepTime': 0.137643128633499, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.137643128633499, 
    'attempts': ' 1U', 'timeIncrement': 9.77665185928345e-05, 'increment': 12, 
    'stepTime': 0.137643128633499, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 5, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.137667570263147, 
    'attempts': 2, 'timeIncrement': 2.44416296482086e-05, 'increment': 12, 
    'stepTime': 0.137667570263147, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.13770423270762, 
    'attempts': 1, 'timeIncrement': 3.66624444723129e-05, 'increment': 13, 
    'stepTime': 0.13770423270762, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.137759226374328, 
    'attempts': 1, 'timeIncrement': 5.49936667084694e-05, 'increment': 14, 
    'stepTime': 0.137759226374328, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.137841716874391, 
    'attempts': 1, 'timeIncrement': 8.24905000627041e-05, 'increment': 15, 
    'stepTime': 0.137841716874391, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.137965452624485, 
    'attempts': 1, 'timeIncrement': 0.000123735750094056, 'increment': 16, 
    'stepTime': 0.137965452624485, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.138151056249626, 
    'attempts': 1, 'timeIncrement': 0.000185603625141084, 'increment': 17, 
    'stepTime': 0.138151056249626, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.138429461687338, 
    'attempts': 1, 'timeIncrement': 0.000278405437711626, 'increment': 18, 
    'stepTime': 0.138429461687338, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.138847069843905, 
    'attempts': 1, 'timeIncrement': 0.000417608156567439, 'increment': 19, 
    'stepTime': 0.138847069843905, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.139473482078756, 
    'attempts': 1, 'timeIncrement': 0.000626412234851159, 'increment': 20, 
    'stepTime': 0.139473482078756, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.140413100431033, 
    'attempts': 1, 'timeIncrement': 0.000939618352276739, 'increment': 21, 
    'stepTime': 0.140413100431033, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 22, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.141822527959448, 
    'attempts': 1, 'timeIncrement': 0.00140942752841511, 'increment': 22, 
    'stepTime': 0.141822527959448, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 23, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.143936669252071, 
    'attempts': 1, 'timeIncrement': 0.00211414129262266, 'increment': 23, 
    'stepTime': 0.143936669252071, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 24, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.147107881191005, 
    'attempts': 1, 'timeIncrement': 0.00317121193893399, 'increment': 24, 
    'stepTime': 0.147107881191005, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 25, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.151864699099406, 
    'attempts': 1, 'timeIncrement': 0.00475681790840099, 'increment': 25, 
    'stepTime': 0.151864699099406, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 26, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.158999925962007, 
    'attempts': 1, 'timeIncrement': 0.00713522686260148, 'increment': 26, 
    'stepTime': 0.158999925962007, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 27, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.169702766255909, 
    'attempts': 1, 'timeIncrement': 0.0107028402939022, 'increment': 27, 
    'stepTime': 0.169702766255909, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 28, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.185757026696763, 
    'attempts': 1, 'timeIncrement': 0.0160542604408533, 'increment': 28, 
    'stepTime': 0.185757026696763, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 29, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.209838417358043, 
    'attempts': 1, 'timeIncrement': 0.02408139066128, 'increment': 29, 
    'stepTime': 0.209838417358043, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 30, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.245960503349963, 
    'attempts': 1, 'timeIncrement': 0.03612208599192, 'increment': 30, 
    'stepTime': 0.245960503349963, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 31, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.282082589341883, 
    'attempts': 1, 'timeIncrement': 0.03612208599192, 'increment': 31, 
    'stepTime': 0.282082589341883, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 32, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.318204675333803, 
    'attempts': 1, 'timeIncrement': 0.03612208599192, 'increment': 32, 
    'stepTime': 0.318204675333803, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 33, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.354326761325723, 
    'attempts': 1, 'timeIncrement': 0.03612208599192, 'increment': 33, 
    'stepTime': 0.354326761325723, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.354326761325723, 
    'attempts': ' 1U', 'timeIncrement': 0.03612208599192, 'increment': 34, 
    'stepTime': 0.354326761325723, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.354326761325723, 
    'attempts': ' 2U', 'timeIncrement': 0.00903052149798, 'increment': 34, 
    'stepTime': 0.354326761325723, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 34, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.356584391700218, 
    'attempts': 3, 'timeIncrement': 0.002257630374495, 'increment': 34, 
    'stepTime': 0.356584391700218, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 35, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.358842022074713, 
    'attempts': 1, 'timeIncrement': 0.002257630374495, 'increment': 35, 
    'stepTime': 0.358842022074713, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.358842022074713, 
    'attempts': ' 1U', 'timeIncrement': 0.0033864455617425, 'increment': 36, 
    'stepTime': 0.358842022074713, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 36, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.359688633465148, 
    'attempts': 2, 'timeIncrement': 0.000846611390435625, 'increment': 36, 
    'stepTime': 0.359688633465148, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 37, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.360958550550802, 
    'attempts': 1, 'timeIncrement': 0.00126991708565344, 'increment': 37, 
    'stepTime': 0.360958550550802, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.360958550550802, 
    'attempts': ' 1U', 'timeIncrement': 0.00190487562848016, 'increment': 38, 
    'stepTime': 0.360958550550802, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 38, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.361434769457922, 
    'attempts': 2, 'timeIncrement': 0.000476218907120039, 'increment': 38, 
    'stepTime': 0.361434769457922, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.361434769457922, 
    'attempts': ' 1U', 'timeIncrement': 0.000714328360680059, 'increment': 39, 
    'stepTime': 0.361434769457922, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 39, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.361613351548092, 
    'attempts': 2, 'timeIncrement': 0.000178582090170015, 'increment': 39, 
    'stepTime': 0.361613351548092, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 40, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.361881224683347, 
    'attempts': 1, 'timeIncrement': 0.000267873135255022, 'increment': 40, 
    'stepTime': 0.361881224683347, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.361881224683347, 
    'attempts': ' 1U', 'timeIncrement': 0.000401809702882533, 'increment': 41, 
    'stepTime': 0.361881224683347, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 41, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.361981677109068, 
    'attempts': 2, 'timeIncrement': 0.000100452425720633, 'increment': 41, 
    'stepTime': 0.361981677109068, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.361981677109068, 
    'attempts': ' 1U', 'timeIncrement': 0.00015067863858095, 'increment': 42, 
    'stepTime': 0.361981677109068, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 42, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.362019346768713, 
    'attempts': 2, 'timeIncrement': 3.76696596452375e-05, 'increment': 42, 
    'stepTime': 0.362019346768713, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 43, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.362075851258181, 
    'attempts': 1, 'timeIncrement': 5.65044894678562e-05, 'increment': 43, 
    'stepTime': 0.362075851258181, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 44, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.362160607992382, 
    'attempts': 1, 'timeIncrement': 8.47567342017843e-05, 'increment': 44, 
    'stepTime': 0.362160607992382, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.362160607992382, 
    'attempts': ' 1U', 'timeIncrement': 0.000127135101302676, 'increment': 45, 
    'stepTime': 0.362160607992382, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 45, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.362192391767708, 
    'attempts': 2, 'timeIncrement': 3.17837753256691e-05, 'increment': 45, 
    'stepTime': 0.362192391767708, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.362192391767708, 
    'attempts': ' 1U', 'timeIncrement': 4.76756629885037e-05, 'increment': 46, 
    'stepTime': 0.362192391767708, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.362192391767708, 
    'attempts': ' 2U', 'timeIncrement': 1.19189157471259e-05, 'increment': 46, 
    'stepTime': 0.362192391767708, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Time increment required is less than the minimum specified', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.362192391767708, 
    'attempts': ' 3U', 'timeIncrement': 1e-05, 'increment': 46, 
    'stepTime': 0.362192391767708, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 46, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.362192391767708, 
    'attempts': 4, 'timeIncrement': 1e-35, 'increment': 46, 
    'stepTime': 0.362192391767708, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].interactions['CP-2-FLANGE-1-BOLT-1'].suppress()
mdb.models['Model-RTJ'].interactions['CP-3-FLANGE-1-RTJ-1'].setValues(
    adjustMethod=OVERCLOSED, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    thickness=ON, tied=OFF)
mdb.models['Model-RTJ'].interactions['CP-1-FLANGE-1-BOLT-1'].setValues(
    adjustMethod=OVERCLOSED, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    thickness=ON, tied=OFF)
mdb.models['Model-RTJ'].boundaryConditions['BOLTRTJEDGE'].setValues(typeName=
    YSYMM)
mdb.models['Model-RTJ'].boundaryConditions['BOLTTOP'].setValues(typeName=YSYMM)
mdb.models['Model-RTJ'].boundaryConditions['RTJTOP'].setValues(typeName=YSYMM)
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 16840, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 98.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.104 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.105 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.32 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.104 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 24 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.103 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.104 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.118 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.1 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.2 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.3 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.4 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.19 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.34 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2729 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 1352 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.104 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.104 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.118 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.2 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.3 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.19 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 314 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 8 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.135 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0625, 'attempts': 3, 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0625, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.104 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.104 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.104 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0625, 'attempts': ' 1U', 
    'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.0625, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 6, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.6 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.11 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.17 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.22 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node BOLT-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.117 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node RTJ-1.20 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Warning message limit reached. No further warning messages will be reported.\nPlease see the dat file for more warnings.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.078125, 'attempts': 2, 
    'timeIncrement': 0.015625, 'increment': 2, 'stepTime': 0.078125, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.1015625, 'attempts': 1, 
    'timeIncrement': 0.0234375, 'increment': 3, 'stepTime': 0.1015625, 
    'step': 1, 'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.13671875, 'attempts': 1, 
    'timeIncrement': 0.03515625, 'increment': 4, 'stepTime': 0.13671875, 
    'step': 1, 'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.189453125, 
    'attempts': 1, 'timeIncrement': 0.052734375, 'increment': 5, 
    'stepTime': 0.189453125, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.2685546875, 
    'attempts': 1, 'timeIncrement': 0.0791015625, 'increment': 6, 
    'stepTime': 0.2685546875, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.2685546875, 
    'attempts': ' 1U', 'timeIncrement': 0.0791015625, 'increment': 7, 
    'stepTime': 0.2685546875, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 4, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.2685546875, 
    'attempts': ' 2U', 'timeIncrement': 0.019775390625, 'increment': 7, 
    'stepTime': 0.2685546875, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 6, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.27349853515625, 
    'attempts': 3, 'timeIncrement': 0.00494384765625, 'increment': 7, 
    'stepTime': 0.27349853515625, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.2784423828125, 
    'attempts': 1, 'timeIncrement': 0.00494384765625, 'increment': 8, 
    'stepTime': 0.2784423828125, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.285858154296875, 
    'attempts': 1, 'timeIncrement': 0.007415771484375, 'increment': 9, 
    'stepTime': 0.285858154296875, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.296981811523438, 
    'attempts': 1, 'timeIncrement': 0.0111236572265625, 'increment': 10, 
    'stepTime': 0.296981811523438, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.30810546875, 
    'attempts': 1, 'timeIncrement': 0.0111236572265625, 'increment': 11, 
    'stepTime': 0.30810546875, 'step': 1, 'jobName': 'FLANGERTJ', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.319229125976563, 
    'attempts': 1, 'timeIncrement': 0.0111236572265625, 'increment': 12, 
    'stepTime': 0.319229125976563, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.319229125976563, 
    'attempts': ' 1U', 'timeIncrement': 0.0166854858398438, 'increment': 13, 
    'stepTime': 0.319229125976563, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.323400497436523, 
    'attempts': 2, 'timeIncrement': 0.00417137145996094, 'increment': 13, 
    'stepTime': 0.323400497436523, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.323400497436523, 
    'attempts': ' 1U', 'timeIncrement': 0.00625705718994141, 'increment': 14, 
    'stepTime': 0.323400497436523, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.324964761734009, 
    'attempts': 2, 'timeIncrement': 0.00156426429748535, 'increment': 14, 
    'stepTime': 0.324964761734009, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.327311158180237, 
    'attempts': 1, 'timeIncrement': 0.00234639644622803, 'increment': 15, 
    'stepTime': 0.327311158180237, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.327311158180237, 
    'attempts': ' 1U', 'timeIncrement': 0.00351959466934204, 'increment': 16, 
    'stepTime': 0.327311158180237, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 9, 'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.327311158180237, 
    'attempts': ' 2U', 'timeIncrement': 0.00087989866733551, 'increment': 16, 
    'stepTime': 0.327311158180237, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.327531132847071, 
    'attempts': 3, 'timeIncrement': 0.000219974666833878, 'increment': 16, 
    'stepTime': 0.327531132847071, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.327861094847322, 
    'attempts': 1, 'timeIncrement': 0.000329962000250816, 'increment': 17, 
    'stepTime': 0.327861094847322, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.327861094847322, 
    'attempts': ' 1U', 'timeIncrement': 0.000494943000376225, 'increment': 18, 
    'stepTime': 0.327861094847322, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 8, 'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.327861094847322, 
    'attempts': ' 2U', 'timeIncrement': 0.000123735750094056, 'increment': 18, 
    'stepTime': 0.327861094847322, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.327892028784845, 
    'attempts': 3, 'timeIncrement': 3.0933937523514e-05, 'increment': 18, 
    'stepTime': 0.327892028784845, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.327922962722369, 
    'attempts': 1, 'timeIncrement': 3.0933937523514e-05, 'increment': 19, 
    'stepTime': 0.327922962722369, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.327953896659892, 
    'attempts': 1, 'timeIncrement': 3.0933937523514e-05, 'increment': 20, 
    'stepTime': 0.327953896659892, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.327953896659892, 
    'attempts': ' 1U', 'timeIncrement': 4.6400906285271e-05, 'increment': 21, 
    'stepTime': 0.327953896659892, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.327965496886463, 
    'attempts': 2, 'timeIncrement': 1.16002265713178e-05, 'increment': 21, 
    'stepTime': 0.327965496886463, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 22, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.32798289722632, 
    'attempts': 1, 'timeIncrement': 1.74003398569766e-05, 'increment': 22, 
    'stepTime': 0.32798289722632, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 23, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.328008997736106, 
    'attempts': 1, 'timeIncrement': 2.6100509785465e-05, 'increment': 23, 
    'stepTime': 0.328008997736106, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 24, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.328048148500784, 
    'attempts': 1, 'timeIncrement': 3.91507646781974e-05, 'increment': 24, 
    'stepTime': 0.328048148500784, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 25, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.328106874647801, 
    'attempts': 1, 'timeIncrement': 5.87261470172962e-05, 'increment': 25, 
    'stepTime': 0.328106874647801, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.328106874647801, 
    'attempts': ' 1U', 'timeIncrement': 8.80892205259443e-05, 'increment': 26, 
    'stepTime': 0.328106874647801, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 26, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.328128896952933, 
    'attempts': 2, 'timeIncrement': 2.20223051314861e-05, 'increment': 26, 
    'stepTime': 0.328128896952933, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 27, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.32816193041063, 
    'attempts': 1, 'timeIncrement': 3.30334576972291e-05, 'increment': 27, 
    'stepTime': 0.32816193041063, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.32816193041063, 
    'attempts': ' 1U', 'timeIncrement': 4.95501865458436e-05, 'increment': 28, 
    'stepTime': 0.32816193041063, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 28, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.328174317957266, 
    'attempts': 2, 'timeIncrement': 1.23875466364609e-05, 'increment': 28, 
    'stepTime': 0.328174317957266, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 29, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.328192899277221, 
    'attempts': 1, 'timeIncrement': 1.85813199546914e-05, 'increment': 29, 
    'stepTime': 0.328192899277221, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 30, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.328220771257153, 
    'attempts': 1, 'timeIncrement': 2.78719799320371e-05, 'increment': 30, 
    'stepTime': 0.328220771257153, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 31, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.328262579227051, 
    'attempts': 1, 'timeIncrement': 4.18079698980556e-05, 'increment': 31, 
    'stepTime': 0.328262579227051, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 32, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.328325291181898, 
    'attempts': 1, 'timeIncrement': 6.27119548470834e-05, 'increment': 32, 
    'stepTime': 0.328325291181898, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 33, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.328419359114169, 
    'attempts': 1, 'timeIncrement': 9.4067932270625e-05, 'increment': 33, 
    'stepTime': 0.328419359114169, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 34, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.328560461012575, 
    'attempts': 1, 'timeIncrement': 0.000141101898405938, 'increment': 34, 
    'stepTime': 0.328560461012575, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 35, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.328772113860184, 
    'attempts': 1, 'timeIncrement': 0.000211652847608906, 'increment': 35, 
    'stepTime': 0.328772113860184, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 36, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.329089593131597, 
    'attempts': 1, 'timeIncrement': 0.00031747927141336, 'increment': 36, 
    'stepTime': 0.329089593131597, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 37, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.329565812038717, 
    'attempts': 1, 'timeIncrement': 0.000476218907120039, 'increment': 37, 
    'stepTime': 0.329565812038717, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 38, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.330280140399397, 
    'attempts': 1, 'timeIncrement': 0.000714328360680059, 'increment': 38, 
    'stepTime': 0.330280140399397, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 39, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.331351632940417, 
    'attempts': 1, 'timeIncrement': 0.00107149254102009, 'increment': 39, 
    'stepTime': 0.331351632940417, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 40, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.332958871751947, 
    'attempts': 1, 'timeIncrement': 0.00160723881153013, 'increment': 40, 
    'stepTime': 0.332958871751947, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 41, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.335369729969243, 
    'attempts': 1, 'timeIncrement': 0.0024108582172952, 'increment': 41, 
    'stepTime': 0.335369729969243, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 42, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.338986017295185, 
    'attempts': 1, 'timeIncrement': 0.0036162873259428, 'increment': 42, 
    'stepTime': 0.338986017295185, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 43, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.3444104482841, 
    'attempts': 1, 'timeIncrement': 0.0054244309889142, 'increment': 43, 
    'stepTime': 0.3444104482841, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 44, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.352547094767471, 
    'attempts': 1, 'timeIncrement': 0.0081366464833713, 'increment': 44, 
    'stepTime': 0.352547094767471, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 45, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.364752064492528, 
    'attempts': 1, 'timeIncrement': 0.0122049697250569, 'increment': 45, 
    'stepTime': 0.364752064492528, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 46, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.383059519080113, 
    'attempts': 1, 'timeIncrement': 0.0183074545875854, 'increment': 46, 
    'stepTime': 0.383059519080113, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 47, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.410520700961492, 
    'attempts': 1, 'timeIncrement': 0.0274611818813781, 'increment': 47, 
    'stepTime': 0.410520700961492, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.410520700961492, 
    'attempts': ' 1U', 'timeIncrement': 0.0411917728220672, 'increment': 48, 
    'stepTime': 0.410520700961492, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 48, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.420818644167008, 
    'attempts': 2, 'timeIncrement': 0.0102979432055168, 'increment': 48, 
    'stepTime': 0.420818644167008, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 49, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.436265558975284, 
    'attempts': 1, 'timeIncrement': 0.0154469148082752, 'increment': 49, 
    'stepTime': 0.436265558975284, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 50, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.459435931187696, 
    'attempts': 1, 'timeIncrement': 0.0231703722124128, 'increment': 50, 
    'stepTime': 0.459435931187696, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 51, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.482606303400109, 
    'attempts': 1, 'timeIncrement': 0.0231703722124128, 'increment': 51, 
    'stepTime': 0.482606303400109, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.482606303400109, 
    'attempts': ' 1U', 'timeIncrement': 0.0231703722124128, 'increment': 52, 
    'stepTime': 0.482606303400109, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 52, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.488398896453212, 
    'attempts': 2, 'timeIncrement': 0.0057925930531032, 'increment': 52, 
    'stepTime': 0.488398896453212, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 53, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.497087786032867, 
    'attempts': 1, 'timeIncrement': 0.0086888895796548, 'increment': 53, 
    'stepTime': 0.497087786032867, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.497087786032867, 
    'attempts': ' 1U', 'timeIncrement': 0.0130333343694822, 'increment': 54, 
    'stepTime': 0.497087786032867, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 12, 'iterations': 13, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 54, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.500346119625238, 
    'attempts': 2, 'timeIncrement': 0.00325833359237055, 'increment': 54, 
    'stepTime': 0.500346119625238, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.500346119625238, 
    'attempts': ' 1U', 'timeIncrement': 0.00488750038855582, 'increment': 55, 
    'stepTime': 0.500346119625238, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 55, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.501567994722377, 
    'attempts': 2, 'timeIncrement': 0.00122187509713896, 'increment': 55, 
    'stepTime': 0.501567994722377, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.501567994722377, 
    'attempts': ' 1U', 'timeIncrement': 0.00183281264570843, 'increment': 56, 
    'stepTime': 0.501567994722377, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 56, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.502026197883804, 
    'attempts': 2, 'timeIncrement': 0.000458203161427109, 'increment': 56, 
    'stepTime': 0.502026197883804, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.502026197883804, 
    'attempts': ' 1U', 'timeIncrement': 0.000687304742140663, 'increment': 57, 
    'stepTime': 0.502026197883804, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 57, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.502198024069339, 
    'attempts': 2, 'timeIncrement': 0.000171826185535166, 'increment': 57, 
    'stepTime': 0.502198024069339, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 58, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.502455763347642, 
    'attempts': 1, 'timeIncrement': 0.000257739278302749, 'increment': 58, 
    'stepTime': 0.502455763347642, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 59, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.502842372265096, 
    'attempts': 1, 'timeIncrement': 0.000386608917454123, 'increment': 59, 
    'stepTime': 0.502842372265096, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 60, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.503422285641277, 
    'attempts': 1, 'timeIncrement': 0.000579913376181184, 'increment': 60, 
    'stepTime': 0.503422285641277, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 61, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.504292155705549, 
    'attempts': 1, 'timeIncrement': 0.000869870064271776, 'increment': 61, 
    'stepTime': 0.504292155705549, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 62, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.505596960801956, 
    'attempts': 1, 'timeIncrement': 0.00130480509640766, 'increment': 62, 
    'stepTime': 0.505596960801956, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 63, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.507554168446568, 
    'attempts': 1, 'timeIncrement': 0.0019572076446115, 'increment': 63, 
    'stepTime': 0.507554168446568, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 64, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.510489979913485, 
    'attempts': 1, 'timeIncrement': 0.00293581146691724, 'increment': 64, 
    'stepTime': 0.510489979913485, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 65, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.514893697113861, 
    'attempts': 1, 'timeIncrement': 0.00440371720037587, 'increment': 65, 
    'stepTime': 0.514893697113861, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 66, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.521499272914425, 
    'attempts': 1, 'timeIncrement': 0.0066055758005638, 'increment': 66, 
    'stepTime': 0.521499272914425, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 67, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.53140763661527, 
    'attempts': 1, 'timeIncrement': 0.0099083637008457, 'increment': 67, 
    'stepTime': 0.53140763661527, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 68, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.546270182166539, 
    'attempts': 1, 'timeIncrement': 0.0148625455512686, 'increment': 68, 
    'stepTime': 0.546270182166539, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.546270182166539, 
    'attempts': ' 1U', 'timeIncrement': 0.0222938183269028, 'increment': 69, 
    'stepTime': 0.546270182166539, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 69, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.551843636748265, 
    'attempts': 2, 'timeIncrement': 0.00557345458172571, 'increment': 69, 
    'stepTime': 0.551843636748265, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 70, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.560203818620853, 
    'attempts': 1, 'timeIncrement': 0.00836018187258856, 'increment': 70, 
    'stepTime': 0.560203818620853, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 71, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.572744091429736, 
    'attempts': 1, 'timeIncrement': 0.0125402728088828, 'increment': 71, 
    'stepTime': 0.572744091429736, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 72, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.59155450064306, 
    'attempts': 1, 'timeIncrement': 0.0188104092133243, 'increment': 72, 
    'stepTime': 0.59155450064306, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 73, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.619770114463047, 
    'attempts': 1, 'timeIncrement': 0.0282156138199864, 'increment': 73, 
    'stepTime': 0.619770114463047, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.619770114463047, 
    'attempts': ' 1U', 'timeIncrement': 0.0423234207299796, 'increment': 74, 
    'stepTime': 0.619770114463047, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 74, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.630350969645541, 
    'attempts': 2, 'timeIncrement': 0.0105808551824949, 'increment': 74, 
    'stepTime': 0.630350969645541, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.630350969645541, 
    'attempts': ' 1U', 'timeIncrement': 0.0158712827737423, 'increment': 75, 
    'stepTime': 0.630350969645541, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 7, 'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 75, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.634318790338977, 
    'attempts': 2, 'timeIncrement': 0.00396782069343559, 'increment': 75, 
    'stepTime': 0.634318790338977, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 76, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.64027052137913, 
    'attempts': 1, 'timeIncrement': 0.00595173104015338, 'increment': 76, 
    'stepTime': 0.64027052137913, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.64027052137913, 
    'attempts': ' 1U', 'timeIncrement': 0.00892759656023007, 'increment': 77, 
    'stepTime': 0.64027052137913, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 77, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.642502420519188, 
    'attempts': 2, 'timeIncrement': 0.00223189914005752, 'increment': 77, 
    'stepTime': 0.642502420519188, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.642502420519188, 
    'attempts': ' 1U', 'timeIncrement': 0.00334784871008628, 'increment': 78, 
    'stepTime': 0.642502420519188, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 78, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.64333938269671, 
    'attempts': 2, 'timeIncrement': 0.000836962177521569, 'increment': 78, 
    'stepTime': 0.64333938269671, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 79, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.644594825962992, 
    'attempts': 1, 'timeIncrement': 0.00125544326628235, 'increment': 79, 
    'stepTime': 0.644594825962992, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.644594825962992, 
    'attempts': ' 1U', 'timeIncrement': 0.00188316489942353, 'increment': 80, 
    'stepTime': 0.644594825962992, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 5, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 80, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.645065617187848, 
    'attempts': 2, 'timeIncrement': 0.000470791224855883, 'increment': 80, 
    'stepTime': 0.645065617187848, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.645065617187848, 
    'attempts': ' 1U', 'timeIncrement': 0.000706186837283824, 'increment': 81, 
    'stepTime': 0.645065617187848, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 11, 'iterations': 16, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 81, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.645242163897169, 
    'attempts': 2, 'timeIncrement': 0.000176546709320956, 'increment': 81, 
    'stepTime': 0.645242163897169, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 82, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.64550698396115, 
    'attempts': 1, 'timeIncrement': 0.000264820063981434, 'increment': 82, 
    'stepTime': 0.64550698396115, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 83, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.645904214057122, 
    'attempts': 1, 'timeIncrement': 0.000397230095972151, 'increment': 83, 
    'stepTime': 0.645904214057122, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 84, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.646500059201081, 
    'attempts': 1, 'timeIncrement': 0.000595845143958226, 'increment': 84, 
    'stepTime': 0.646500059201081, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 85, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.647393826917018, 
    'attempts': 1, 'timeIncrement': 0.00089376771593734, 'increment': 85, 
    'stepTime': 0.647393826917018, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 86, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.648734478490924, 
    'attempts': 1, 'timeIncrement': 0.00134065157390601, 'increment': 86, 
    'stepTime': 0.648734478490924, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 87, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.650745455851783, 
    'attempts': 1, 'timeIncrement': 0.00201097736085901, 'increment': 87, 
    'stepTime': 0.650745455851783, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 88, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.653761921893071, 
    'attempts': 1, 'timeIncrement': 0.00301646604128852, 'increment': 88, 
    'stepTime': 0.653761921893071, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 89, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.658286620955004, 
    'attempts': 1, 'timeIncrement': 0.00452469906193278, 'increment': 89, 
    'stepTime': 0.658286620955004, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 90, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.665073669547903, 
    'attempts': 1, 'timeIncrement': 0.00678704859289917, 'increment': 90, 
    'stepTime': 0.665073669547903, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.665073669547903, 
    'attempts': ' 1U', 'timeIncrement': 0.0101805728893488, 'increment': 91, 
    'stepTime': 0.665073669547903, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 6, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 91, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.667618812770241, 
    'attempts': 2, 'timeIncrement': 0.00254514322233719, 'increment': 91, 
    'stepTime': 0.667618812770241, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 92, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.671436527603746, 
    'attempts': 1, 'timeIncrement': 0.00381771483350579, 'increment': 92, 
    'stepTime': 0.671436527603746, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 93, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.677163099854005, 
    'attempts': 1, 'timeIncrement': 0.00572657225025868, 'increment': 93, 
    'stepTime': 0.677163099854005, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.677163099854005, 
    'attempts': ' 1U', 'timeIncrement': 0.00858985837538802, 'increment': 94, 
    'stepTime': 0.677163099854005, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 11, 'iterations': 16, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 94, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.679310564447852, 
    'attempts': 2, 'timeIncrement': 0.002147464593847, 'increment': 94, 
    'stepTime': 0.679310564447852, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 95, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.682531761338622, 
    'attempts': 1, 'timeIncrement': 0.00322119689077051, 'increment': 95, 
    'stepTime': 0.682531761338622, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 96, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.687363556674778, 
    'attempts': 1, 'timeIncrement': 0.00483179533615576, 'increment': 96, 
    'stepTime': 0.687363556674778, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 97, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.694611249679012, 
    'attempts': 1, 'timeIncrement': 0.00724769300423364, 'increment': 97, 
    'stepTime': 0.694611249679012, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 98, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.705482789185362, 
    'attempts': 1, 'timeIncrement': 0.0108715395063505, 'increment': 98, 
    'stepTime': 0.705482789185362, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 99, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.721790098444888, 
    'attempts': 1, 'timeIncrement': 0.0163073092595257, 'increment': 99, 
    'stepTime': 0.721790098444888, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 100, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.746251062334177, 
    'attempts': 1, 'timeIncrement': 0.0244609638892885, 'increment': 100, 
    'stepTime': 0.746251062334177, 'step': 1, 'jobName': 'FLANGERTJ', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many increments needed to complete the step', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    formulation=ROUGH)
mdb.models['Model-RTJ'].interactionProperties['IntProp-1'].normalBehavior.setValues(
    allowSeparation=ON, clearanceAtZeroContactPressure=0.0, 
    constraintEnforcementMethod=PENALTY, contactStiffness=DEFAULT, 
    contactStiffnessScaleFactor=1.0, pressureOverclosure=HARD, 
    stiffnessBehavior=LINEAR)
mdb.models['Model-RTJ'].interactions['CP-1-FLANGE-1-BOLT-1'].setValues(
    adjustMethod=NONE, bondingSet=None, contactTracking=TWO_CONFIG, 
    enforcement=SURFACE_TO_SURFACE, initialClearance=OMIT, sliding=FINITE, 
    surfaceSmoothing=NONE, thickness=ON, tied=OFF)
mdb.models['Model-RTJ'].interactions['CP-3-FLANGE-1-RTJ-1'].setValues(
    adjustMethod=NONE, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    surfaceSmoothing=NONE, thickness=ON, tied=OFF)
mdb.models['Model-RTJ'].interactions['CP-3-FLANGE-1-RTJ-1'].swapSurfaces()
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '*FRICTION,LAGRANGE OR *FRICTION,ROUGH MAY CAUSE CONVERGENCE DIFFICULTY WHEN USED IN CONJUNCTION WITH THE *SURFACE BEHAVIOR, AUGMENTED LAGRANGE OR PENALTY OPTION. USE PENALTY FRICTION INSTEAD.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'PLEASE MAKE SURE THAT THE MESH DENSITY OF THE SLAVE SURFACE IN THE CONTACT PAIR (ASSEMBLY_CP-3-FLANGE-1,ASSEMBLY_CP-3-RTJ-1) IS FINER THAN THE MASTER SURFACE.  THE ANALYSIS MAY RUN SLOWER, MAY YIELD INACCURATE RESULTS, AND MAY REQUIRE MORE MEMORY IF THIS IS NOT THE CASE.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 6856, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 96.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].interactions['CP-1-FLANGE-1-BOLT-1'].setValues(
    adjustMethod=NONE, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    thickness=ON)
mdb.models['Model-RTJ'].interactions['CP-3-FLANGE-1-RTJ-1'].setValues(
    adjustMethod=NONE, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    surfaceSmoothing=AUTOMATIC, thickness=ON)
mdb.models['Model-RTJ'].interactions['CP-1-FLANGE-1-BOLT-1'].setValues(
    adjustMethod=NONE, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    surfaceSmoothing=AUTOMATIC, thickness=ON)
mdb.models['Model-RTJ'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.3, ), ), temperatureDependency=OFF)
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'PLEASE MAKE SURE THAT THE MESH DENSITY OF THE SLAVE SURFACE IN THE CONTACT PAIR (ASSEMBLY_CP-3-FLANGE-1,ASSEMBLY_CP-3-RTJ-1) IS FINER THAN THE MASTER SURFACE.  THE ANALYSIS MAY RUN SLOWER, MAY YIELD INACCURATE RESULTS, AND MAY REQUIRE MORE MEMORY IF THIS IS NOT THE CASE.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 10736, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 154.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2730 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 2730 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2730 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 2730 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2730 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 2730 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2730 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 2730 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2730 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 2730 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].interactions['CP-3-FLANGE-1-RTJ-1'].setValues(
    adjustMethod=NONE, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    thickness=ON)
mdb.models['Model-RTJ'].interactions['CP-3-FLANGE-1-RTJ-1'].swapSurfaces()
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 15972, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 154.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2730 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2730 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 207 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2434 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2659 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 172 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2396 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2713 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 35 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 62 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 456 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2179 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 235 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 60 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 329 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].materials['RTJ Gasket'].plastic.setValues(table=((
    525.0, 0.0), ))
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 5036, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 154.0})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2646 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 1 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1572 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2173 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2704 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 702 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 693 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2606 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 3 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 359 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1866 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 329 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 120 POINTS', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'FLANGERTJ'})
del mdb.models['Model-RTJ'].materials['RTJ Gasket'].plastic
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 1824, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 154.0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 6, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov 18 15:06:06 2018', 'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].boundaryConditions['RTJTOP'].setValues(typeName=PINNED)
mdb.models['Model-RTJ'].boundaryConditions['BOLTTOP'].setValues(typeName=
    PINNED)
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 22780, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 154.0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 5, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov 18 15:09:21 2018', 'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].interactions['CP-1-FLANGE-1-BOLT-1'].setValues(
    adjustMethod=OVERCLOSED, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    thickness=ON, tied=OFF)
mdb.models['Model-RTJ'].interactions['CP-3-FLANGE-1-RTJ-1'].setValues(
    adjustMethod=OVERCLOSED, bondingSet=None, enforcement=SURFACE_TO_SURFACE, 
    initialClearance=OMIT, sliding=SMALL, supplementaryContact=SELECTIVE, 
    thickness=ON, tied=OFF)
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 13480, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 155.0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 2, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FLANGERTJ']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov 18 15:12:06 2018', 'jobName': 'FLANGERTJ'})
mdb.models['Model-RTJ'].interactions['CP-2-FLANGE-1-BOLT-1'].resume()
del mdb.models['Model-RTJ'].interactions['CP-2-FLANGE-1-BOLT-1']
mdb.models['Model-RTJ'].loads.changeKey(fromName='Load-2', toName='BOLTLOAD')
mdb.models['Model-RF'].boundaryConditions['BC-1'].setValues(typeName=PINNED)
mdb.models['Model-RF'].boundaryConditions['BC-5'].setValues(typeName=PINNED)
mdb.jobs['FlangeRF'].submit(consistencyChecking=OFF)
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FlangeRF.odb', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 11136, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FlangeRF', 'memory': 195.0})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 19 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 1 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.9 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.325 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.178 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.195 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.196 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.197 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.198 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.30 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.33 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node FLANGE-1.374 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.10 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.179 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.180 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.181 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.182 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.183 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.184 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.185 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.186 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.187 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.188 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.189 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.190 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.191 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.192 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.193 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'overconstraint checks:slave node SPRIALWOUND GASKET-1.194 has prescribed displacements tangent to the master surface. this could make the friction constraint for these contact slave nodes redundant; hence the friction formulation is changed from *friction,lagrange or *friction,rough to the default fenalty method (friction coefficient of 1.E+03      in the case of *friction,rough). ', 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.0625, 'attempts': 3, 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0625, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.125, 'attempts': 1, 
    'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.125, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.21875, 'attempts': 1, 
    'timeIncrement': 0.09375, 'increment': 3, 'stepTime': 0.21875, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.359375, 'attempts': 1, 
    'timeIncrement': 0.140625, 'increment': 4, 'stepTime': 0.359375, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.5703125, 'attempts': 1, 
    'timeIncrement': 0.2109375, 'increment': 5, 'stepTime': 0.5703125, 
    'step': 1, 'jobName': 'FlangeRF', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 0.88671875, 'attempts': 1, 
    'timeIncrement': 0.31640625, 'increment': 6, 'stepTime': 0.88671875, 
    'step': 1, 'jobName': 'FlangeRF', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['FlangeRF']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.11328125, 'increment': 7, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FlangeRF', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FlangeRF']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FlangeRF'})
mdb.jobs['FlangeRF']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov 18 15:29:29 2018', 'jobName': 'FlangeRF'})
mdb.models['Model-RTJ'].parts['RTJ'].deleteMesh()
mdb.models['Model-RTJ'].parts['RTJ'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.5)
mdb.models['Model-RTJ'].parts['RTJ'].generateMesh()
mdb.models['Model-RTJ'].rootAssembly.regenerate()
mdb.models['Model-RTJ'].rootAssembly.Set(name='RTJTOP', nodes=
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].nodes.getSequenceFromMask(
    mask=('[#0:8 #fffc0000 #ffffffff #fffc1fff #ffffffff #1fff #0:143', 
    ' #ffffc000 #ffffffff:38 #1f ]', ), ))
mdb.models['Model-RTJ'].rootAssembly.Set(name='RTJS1', nodes=
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].nodes.getSequenceFromMask(
    mask=('[#c0 #0:11 #ffffe000 #3 ]', ), ))
mdb.models['Model-RTJ'].interactions['CP-3-FLANGE-1-RTJ-1'].suppress()
mdb.models['Model-RTJ'].interactions['CP-3-FLANGE-1-RTJ-1'].resume()
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
#* Academic Teaching license is restricted to 20000 nodes.
#* Academic Teaching license is restricted to 20000 nodes.
#* Academic Teaching license is restricted to 20000 nodes.
mdb.models['Model-RTJ'].parts['RTJ'].deleteMesh()
mdb.models['Model-RTJ'].parts['RTJ'].seedPart(deviationFactor=0.01, 
    minSizeFactor=0.1, size=0.8)
mdb.models['Model-RTJ'].parts['RTJ'].generateMesh()
mdb.models['Model-RTJ'].parts['RTJ'].deleteMesh()
mdb.models['Model-RTJ'].parts['RTJ'].seedPart(deviationFactor=0.01, 
    minSizeFactor=0.1, size=0.5)
mdb.models['Model-RTJ'].parts['RTJ'].seedPart(deviationFactor=0.01, 
    minSizeFactor=0.1, size=0.6)
mdb.models['Model-RTJ'].parts['RTJ'].generateMesh()
mdb.models['Model-RF'].loads.changeKey(fromName='Load-2', toName='BOLTLOAD')
mdb.models['Model-RTJ'].rootAssembly.regenerate()
mdb.models['Model-RTJ'].rootAssembly.Surface(name='Surf-9', side2Faces=
    mdb.models['Model-RTJ'].rootAssembly.instances['BOLT-1'].faces.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model-RTJ'].loads['BOLTLOAD'].setValues(region=
    mdb.models['Model-RTJ'].rootAssembly.surfaces['Surf-9'])
mdb.models['Model-RTJ'].rootAssembly.Set(name='RTJS1', nodes=
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].nodes.getSequenceFromMask(
    mask=('[#c0 #0:9 #fc000000 #fff ]', ), ))
mdb.models['Model-RTJ'].rootAssembly.Set(name='RTJTOP', nodes=
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].nodes.getSequenceFromMask(
    mask=('[#f0 #0:5 #f0000000 #ffc03fff #ffffffff #fffffc3f #ffffffff', 
    ' #fff #0:113 #fffff000 #ffffffff:26 #fff ]', ), ))
mdb.models['Model-RTJ'].rootAssembly.Set(name='RTJTOP', nodes=
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].nodes.getSequenceFromMask(
    mask=('[#0:7 #ffc00000 #ffffffff #fffffc3f #3ffffff #0:114 #fffff000', 
    ' #ffffffff:26 #fff ]', ), ))
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
#* Academic Teaching license is restricted to 20000 nodes.
#* Academic Teaching license is restricted to 20000 nodes.
#* Academic Teaching license is restricted to 20000 nodes.
mdb.models['Model-RTJ'].parts['RTJ'].deleteMesh()
mdb.models['Model-RTJ'].parts['RTJ'].seedPart(deviationFactor=0.01, 
    minSizeFactor=0.1, size=0.7)
mdb.models['Model-RTJ'].parts['RTJ'].generateMesh()
mdb.models['Model-RTJ'].rootAssembly.regenerate()
mdb.models['Model-RTJ'].rootAssembly.Set(name='RTJS1', nodes=
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].nodes.getSequenceFromMask(
    mask=('[#c0 #0:8 #f8000000 #3ff ]', ), ))
mdb.models['Model-RTJ'].rootAssembly.Set(name='RTJTOP', nodes=
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].nodes.getSequenceFromMask(
    mask=('[#f0 #0:5 #7fff000 #fffffff8 #fffe1fff #ffffffff #3ff', 
    ' #0:96 #f0000000 #ffffffff:19 #3ffff ]', ), ))
mdb.models['Model-RTJ'].rootAssembly.Set(name='RTJTOP', nodes=
    mdb.models['Model-RTJ'].rootAssembly.instances['RTJ-1'].nodes.getSequenceFromMask(
    mask=('[#0:7 #fffffff8 #fffe1fff #7ffffff #0:97 #f0000000 #ffffffff:19', 
    ' #3ffff ]', ), ))
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-3-RTJ-1-ASSEMBLY_CP-3-FLANGE-1), NOT ALL THE NODES THAT HAVE BEEN ADJUSTED WERE PRINTED. SPECIFY *PREPRINT,CONTACT=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 21332, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 1722.0})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov 18 15:49:15 2018', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ'].submit(consistencyChecking=OFF)
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NOT ALL THE NODES THAT DO NOT FIND INTERSECTION WITH THE MASTER SURFACE ARE PRINTED. HOWEVER ALL OF THESE NODES HAVE BEEN INCLUDED IN A NODE SET.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-3-RTJ-1-ASSEMBLY_CP-3-FLANGE-1), NOT ALL THE NODES THAT HAVE BEEN ADJUSTED WERE PRINTED. SPECIFY *PREPRINT,CONTACT=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\FLANGERTJ.odb', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-V42I55M', 'handle': 4304, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FLANGERTJ']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FLANGERTJ', 'memory': 693.0})
mdb.jobs['FLANGERTJ']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FLANGERTJ', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FLANGERTJ']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FLANGERTJ'})
mdb.jobs['FLANGERTJ']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov 18 15:49:59 2018', 'jobName': 'FLANGERTJ'})
# Save by bijran on 2018_11_18-15.52.26; build 6.14-2 2014_08_22-22.00.46 134497
# Save by bijran on 2018_11_18-15.53.31; build 6.14-2 2014_08_22-22.00.46 134497
# Save by bijran on 2018_11_18-16.03.54; build 6.14-2 2014_08_22-22.00.46 134497
# Save by bijran on 2018_11_18-16.04.06; build 6.14-2 2014_08_22-22.00.46 134497
